<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
<comment>Test XPath expressions that must be successfully parsed. Thanks to W3C for test suite https://dev.w3.org/2011/QT3-test-suite/.</comment>
<entry key="unabbreviatedSyntax-1">for $h in (/works/employee) return $h/child::empnum</entry>
<entry key="K-ForExprWithout-17">6 eq (for $foo in 1, $foo in 3 return $foo + $foo)</entry>
<entry key="K-ForExprWithout-16">8 eq (for $foo in 1, $foo in 3, $moo in 5 return $moo + $foo)</entry>
<entry key="K-SeqExprCast-270">xs:string(xs:gMonth("--01Z")) eq "--01Z"</entry>
<entry key="K-ForExprWithout-15">3 eq (for $foo in 1, $foo in 3 return $foo)</entry>
<entry key="K-ForExprWithout-14">3 eq (for $foo in 1 return for $bar in 2 return $bar + $foo)</entry>
<entry key="K-ForExprWithout-13">3 eq (for $foo in 1 return for $bar in 2 return $bar + $foo)</entry>
<entry key="K-ForExprWithout-12">4 eq (for $foo in 1, $bar in 2, $moo in 3 return 4)</entry>
<entry key="K-ForExprWithout-11">deep-equal((2, 2), (for $foo in (1, 1) return 1 + $foo))</entry>
<entry key="K-ForExprWithout-10">deep-equal((for $var in (1, 2, 3) return $var), (1, 2, 3))</entry>
<entry key="cbcl-castable-dateTime-002">"25252734927766555-07-29T00:00:00Z" castable as xs:dateTime</entry>
<entry key="cbcl-castable-dateTime-001">"-25252734927766555-06-06T00:00:00Z" castable as xs:dateTime</entry>
<entry key="Axes075-4">fn:count(//center//child::south)</entry>
<entry key="Axes075-3">fn:count(//center//child::south)</entry>
<entry key="Axes075-2">fn:count(//center//child::south)</entry>
<entry key="Axes075-1">fn:count(//center//child::south)</entry>
<entry key="K-SeqExprCast-269">xs:string(xs:gMonth("--01+00:00")) eq "--01Z"</entry>
<entry key="K-SeqExprCast-268">xs:string(xs:gMonth("--01-00:00")) eq "--01Z"</entry>
<entry key="K-GenCompEq-8">not((1, 2) = (3, 4))</entry>
<entry key="K-GenCompEq-7">(2, 3) = (3, 4)</entry>
<entry key="K-GenCompEq-6">(1, 2) = (2, 3)</entry>
<entry key="K-GenCompEq-4">not(1 = ())</entry>
<entry key="K-GenCompEq-3">not((() = 1))</entry>
<entry key="K-GenCompEq-2">not((() = ()))</entry>
<entry key="K-GenCompEq-1">not(() = ())</entry>
<entry key="K-SeqExprTreat-17">(remove((5, 1e0), 2) treat as xs:integer) eq 5</entry>
<entry key="K-SeqExprTreat-14">(3 treat as xs:integer ? * 3) eq 9</entry>
<entry key="Axes064-3">fn:count(//child::node())</entry>
<entry key="Axes064-2">fn:count(//child::node())</entry>
<entry key="Axes064-1">fn:count(//child::node())</entry>
<entry key="K-SeqExprCast-255">xs:string(xs:gDay("---01Z")) eq "---01Z"</entry>
<entry key="K-SeqExprCast-254">xs:string(xs:gDay("---01+00:00")) eq "---01Z"</entry>
<entry key="K-SeqExprCast-253">xs:string(xs:gDay("---01-00:00")) eq "---01Z"</entry>
<entry key="K-SeqExprCast-233">xs:string(xs:gYear("1999Z")) eq "1999Z"</entry>
<entry key="K-SeqExprCast-232">xs:string(xs:gYear("1999+00:00")) eq "1999Z"</entry>
<entry key="K-SeqExprCast-231">xs:string(xs:gYear("1999-00:00")) eq "1999Z"</entry>
<entry key="CastAs599">xs:base64Binary("10010101") cast as xs:hexBinary</entry>
<entry key="CastAs598">xs:base64Binary("00000000") cast as xs:hexBinary</entry>
<entry key="CastAs597">xs:base64Binary("0FB7") cast as xs:base64Binary</entry>
<entry key="CastAs596">xs:base64Binary("01001010") cast as xs:base64Binary</entry>
<entry key="cbcl-cast-entity-001">xs:NCName('entity') cast as xs:ENTITY</entry>
<entry key="Axes031-4">fn:count(//center/descendant::*)</entry>
<entry key="Axes031-3">fn:count(//center/descendant::*)</entry>
<entry key="Axes031-2">fn:count(//center/descendant::*)</entry>
<entry key="Axes031-1">fn:count(//center/descendant::*)</entry>
<entry key="K-SeqExprCast-211">xs:string(xs:yearMonthDuration(xs:dayTimeDuration("-P31DT3H2M10.001S"))) eq "P0M"</entry>
<entry key="K-SeqExprCast-210">xs:string(xs:yearMonthDuration(xs:duration("-P3Y0M31DT3H2M10.001S"))) eq "-P3Y"</entry>
<entry key="appendix-A4-9">-+7</entry>
<entry key="appendix-A4-8">5 - 10 mod 4</entry>
<entry key="appendix-A4-7">5 + 10 mod 4</entry>
<entry key="appendix-A4-6">5 - 10 idiv 4</entry>
<entry key="CastAs579">xs:base64Binary("0FB7") cast as xs:string</entry>
<entry key="appendix-A4-5">5 + 10 idiv 4</entry>
<entry key="CastAs578">xs:base64Binary("01001010") cast as xs:string</entry>
<entry key="appendix-A4-4">5 - 10 div 2</entry>
<entry key="CastAs577">xs:base64Binary("0FB7") cast as xs:untypedAtomic</entry>
<entry key="appendix-A4-3">3 + 10 div 2</entry>
<entry key="CastAs576">xs:base64Binary("01001010") cast as xs:untypedAtomic</entry>
<entry key="appendix-A4-2">3 - 5 * 3</entry>
<entry key="appendix-A4-1">-3 + 5 * 3</entry>
<entry key="Axes020-1">fn:count(//center/self::*)</entry>
<entry key="CastAs572">xs:boolean("false") cast as xs:boolean</entry>
<entry key="CastAs571">xs:boolean("true") cast as xs:boolean</entry>
<entry key="K-SeqExprCast-209">xs:string(xs:yearMonthDuration(xs:dayTimeDuration("P31DT3H2M10.001S"))) eq "P0M"</entry>
<entry key="K-SeqExprCast-208">xs:string(xs:yearMonthDuration(xs:duration("P3Y0M31DT3H2M10.001S"))) eq "P3Y"</entry>
<entry key="K-SeqExprCast-207">xs:string(xs:yearMonthDuration("-P0M")) eq "P0M"</entry>
<entry key="K-SeqExprCast-206">xs:string(xs:yearMonthDuration("-P543Y456M")) eq "-P581Y"</entry>
<entry key="K-SeqExprCast-205">xs:string(xs:yearMonthDuration("P2Y323M")) eq "P28Y11M"</entry>
<entry key="K-SeqExprCast-204">xs:string(xs:yearMonthDuration("P0Y0M")) eq "P0M"</entry>
<entry key="K-SeqExprCast-203">xs:string(xs:yearMonthDuration("-P0010Y0010M")) eq "-P10Y10M"</entry>
<entry key="K-SeqExprCast-202">xs:string(xs:yearMonthDuration("P0010Y0010M")) eq "P10Y10M"</entry>
<entry key="function-literal-199">exists(Q{http://www.w3.org/2005/xpath-functions}day-from-dateTime#1)</entry>
<entry key="function-literal-198">Q{http://www.w3.org/2005/xpath-functions}month-from-dateTime#1(xs:dateTime('2012-04-03T02:01:00Z'))</entry>
<entry key="function-literal-197">exists(Q{http://www.w3.org/2005/xpath-functions}month-from-dateTime#1)</entry>
<entry key="function-literal-196">Q{http://www.w3.org/2005/xpath-functions}year-from-dateTime#1(xs:dateTime('2012-04-03T02:01:00Z'))</entry>
<entry key="function-literal-195">exists(Q{http://www.w3.org/2005/xpath-functions}year-from-dateTime#1)</entry>
<entry key="function-literal-194">Q{http://www.w3.org/2005/xpath-functions}dateTime#2(xs:date('2012-01-01Z'), xs:time('00:00:00Z'))</entry>
<entry key="function-literal-193">exists(Q{http://www.w3.org/2005/xpath-functions}dateTime#2)</entry>
<entry key="function-literal-192">Q{http://www.w3.org/2005/xpath-functions}seconds-from-duration#1(xs:dayTimeDuration("P3DT10H12.5S"))</entry>
<entry key="function-literal-191">exists(Q{http://www.w3.org/2005/xpath-functions}seconds-from-duration#1)</entry>
<entry key="function-literal-190">Q{http://www.w3.org/2005/xpath-functions}minutes-from-duration#1(xs:dayTimeDuration("P3DT10H"))</entry>
<entry key="CastAs559">xs:boolean("false") cast as xs:integer</entry>
<entry key="CastAs558">xs:boolean("true") cast as xs:integer</entry>
<entry key="CastAs557">xs:boolean("false") cast as xs:decimal</entry>
<entry key="CastAs556">xs:boolean("true") cast as xs:decimal</entry>
<entry key="CastAs555">xs:boolean("false") cast as xs:double</entry>
<entry key="CastAs554">xs:boolean("true") cast as xs:double</entry>
<entry key="CastAs553">xs:boolean("false") cast as xs:float</entry>
<entry key="CastAs552">xs:boolean("true") cast as xs:float</entry>
<entry key="CastAs551">xs:boolean("true") cast as xs:string</entry>
<entry key="CastAs550">xs:boolean("true") cast as xs:untypedAtomic</entry>
<entry key="function-literal-189">exists(Q{http://www.w3.org/2005/xpath-functions}minutes-from-duration#1)</entry>
<entry key="function-literal-188">Q{http://www.w3.org/2005/xpath-functions}hours-from-duration#1(xs:dayTimeDuration("P3DT10H"))</entry>
<entry key="function-literal-187">exists(Q{http://www.w3.org/2005/xpath-functions}hours-from-duration#1)</entry>
<entry key="function-literal-186">Q{http://www.w3.org/2005/xpath-functions}days-from-duration#1(xs:dayTimeDuration("P3DT10H"))</entry>
<entry key="function-literal-185">exists(Q{http://www.w3.org/2005/xpath-functions}days-from-duration#1)</entry>
<entry key="function-literal-184">Q{http://www.w3.org/2005/xpath-functions}months-from-duration#1(xs:yearMonthDuration("P20Y15M"))</entry>
<entry key="function-literal-183">exists(Q{http://www.w3.org/2005/xpath-functions}months-from-duration#1)</entry>
<entry key="function-literal-182">Q{http://www.w3.org/2005/xpath-functions}years-from-duration#1(xs:yearMonthDuration("P20Y15M"))</entry>
<entry key="function-literal-181">exists(Q{http://www.w3.org/2005/xpath-functions}years-from-duration#1)</entry>
<entry key="function-literal-180">Q{http://www.w3.org/2005/xpath-functions}not#1("string")</entry>
<entry key="CastAs545">xs:gMonth("--05Z") cast as xs:gMonth</entry>
<entry key="CastAs544">xs:gMonth("--12-05:00") cast as xs:gMonth</entry>
<entry key="CastAs543">xs:gMonth("--05") cast as xs:gMonth</entry>
<entry key="function-literal-179">exists(Q{http://www.w3.org/2005/xpath-functions}not#1)</entry>
<entry key="function-literal-178">Q{http://www.w3.org/2005/xpath-functions}boolean#1("string")</entry>
<entry key="function-literal-177">exists(Q{http://www.w3.org/2005/xpath-functions}boolean#1)</entry>
<entry key="function-literal-176">Q{http://www.w3.org/2005/xpath-functions}false#0()</entry>
<entry key="function-literal-175">exists(Q{http://www.w3.org/2005/xpath-functions}false#0)</entry>
<entry key="function-literal-174">Q{http://www.w3.org/2005/xpath-functions}true#0()</entry>
<entry key="function-literal-173">exists(Q{http://www.w3.org/2005/xpath-functions}true#0)</entry>
<entry key="K-SeqExprCast-899">subsequence(("dummy", 1.1, xs:date("2004-10-13")), 3, 1) instance of xs:date</entry>
<entry key="function-literal-172">Q{http://www.w3.org/2005/xpath-functions}escape-html-uri#1('http://www.example.com/')</entry>
<entry key="function-literal-171">exists(Q{http://www.w3.org/2005/xpath-functions}escape-html-uri#1)</entry>
<entry key="function-literal-170">Q{http://www.w3.org/2005/xpath-functions}iri-to-uri#1('http://www.example.com/')</entry>
<entry key="K-SeqExprCast-895">not(xs:time("03:20:00-05:00") castable as xs:QName)</entry>
<entry key="K-SeqExprCast-893">not(xs:time("03:20:00-05:00") castable as xs:anyURI)</entry>
<entry key="K-SeqExprCast-891">not(xs:time("03:20:00-05:00") castable as xs:hexBinary)</entry>
<entry key="function-literal-169">exists(Q{http://www.w3.org/2005/xpath-functions}iri-to-uri#1)</entry>
<entry key="function-literal-168">Q{http://www.w3.org/2005/xpath-functions}encode-for-uri#1(' ')</entry>
<entry key="function-literal-167">exists(Q{http://www.w3.org/2005/xpath-functions}encode-for-uri#1)</entry>
<entry key="function-literal-166">Q{http://www.w3.org/2005/xpath-functions}resolve-uri#2('/2005/xpath-functions', 'http://www.w3.org/')</entry>
<entry key="K-QuantExprWithout-93">deep-equal((for $a in 1, $b in $a, $c in $a, $d in $c return ($a, $b, $c, $d)), (1, 1, 1, 1))</entry>
<entry key="function-literal-165">exists(Q{http://www.w3.org/2005/xpath-functions}resolve-uri#2)</entry>
<entry key="K-QuantExprWithout-92">some $a in (1, 2), $b in $a satisfies $b</entry>
<entry key="function-literal-164">Q{http://www.w3.org/2005/xpath-functions}resolve-uri#1('http://www.w3.org/2005/xpath-functions')</entry>
<entry key="K-QuantExprWithout-91">every $a in (1, 2), $b in $a satisfies $b</entry>
<entry key="function-literal-163">exists(Q{http://www.w3.org/2005/xpath-functions}resolve-uri#1)</entry>
<entry key="K-SeqExprCast-889">not(xs:time("03:20:00-05:00") castable as xs:base64Binary)</entry>
<entry key="K-QuantExprWithout-90">some $a in (1, 2, 3), $b in ($a, 4) satisfies $b gt 0</entry>
<entry key="function-literal-162">Q{http://www.w3.org/2005/xpath-functions}analyze-string#3('', 'abc', 'i')</entry>
<entry key="function-literal-161">exists(Q{http://www.w3.org/2005/xpath-functions}analyze-string#3)</entry>
<entry key="K-SeqExprCast-887">not(xs:time("03:20:00-05:00") castable as xs:boolean)</entry>
<entry key="function-literal-160">Q{http://www.w3.org/2005/xpath-functions}analyze-string#2('', 'abc')</entry>
<entry key="K-SeqExprCast-885">not(xs:time("03:20:00-05:00") castable as xs:gMonth)</entry>
<entry key="K-SeqExprCast-883">not(xs:time("03:20:00-05:00") castable as xs:gDay)</entry>
<entry key="K-SeqExprCast-881">not(xs:time("03:20:00-05:00") castable as xs:gMonthDay)</entry>
<entry key="CastAs528">xs:gMonth("--05") cast as xs:string</entry>
<entry key="CastAs527">xs:gMonth("--05") cast as xs:untypedAtomic</entry>
<entry key="CastAs521">xs:gDay("---31Z") cast as xs:gDay</entry>
<entry key="CastAs520">xs:gDay("---03-05:00") cast as xs:gDay</entry>
<entry key="K-QuantExprWithout-89">every $a in (1, 2, 3), $b in ($a, 4) satisfies $b gt 0</entry>
<entry key="function-literal-159">exists(Q{http://www.w3.org/2005/xpath-functions}analyze-string#2)</entry>
<entry key="function-literal-158">Q{http://www.w3.org/2005/xpath-functions}tokenize#3('string', 'i', 'i')</entry>
<entry key="function-literal-157">exists(Q{http://www.w3.org/2005/xpath-functions}tokenize#3)</entry>
<entry key="function-literal-156">Q{http://www.w3.org/2005/xpath-functions}tokenize#2('string', 'i')</entry>
<entry key="function-literal-155">exists(Q{http://www.w3.org/2005/xpath-functions}tokenize#2)</entry>
<entry key="function-literal-154">Q{http://www.w3.org/2005/xpath-functions}replace#4('string', 'I', 'o', 'i')</entry>
<entry key="function-literal-153">exists(Q{http://www.w3.org/2005/xpath-functions}replace#4)</entry>
<entry key="K-SeqExprCast-879">not(xs:time("03:20:00-05:00") castable as xs:gYear)</entry>
<entry key="function-literal-152">Q{http://www.w3.org/2005/xpath-functions}replace#3('string', 'i', 'o')</entry>
<entry key="function-literal-151">exists(Q{http://www.w3.org/2005/xpath-functions}replace#3)</entry>
<entry key="K-SeqExprCast-877">not(xs:time("03:20:00-05:00") castable as xs:gYearMonth)</entry>
<entry key="function-literal-150">Q{http://www.w3.org/2005/xpath-functions}matches#3('string', 'STRING', 'i')</entry>
<entry key="K-SeqExprCast-875">not(xs:time("03:20:00-05:00") castable as xs:date)</entry>
<entry key="K-SeqExprCast-873">xs:time("03:20:00-05:00") castable as xs:time</entry>
<entry key="K-SeqExprCast-872">xs:time("03:20:00-05:00") cast as xs:time eq xs:time("03:20:00-05:00")</entry>
<entry key="K-SeqExprCast-871">not(xs:time("03:20:00-05:00") castable as xs:dateTime)</entry>
<entry key="CastAs519">xs:gDay("---31") cast as xs:gDay</entry>
<entry key="predicates-31">for $x in /works/employee[fn:position() mod 2 eq 1][fn:position() lt 5] return (fn:data($x/empnum), fn:data($x/pnum))</entry>
<entry key="function-literal-149">exists(Q{http://www.w3.org/2005/xpath-functions}matches#3)</entry>
<entry key="predicates-30">for $x in /works/employee[fn:position() lt 5][fn:position() mod 2 eq 1] return (fn:data($x/empnum), fn:data($x/pnum))</entry>
<entry key="function-literal-148">Q{http://www.w3.org/2005/xpath-functions}matches#2('string', 'string')</entry>
<entry key="function-literal-147">exists(Q{http://www.w3.org/2005/xpath-functions}matches#2)</entry>
<entry key="function-literal-146">Q{http://www.w3.org/2005/xpath-functions}substring-after#3('string', 'str', 'http://www.w3.org/2005/xpath-functions/collation/codepoint')</entry>
<entry key="function-literal-145">exists(Q{http://www.w3.org/2005/xpath-functions}substring-after#3)</entry>
<entry key="function-literal-144">Q{http://www.w3.org/2005/xpath-functions}substring-after#2('string', 'str')</entry>
<entry key="function-literal-143">exists(Q{http://www.w3.org/2005/xpath-functions}substring-after#2)</entry>
<entry key="K-SeqExprCast-869">not(xs:time("03:20:00-05:00") castable as xs:dayTimeDuration)</entry>
<entry key="function-literal-142">Q{http://www.w3.org/2005/xpath-functions}substring-before#3('string', 'ing', 'http://www.w3.org/2005/xpath-functions/collation/codepoint')</entry>
<entry key="function-literal-141">exists(Q{http://www.w3.org/2005/xpath-functions}substring-before#3)</entry>
<entry key="K-SeqExprCast-867">not(xs:time("03:20:00-05:00") castable as xs:yearMonthDuration)</entry>
<entry key="function-literal-140">Q{http://www.w3.org/2005/xpath-functions}substring-before#2('string', 'ing')</entry>
<entry key="K-SeqExprCast-865">not(xs:time("03:20:00-05:00") castable as xs:duration)</entry>
<entry key="K-SeqExprCast-863">not(xs:time("03:20:00-05:00") castable as xs:integer)</entry>
<entry key="K-SeqExprCast-861">not(xs:time("03:20:00-05:00") castable as xs:decimal)</entry>
<entry key="CastAs505">xs:gDay("---31") cast as xs:string</entry>
<entry key="predicates-28">(/works//hours[xs:integer(.) &gt;= 80])</entry>
<entry key="CastAs504">xs:gDay("---31") cast as xs:untypedAtomic</entry>
<entry key="predicates-27">(/works//hours[xs:integer(.) &gt; 79])</entry>
<entry key="predicates-24">(/works[1]//employee[empnum != "E1" and empnum != "E4"])</entry>
<entry key="K-SeqExprCast-1299">not(xs:base64Binary("aaaa") castable as xs:gDay)</entry>
<entry key="predicates-23">(/works//hours[xs:integer(.) = 12])</entry>
<entry key="predicates-22">(/works//hours[xs:integer(.) ge 80])</entry>
<entry key="K-SeqExprCast-1297">not(xs:base64Binary("aaaa") castable as xs:gMonthDay)</entry>
<entry key="predicates-21">(/works//hours[xs:integer(.) gt 79])</entry>
<entry key="function-literal-139">exists(Q{http://www.w3.org/2005/xpath-functions}substring-before#2)</entry>
<entry key="predicates-20">(/works//hours[xs:integer(.) le 12])</entry>
<entry key="function-literal-138">Q{http://www.w3.org/2005/xpath-functions}ends-with#3('string', 'str', 'http://www.w3.org/2005/xpath-functions/collation/codepoint')</entry>
<entry key="K-SeqExprCast-1295">not(xs:base64Binary("aaaa") castable as xs:gYear)</entry>
<entry key="function-literal-137">exists(Q{http://www.w3.org/2005/xpath-functions}ends-with#3)</entry>
<entry key="function-literal-136">Q{http://www.w3.org/2005/xpath-functions}ends-with#2('string', 'ing')</entry>
<entry key="K-SeqExprCast-1293">not(xs:base64Binary("aaaa") castable as xs:gYearMonth)</entry>
<entry key="function-literal-135">exists(Q{http://www.w3.org/2005/xpath-functions}ends-with#2)</entry>
<entry key="function-literal-134">Q{http://www.w3.org/2005/xpath-functions}starts-with#3('string', 'ing', 'http://www.w3.org/2005/xpath-functions/collation/codepoint')</entry>
<entry key="K-SeqExprCast-1291">not(xs:base64Binary("aaaa") castable as xs:date)</entry>
<entry key="function-literal-133">exists(Q{http://www.w3.org/2005/xpath-functions}starts-with#3)</entry>
<entry key="K-SeqExprCast-859">not(xs:time("03:20:00-05:00") castable as xs:double)</entry>
<entry key="function-literal-132">Q{http://www.w3.org/2005/xpath-functions}starts-with#2('string', 'str')</entry>
<entry key="function-literal-131">exists(Q{http://www.w3.org/2005/xpath-functions}starts-with#2)</entry>
<entry key="K-SeqExprCast-857">not(xs:time("03:20:00-05:00") castable as xs:float)</entry>
<entry key="function-literal-130">Q{http://www.w3.org/2005/xpath-functions}contains#3('string', 'RIN', 'http://www.w3.org/2005/xpath-functions/collation/codepoint')</entry>
<entry key="K-SeqExprCast-855">xs:time("03:20:00-05:00") castable as xs:string</entry>
<entry key="K-SeqExprCast-854">xs:time("03:20:00-05:00") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="K-SeqExprCast-853">xs:time("03:20:00-05:00") castable as xs:untypedAtomic</entry>
<entry key="K-SeqExprCast-852">xs:time("03:20:00-05:00") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="K-SeqExprCast-850">xs:time(xs:untypedAtomic( "03:20:00-05:00" )) eq xs:time("03:20:00-05:00")</entry>
<entry key="predicates-19">(/works//hours[xs:integer(.) lt 13])</entry>
<entry key="sequence-type-21">(fn:true(),fn:false()) instance of xs:boolean+</entry>
<entry key="predicates-18">(/works//day[xs:string(.) ne "Monday"])</entry>
<entry key="sequence-type-20">(fn:true(),fn:false()) instance of xs:boolean?</entry>
<entry key="predicates-17">(/works/employee[@name="Jane Doe 11"])</entry>
<entry key="predicates-14">(/root/date[xs:date(.) = xs:date("2000-01-01+05:00")])</entry>
<entry key="K-SeqExprCast-1289">not(xs:base64Binary("aaaa") castable as xs:time)</entry>
<entry key="K-QuantExprWithout-59">true() eq (every $xs:name in (1, 2) satisfies $xs:name)</entry>
<entry key="predicates-13">(/root/boolean[xs:boolean(.) = fn:true()])</entry>
<entry key="K-QuantExprWithout-58">true() eq (every $fn:name in (1, 2) satisfies $fn:name)</entry>
<entry key="predicates-12">(/root/double[xs:double(.) = 1267.43233E12])</entry>
<entry key="K-SeqExprCast-1287">not(xs:base64Binary("aaaa") castable as xs:dateTime)</entry>
<entry key="K-QuantExprWithout-57">true() eq (some $xs:name in (1, 2) satisfies $xs:name)</entry>
<entry key="predicates-11">(/root/float[xs:float(.) = xs:float(1267.43233E12)])</entry>
<entry key="function-literal-129">exists(Q{http://www.w3.org/2005/xpath-functions}contains#3)</entry>
<entry key="K-QuantExprWithout-56">true() eq (some $fn:name in (1, 2) satisfies $fn:name)</entry>
<entry key="predicates-10">(/root/decimal[xs:decimal(.) = 12678967.543233])</entry>
<entry key="function-literal-128">Q{http://www.w3.org/2005/xpath-functions}contains#2('string', 'rin')</entry>
<entry key="K-SeqExprCast-1285">not(xs:base64Binary("aaaa") castable as xs:dayTimeDuration)</entry>
<entry key="K-QuantExprWithout-55">true() eq (every $a in 1 satisfies $a)</entry>
<entry key="function-literal-127">exists(Q{http://www.w3.org/2005/xpath-functions}contains#2)</entry>
<entry key="K-QuantExprWithout-54">true() eq (some $a in 1 satisfies $a)</entry>
<entry key="function-literal-126">Q{http://www.w3.org/2005/xpath-functions}translate#3('string', 'i', 'o')</entry>
<entry key="K-SeqExprCast-1283">not(xs:base64Binary("aaaa") castable as xs:yearMonthDuration)</entry>
<entry key="K-QuantExprWithout-53">some $var in (1, 2, 3) satisfies $var eq 3</entry>
<entry key="function-literal-125">exists(Q{http://www.w3.org/2005/xpath-functions}translate#3)</entry>
<entry key="K-QuantExprWithout-52">not(every $var in (1, 2, 3) satisfies $var eq 3)</entry>
<entry key="function-literal-124">Q{http://www.w3.org/2005/xpath-functions}lower-case#1('STRING')</entry>
<entry key="K-SeqExprCast-1281">not(xs:base64Binary("aaaa") castable as xs:duration)</entry>
<entry key="K-QuantExprWithout-51">every $aaa in (3, 3, 3), $bbb in (3, 3, 3) satisfies $aaa + $bbb eq 6</entry>
<entry key="function-literal-123">exists(Q{http://www.w3.org/2005/xpath-functions}lower-case#1)</entry>
<entry key="K-QuantExprWithout-50">some $aaa in (1, 2, 3), $bbb in (3, 2, 1) satisfies $aaa + $bbb eq 4</entry>
<entry key="function-literal-122">Q{http://www.w3.org/2005/xpath-functions}upper-case#1('string')</entry>
<entry key="K-SeqExprCast-848">xs:time(" 03:20:00-05:00 ") eq xs:time(" 03:20:00-05:00 ")</entry>
<entry key="function-literal-121">exists(Q{http://www.w3.org/2005/xpath-functions}upper-case#1)</entry>
<entry key="K-SeqExprCast-847">subsequence(("dummy", 1.1, xs:time("03:20:00-05:00")), 3, 1) instance of xs:time</entry>
<entry key="function-literal-120">Q{http://www.w3.org/2005/xpath-functions}normalize-unicode#2('string', 'NFC')</entry>
<entry key="Axes059-2">fn:count(/descendant-or-self::*)</entry>
<entry key="K-SeqExprCast-843">not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:QName)</entry>
<entry key="Axes059-1">fn:count(/descendant-or-self::*)</entry>
<entry key="K-SeqExprCast-841">not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:anyURI)</entry>
<entry key="sequence-type-19">(fn:true(),fn:false()) instance of xs:boolean*</entry>
<entry key="ancestorself-9">exactly-one(/works/employee[1]/ancestor-or-self::works) &gt;&gt; exactly-one(/works/employee[1]/ancestor-or-self::works)</entry>
<entry key="sequence-type-18">("abc","def") castable as xs:integer?</entry>
<entry key="ancestorself-8">exactly-one(/works/employee[1]) &gt;&gt; exactly-one(/works/employee[1]/ancestor-or-self::works)</entry>
<entry key="sequence-type-17">("abc") castable as xs:integer?</entry>
<entry key="ancestorself-7">exactly-one(/works/employee[1]/ancestor-or-self::works) &lt;&lt; exactly-one(/works/employee[1])</entry>
<entry key="sequence-type-16">("abc","def") castable as xs:string?</entry>
<entry key="ancestorself-6">exactly-one(/works/employee[1]/ancestor-or-self::works) &lt;&lt; exactly-one(/works/employee[1]/ancestor-or-self::works)</entry>
<entry key="sequence-type-15">("abc") castable as xs:string?</entry>
<entry key="ancestorself-5">exactly-one(/works/employee[1]/ancestor-or-self::works) &lt;&lt; exactly-one(/works/employee[1])</entry>
<entry key="sequence-type-14">(1.2,2.1) castable as xs:decimal?</entry>
<entry key="ancestorself-4">exactly-one(/works/employee[1]/ancestor-or-self::works) is exactly-one(/works/employee[1])</entry>
<entry key="sequence-type-13">(1.2) castable as xs:decimal?</entry>
<entry key="ancestorself-3">exactly-one(/works/employee[1]/ancestor-or-self::works) is exactly-one(/works)</entry>
<entry key="sequence-type-12">(1E3,2E3) castable as xs:double?</entry>
<entry key="ancestorself-2">fn:count(/works/employee[1]/ancestor-or-self::noSuchNode)</entry>
<entry key="sequence-type-11">(1E3) castable as xs:double?</entry>
<entry key="sequence-type-10">(1,2) castable as xs:integer?</entry>
<entry key="K-SeqExprCast-1279">not(xs:base64Binary("aaaa") castable as xs:integer)</entry>
<entry key="K-QuantExprWithout-49">some $var in (1, 2, 3) satisfies $var eq 1 or $var eq 2 or $var eq 3</entry>
<entry key="K-QuantExprWithout-48">every $var in (1, 2, 3) satisfies $var eq 1 or $var eq 2 or $var eq 3</entry>
<entry key="K-SeqExprCast-1277">not(xs:base64Binary("aaaa") castable as xs:decimal)</entry>
<entry key="K-QuantExprWithout-47">not(every $var in (1, 2, 3) satisfies $var eq 3)</entry>
<entry key="function-literal-119">exists(Q{http://www.w3.org/2005/xpath-functions}normalize-unicode#2)</entry>
<entry key="K-QuantExprWithout-46">some $var in (1, 2, 3) satisfies $var eq 3</entry>
<entry key="function-literal-118">Q{http://www.w3.org/2005/xpath-functions}normalize-unicode#1('string')</entry>
<entry key="K-SeqExprCast-1275">not(xs:base64Binary("aaaa") castable as xs:double)</entry>
<entry key="function-literal-117">exists(Q{http://www.w3.org/2005/xpath-functions}normalize-unicode#1)</entry>
<entry key="function-literal-116">Q{http://www.w3.org/2005/xpath-functions}normalize-space#1(' string ')</entry>
<entry key="K-SeqExprCast-1273">not(xs:base64Binary("aaaa") castable as xs:float)</entry>
<entry key="function-literal-115">exists(Q{http://www.w3.org/2005/xpath-functions}normalize-space#1)</entry>
<entry key="function-literal-114">/root/child/Q{http://www.w3.org/2005/xpath-functions}normalize-space#0()</entry>
<entry key="cbcl-castable-short-004">"-32769" castable as xs:short</entry>
<entry key="K-SeqExprCast-1271">xs:base64Binary("aaaa") castable as xs:string</entry>
<entry key="K-QuantExprWithout-41">not(some $var in (false(), false(), false()) satisfies $var)</entry>
<entry key="function-literal-113">exists(Q{http://www.w3.org/2005/xpath-functions}normalize-space#0)</entry>
<entry key="cbcl-castable-short-003">"32769" castable as xs:short</entry>
<entry key="K-SeqExprCast-1270">xs:base64Binary("aaaa") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="K-SeqExprCast-839">not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:hexBinary)</entry>
<entry key="K-QuantExprWithout-40">some $var in (true(), true(), false()) satisfies $var</entry>
<entry key="function-literal-112">Q{http://www.w3.org/2005/xpath-functions}string-length#1('string')</entry>
<entry key="cbcl-castable-short-002">-32769 castable as xs:short</entry>
<entry key="function-literal-111">exists(Q{http://www.w3.org/2005/xpath-functions}string-length#1)</entry>
<entry key="cbcl-castable-short-001">32768 castable as xs:short</entry>
<entry key="K-SeqExprCast-837">not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:base64Binary)</entry>
<entry key="function-literal-110">/root/child/Q{http://www.w3.org/2005/xpath-functions}string-length#0()</entry>
<entry key="K-SeqExprCast-835">not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:boolean)</entry>
<entry key="K-SeqExprCast-833">xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:gMonth</entry>
<entry key="K-SeqExprCast-832">xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:gMonth ne xs:gMonth("--11")</entry>
<entry key="K-SeqExprCast-831">xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:gDay</entry>
<entry key="K-SeqExprCast-830">xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:gDay ne xs:gDay("---03")</entry>
<entry key="Axes048-2">fn:count(/far-north)</entry>
<entry key="Axes048-1">fn:count(/far-north)</entry>
<entry key="K-SeqExprCast-1269">xs:base64Binary("aaaa") castable as xs:untypedAtomic</entry>
<entry key="K-QuantExprWithout-39">some $var in (false(), true(), true()) satisfies $var</entry>
<entry key="K-SeqExprCast-1268">xs:base64Binary("aaaa") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="K-QuantExprWithout-38">some $var in (true(), false(), true()) satisfies $var</entry>
<entry key="K-QuantExprWithout-37">some $var in (true(), true(), true()) satisfies $var</entry>
<entry key="function-literal-109">exists(Q{http://www.w3.org/2005/xpath-functions}string-length#0)</entry>
<entry key="K-SeqExprCast-1266">xs:base64Binary(xs:untypedAtomic( "aaaa" )) eq xs:base64Binary("aaaa")</entry>
<entry key="K-QuantExprWithout-36">not(every $var in (true(), true(), false()) satisfies $var)</entry>
<entry key="function-literal-108">Q{http://www.w3.org/2005/xpath-functions}substring#3('string', 1e0, 1e0)</entry>
<entry key="K-SeqExprCast-1265">xs:base64Binary("") eq xs:base64Binary("")</entry>
<entry key="K-QuantExprWithout-35">not(every $var in (true(), false(), true()) satisfies $var)</entry>
<entry key="function-literal-107">exists(Q{http://www.w3.org/2005/xpath-functions}substring#3)</entry>
<entry key="K-SeqExprCast-1264">xs:base64Binary(" aaaa ") eq xs:base64Binary(" aaaa ")</entry>
<entry key="K-QuantExprWithout-34">not(every $var in (false(), true(), true()) satisfies $var)</entry>
<entry key="function-literal-106">Q{http://www.w3.org/2005/xpath-functions}substring#2('string', 2e0)</entry>
<entry key="K-SeqExprCast-1263">subsequence(("dummy", 1.1, xs:base64Binary("aaaa")), 3, 1) instance of xs:base64Binary</entry>
<entry key="function-literal-105">exists(Q{http://www.w3.org/2005/xpath-functions}substring#2)</entry>
<entry key="function-literal-104">Q{http://www.w3.org/2005/xpath-functions}string-join#2(('abc', 'def'), '-')</entry>
<entry key="function-literal-103">exists(Q{http://www.w3.org/2005/xpath-functions}string-join#2)</entry>
<entry key="K-SeqExprCast-829">xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:gMonthDay</entry>
<entry key="function-literal-102">Q{http://www.w3.org/2005/xpath-functions}string-join#1(('abc', 'def'))</entry>
<entry key="K-SeqExprCast-828">xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:gMonthDay ne xs:gMonthDay("--11-13")</entry>
<entry key="function-literal-101">exists(Q{http://www.w3.org/2005/xpath-functions}string-join#1)</entry>
<entry key="K-SeqExprCast-827">xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:gYear</entry>
<entry key="function-literal-100">Q{http://www.w3.org/2005/xpath-functions}concat#3('a', 'bc', 'def')</entry>
<entry key="K-SeqExprCast-826">xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:gYear ne xs:gYear("1999")</entry>
<entry key="K-SeqExprCast-825">xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:gYearMonth</entry>
<entry key="CastableAs599">xs:base64Binary("10010101") castable as xs:hexBinary</entry>
<entry key="K-SeqExprCast-824">xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:gYearMonth ne xs:gYearMonth("1999-11")</entry>
<entry key="CastableAs598">xs:base64Binary("00000000") castable as xs:hexBinary</entry>
<entry key="K-SeqExprCast-823">xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:date</entry>
<entry key="CastableAs597">xs:base64Binary("0FB7") castable as xs:base64Binary</entry>
<entry key="K-SeqExprCast-822">xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:date ne xs:date("2004-10-13")</entry>
<entry key="CastableAs596">xs:base64Binary("01001010") castable as xs:base64Binary</entry>
<entry key="K-SeqExprCast-821">xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:time</entry>
<entry key="CastableAs595">xs:base64Binary("10010101") castable as xs:boolean</entry>
<entry key="K-SeqExprCast-820">xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:time ne xs:time("03:20:00-05:00")</entry>
<entry key="CastableAs594">xs:base64Binary("10010101") castable as xs:gMonth</entry>
<entry key="abbreviatedSyntax-25">for $h in (/works) return $h/employee[@name = "Jane Doe 13" or @type="FT"]/@name</entry>
<entry key="CastableAs593">xs:base64Binary("10010101") castable as xs:gDay</entry>
<entry key="abbreviatedSyntax-24">for $h in (/works) return $h/employee/(status union overtime)/day/string()</entry>
<entry key="CastableAs592">xs:base64Binary("10010101") castable as xs:gMonthDay</entry>
<entry key="CastableAs591">xs:base64Binary("10010101") castable as xs:gYear</entry>
<entry key="abbreviatedSyntax-22">for $h in (/works) return $h/employee/(status|overtime)/day/string()</entry>
<entry key="CastableAs590">xs:base64Binary("10010101") castable as xs:gYearMonth</entry>
<entry key="abbreviatedSyntax-21">for $h in (/works) return $h/employee[@name and @type]/@name</entry>
<entry key="abbreviatedSyntax-20">for $h in (/works) return $h/employee[overtime]/@name</entry>
<entry key="cbcl-castable-integer-004">xs:float('-3.402823e38') castable as xs:integer</entry>
<entry key="Axes037-2">fn:count(//center/descendant-or-self::node())</entry>
<entry key="cbcl-castable-integer-003">xs:float('3.402823e38') castable as xs:integer</entry>
<entry key="Axes037-1">fn:count(//center/descendant-or-self::node())</entry>
<entry key="cbcl-castable-integer-002">-1.7976931348623157E+308 castable as xs:integer</entry>
<entry key="cbcl-castable-integer-001">1.7976931348623157E+308 castable as xs:integer</entry>
<entry key="K-SeqExprCast-1259">not(xs:boolean("true") castable as xs:QName)</entry>
<entry key="K-SeqExprCast-1257">not(xs:boolean("true") castable as xs:anyURI)</entry>
<entry key="K-QuantExprWithout-27">not(some $var in (false(), false(), false()) satisfies $var)</entry>
<entry key="K-QuantExprWithout-26">some $var in (true(), true(), false()) satisfies $var</entry>
<entry key="K-SeqExprCast-1255">not(xs:boolean("true") castable as xs:hexBinary)</entry>
<entry key="K-QuantExprWithout-25">some $var in (false(), true(), true()) satisfies $var</entry>
<entry key="K-QuantExprWithout-24">some $var in (true(), false(), true()) satisfies $var</entry>
<entry key="K-SeqExprCast-1253">not(xs:boolean("true") castable as xs:base64Binary)</entry>
<entry key="K-QuantExprWithout-23">some $var in (true(), true(), true()) satisfies $var</entry>
<entry key="K-QuantExprWithout-22">not(every $var in (true(), true(), false()) satisfies $var)</entry>
<entry key="K-SeqExprCast-1251">xs:boolean("true") castable as xs:boolean</entry>
<entry key="K-QuantExprWithout-21">not(every $var in (false(), true(), true()) satisfies $var)</entry>
<entry key="K-SeqExprCast-1250">xs:boolean("true") cast as xs:boolean eq xs:boolean("true")</entry>
<entry key="K-SeqExprCast-819">xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:dateTime</entry>
<entry key="K-QuantExprWithout-20">not(every $var in (true(), false(), true()) satisfies $var)</entry>
<entry key="K-SeqExprCast-818">xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:dateTime eq xs:dateTime("2002-10-10T12:00:00-05:00")</entry>
<entry key="K-SeqExprCast-817">not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:dayTimeDuration)</entry>
<entry key="K-SeqExprCast-815">not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:yearMonthDuration)</entry>
<entry key="CastableAs589">xs:base64Binary("10010101") castable as xs:date</entry>
<entry key="CastableAs588">xs:base64Binary("10010101") castable as xs:time</entry>
<entry key="K-SeqExprCast-813">not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:duration)</entry>
<entry key="abbreviatedSyntax-19">for $h in (/works) return $h/employee[status="active"]/@name</entry>
<entry key="CastableAs587">xs:base64Binary("10010101") castable as xs:dateTime</entry>
<entry key="abbreviatedSyntax-18">for $h in (/works) return $h/employee[5][@gender="female"]/@name</entry>
<entry key="CastableAs586">xs:base64Binary("10010101") castable as xs:dayTimeDuration</entry>
<entry key="K-SeqExprCast-811">not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:integer)</entry>
<entry key="abbreviatedSyntax-17">for $h in (/works) return $h/employee[@gender="female"][5]/@name</entry>
<entry key="CastableAs585">xs:base64Binary("10010101") castable as xs:yearMonthDuration</entry>
<entry key="abbreviatedSyntax-16">for $h in (/works) return $h/employee[@name="Jane Doe 11"]/@name</entry>
<entry key="CastableAs584">xs:base64Binary("10010101") castable as xs:duration</entry>
<entry key="CastableAs583">xs:base64Binary("10010101") castable as xs:integer</entry>
<entry key="abbreviatedSyntax-14">for $h in (/works/employee[12]/overtime) return $h/../@name</entry>
<entry key="CastableAs582">xs:base64Binary("10010101") castable as xs:decimal</entry>
<entry key="abbreviatedSyntax-13">for $h in (/works) return $h/.//day/string()</entry>
<entry key="CastableAs581">xs:base64Binary("10010101") castable as xs:double</entry>
<entry key="abbreviatedSyntax-12">for $h in (/works) return $h//overtime/day/string()</entry>
<entry key="CastableAs580">xs:base64Binary("10010101") castable as xs:float</entry>
<entry key="abbreviatedSyntax-10">for $h in (/works) return $h//hours/string()</entry>
<entry key="K-SeqExprCast-1249">not(xs:boolean("true") castable as xs:gMonth)</entry>
<entry key="K-QuantExprWithout-19">every $var in (true(), true(), true()) satisfies $var</entry>
<entry key="K-QuantExprWithout-18">every $foo in 1 satisfies "a string"</entry>
<entry key="K-SeqExprCast-1247">not(xs:boolean("true") castable as xs:gDay)</entry>
<entry key="K-QuantExprWithout-17">some $foo in 1 satisfies "a string"</entry>
<entry key="K-QuantExprWithout-16">every $foo in 1 satisfies 1</entry>
<entry key="K-SeqExprCast-1245">not(xs:boolean("true") castable as xs:gMonthDay)</entry>
<entry key="K-QuantExprWithout-15">some $foo in 1 satisfies 1</entry>
<entry key="K-QuantExprWithout-14">not(every $foo in 1 satisfies false())</entry>
<entry key="K-SeqExprCast-1243">not(xs:boolean("true") castable as xs:gYear)</entry>
<entry key="K-QuantExprWithout-13">not(some $foo in 1 satisfies false())</entry>
<entry key="K-QuantExprWithout-12">every $foo in 1 satisfies true()</entry>
<entry key="K-SeqExprCast-1241">not(xs:boolean("true") castable as xs:gYearMonth)</entry>
<entry key="K-QuantExprWithout-11">some $foo in 1 satisfies true()</entry>
<entry key="K-SeqExprCast-809">not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:decimal)</entry>
<entry key="K-QuantExprWithout-10">not(some $i in () satisfies $i)</entry>
<entry key="K-SeqExprCast-807">not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:double)</entry>
<entry key="K-SeqExprCast-805">not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:float)</entry>
<entry key="CastableAs579">xs:base64Binary("0FB7") castable as xs:string</entry>
<entry key="CastableAs578">xs:base64Binary("01001010") castable as xs:string</entry>
<entry key="K-SeqExprCast-803">xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:string</entry>
<entry key="CastableAs577">xs:base64Binary("0FB7") castable as xs:untypedAtomic</entry>
<entry key="K-SeqExprCast-802">xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="CastableAs576">xs:base64Binary("01001010") castable as xs:untypedAtomic</entry>
<entry key="K-SeqExprCast-801">xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:untypedAtomic</entry>
<entry key="CastableAs575">xs:boolean("true") castable as xs:anyURI</entry>
<entry key="K-SeqExprCast-800">xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="CastableAs574">xs:boolean("true") castable as xs:hexBinary</entry>
<entry key="CastableAs573">xs:boolean("true") castable as xs:base64Binary</entry>
<entry key="CastableAs572">xs:boolean("false") castable as xs:boolean</entry>
<entry key="CastableAs571">xs:boolean("true") castable as xs:boolean</entry>
<entry key="CastableAs570">xs:boolean("true") castable as xs:gMonth</entry>
<entry key="K-SeqExprCast-1239">not(xs:boolean("true") castable as xs:date)</entry>
<entry key="K-SeqExprCast-1237">not(xs:boolean("true") castable as xs:time)</entry>
<entry key="K-SeqExprCast-1235">not(xs:boolean("true") castable as xs:dateTime)</entry>
<entry key="K-SeqExprCast-1233">not(xs:boolean("true") castable as xs:dayTimeDuration)</entry>
<entry key="K-Literals-47a">"t" eq "&amp;#x74;"</entry>
<entry key="K-SeqExprCast-1231">not(xs:boolean("true") castable as xs:yearMonthDuration)</entry>
<entry key="Axes015-1">fn:count(//center/parent::near-north)</entry>
<entry key="CastableAs569">xs:boolean("true") castable as xs:gDay</entry>
<entry key="CastableAs568">xs:boolean("true") castable as xs:gMonthDay</entry>
<entry key="CastableAs567">xs:boolean("true") castable as xs:gYear</entry>
<entry key="CastableAs566">xs:boolean("true") castable as xs:gYearMonth</entry>
<entry key="CastableAs565">xs:boolean("true") castable as xs:date</entry>
<entry key="CastableAs564">xs:boolean("true") castable as xs:time</entry>
<entry key="CastableAs563">xs:boolean("true") castable as xs:dateTime</entry>
<entry key="CastableAs562">xs:boolean("true") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs561">xs:boolean("true") castable as xs:yearMonthDuration</entry>
<entry key="CastableAs560">xs:boolean("true") castable as xs:duration</entry>
<entry key="K2-LetExprWithout-25">let $a := 1 return 
                for $b in 1 return 
                    if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else if ($b) then 1 
                            else ()</entry>
<entry key="K-SeqExprCast-1229">not(xs:boolean("true") castable as xs:duration)</entry>
<entry key="K-SeqExprCast-1227">xs:boolean("true") castable as xs:integer</entry>
<entry key="K-SeqExprCast-1226">xs:boolean("true") cast as xs:integer ne xs:integer("6789")</entry>
<entry key="K-SeqExprCast-1225">xs:boolean("true") castable as xs:decimal</entry>
<entry key="K-SeqExprCast-1224">xs:boolean("true") cast as xs:decimal ne xs:decimal("10.01")</entry>
<entry key="K-SeqExprCast-1223">xs:boolean("true") castable as xs:double</entry>
<entry key="K-SeqExprCast-1222">xs:boolean("true") cast as xs:double ne xs:double("3.3e3")</entry>
<entry key="K-SeqExprCast-1221">xs:boolean("true") castable as xs:float</entry>
<entry key="K-SeqExprCast-1220">xs:boolean("true") cast as xs:float ne xs:float("3.4e5")</entry>
<entry key="Axes004-3">fn:count(//center/*)</entry>
<entry key="Axes004-2">fn:count(//center/*)</entry>
<entry key="CastableAs559">xs:boolean("false") castable as xs:integer</entry>
<entry key="Axes004-1">fn:count(//center/*)</entry>
<entry key="CastableAs558">xs:boolean("true") castable as xs:integer</entry>
<entry key="CastableAs557">xs:boolean("false") castable as xs:decimal</entry>
<entry key="CastableAs556">xs:boolean("true") castable as xs:decimal</entry>
<entry key="CastableAs555">xs:boolean("false") castable as xs:double</entry>
<entry key="cast-derived-21">let $value := xs:double(10E2) return $value cast as xs:short</entry>
<entry key="CastableAs554">xs:boolean("true") castable as xs:double</entry>
<entry key="cast-derived-20">let $value := xs:double(10E2) return $value cast as xs:unsignedLong</entry>
<entry key="CastableAs553">xs:boolean("false") castable as xs:float</entry>
<entry key="CastableAs552">xs:boolean("true") castable as xs:float</entry>
<entry key="CastableAs551">xs:boolean("true") castable as xs:string</entry>
<entry key="CastableAs550">xs:boolean("true") castable as xs:untypedAtomic</entry>
<entry key="K-SeqExprCast-1219">xs:boolean("true") castable as xs:string</entry>
<entry key="K-SeqExprCast-1218">xs:boolean("true") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="K-SeqExprCast-1217">xs:boolean("true") castable as xs:untypedAtomic</entry>
<entry key="K-SeqExprCast-1216">xs:boolean("true") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="K-SeqExprCast-1215">boolean(xs:boolean("true"))</entry>
<entry key="K-SeqExprCast-1214">xs:boolean(xs:untypedAtomic( "true" )) eq xs:boolean("true")</entry>
<entry key="K-SeqExprCast-1212">xs:boolean(" true ") eq xs:boolean(" true ")</entry>
<entry key="K-SeqExprCast-1211">subsequence(("dummy", 1.1, xs:boolean("true")), 3, 1) instance of xs:boolean</entry>
<entry key="cast-derived-19">let $value := xs:double(10E2) return $value cast as xs:int</entry>
<entry key="cast-derived-18">let $value := xs:double(10E2) return $value cast as xs:long</entry>
<entry key="cast-derived-17">let $value := xs:double(10E2) return $value cast as xs:positiveInteger</entry>
<entry key="cast-derived-16">let $value := xs:double(10E2) return $value cast as xs:integer</entry>
<entry key="CastableAs549">xs:gMonth("--05") castable as xs:anyURI</entry>
<entry key="cast-derived-15">let $value := xs:double(10E2) return $value cast as xs:decimal</entry>
<entry key="CastableAs548">xs:gMonth("--05") castable as xs:hexBinary</entry>
<entry key="cast-derived-14">let $value := xs:float(10.0) return $value cast as xs:byte</entry>
<entry key="CastableAs547">xs:gMonth("--05") castable as xs:base64Binary</entry>
<entry key="cast-derived-13">let $value := xs:float(10.0) return $value cast as xs:unsignedByte</entry>
<entry key="CastableAs546">xs:gMonth("--05") castable as xs:boolean</entry>
<entry key="cast-derived-12">let $value := xs:float(10.0) return $value cast as xs:unsignedShort</entry>
<entry key="CastableAs545">xs:gMonth("--05Z") castable as xs:gMonth</entry>
<entry key="cast-derived-11">let $value := xs:float(10.0) return $value cast as xs:unsignedInt</entry>
<entry key="CastableAs544">xs:gMonth("--12-05:00") castable as xs:gMonth</entry>
<entry key="cast-derived-10">let $value := xs:float(10.0) return $value cast as xs:short</entry>
<entry key="CastableAs543">xs:gMonth("--05") castable as xs:gMonth</entry>
<entry key="CastableAs542">xs:gMonth("--05") castable as xs:gDay</entry>
<entry key="CastableAs541">xs:gMonth("--05") castable as xs:gMonthDay</entry>
<entry key="CastableAs540">xs:gMonth("--05") castable as xs:gYear</entry>
<entry key="cbcl-cast-nonNegativeInteger-003">xs:nonNegativeInteger("-00")</entry>
<entry key="K-SeqExprCast-1207">not(xs:gMonth("--11") castable as xs:QName)</entry>
<entry key="K-SeqExprCast-1205">not(xs:gMonth("--11") castable as xs:anyURI)</entry>
<entry key="K-SeqExprCast-1203">not(xs:gMonth("--11") castable as xs:hexBinary)</entry>
<entry key="K-SeqExprCast-1201">not(xs:gMonth("--11") castable as xs:base64Binary)</entry>
<entry key="CastableAs539">xs:gMonth("--05") castable as xs:gYearMonth</entry>
<entry key="CastableAs538">xs:gMonth("--05") castable as xs:date</entry>
<entry key="CastableAs537">xs:gMonth("--05") castable as xs:time</entry>
<entry key="CastableAs536">xs:gMonth("--05") castable as xs:dateTime</entry>
<entry key="CastableAs535">xs:gMonth("--05") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs534">xs:gMonth("--05") castable as xs:yearMonthDuration</entry>
<entry key="CastableAs533">xs:gMonth("--05") castable as xs:duration</entry>
<entry key="CastableAs532">xs:gMonth("--05") castable as xs:integer</entry>
<entry key="CastableAs531">xs:gMonth("--05") castable as xs:decimal</entry>
<entry key="CastableAs530">xs:gMonth("--05") castable as xs:double</entry>
<entry key="K2-SeqExprCast-504">xs:NCName(codepoints-to-string((3648, 3592, 3617, 3626, 3660)))</entry>
<entry key="preceding-sibling-20">fn:deep-equal(/works[1]/employee[12]/preceding-sibling::employee,/works[1]/employee[12]/preceding-sibling::employee)</entry>
<entry key="CastableAs529">xs:gMonth("--05") castable as xs:float</entry>
<entry key="CastableAs528">xs:gMonth("--05") castable as xs:string</entry>
<entry key="CastableAs527">xs:gMonth("--05") castable as xs:untypedAtomic</entry>
<entry key="CastableAs526">xs:gDay("---31") castable as xs:anyURI</entry>
<entry key="CastableAs525">xs:gDay("---31") castable as xs:hexBinary</entry>
<entry key="CastableAs524">xs:gDay("---31") castable as xs:base64Binary</entry>
<entry key="CastableAs523">xs:gDay("---31") castable as xs:boolean</entry>
<entry key="CastableAs522">xs:gDay("---31") castable as xs:gMonth</entry>
<entry key="GenCompEq-5">xs:untypedAtomic("P1999Y10M") = xs:yearMonthDuration("P1999Y10M")</entry>
<entry key="CastableAs521">xs:gDay("---31Z") castable as xs:gDay</entry>
<entry key="CastableAs520">xs:gDay("---03-05:00") castable as xs:gDay</entry>
<entry key="GenCompEq-3">xs:dayTimeDuration("P3DT08H34M12.143S") = xs:untypedAtomic("P3DT08H34M12.143S")</entry>
<entry key="GenCompEq-2">xs:untypedAtomic("1") = xs:NCName("string")</entry>
<entry key="GenCompEq-1">xs:untypedAtomic("a string") = xs:untypedAtomic("a stringDIFF")</entry>
<entry key="quantexpr-59">every $x in ("1980-05-05T13:13:13Z", "1980-05-05T13:13:13Z"), $y in ("1980-05-05T13:13:13Z","1980-05-05T13:13:13Z") satisfies xs:dateTime($x) = xs:dateTime($y)</entry>
<entry key="preceding-sibling-19">(/works[1]/employee[12]/preceding-sibling::employee) or fn:false()</entry>
<entry key="quantexpr-58">every $x in ("true", "false"), $y in ("false","true") satisfies xs:boolean($x) = xs:boolean($y)</entry>
<entry key="preceding-sibling-18">(/works[1]/employee[12]/preceding-sibling::employee) or fn:true()</entry>
<entry key="quantexpr-57">every $x in (1,2,3), $y in (4,5,6) satisfies xs:double($x) = xs:double($y)</entry>
<entry key="preceding-sibling-17">(/works[1]/employee[12]/preceding-sibling::employee) and fn:false()</entry>
<entry key="quantexpr-56">every $x in (1,2,3), $y in (4,5,6) satisfies xs:float($x) = xs:float($y)</entry>
<entry key="preceding-sibling-16">(/works[1]/employee[12]/preceding-sibling::employee) and fn:true()</entry>
<entry key="quantexpr-55">every $x in (1,2,3), $y in (4,5,6) satisfies xs:decimal($x) = xs:decimal($y)</entry>
<entry key="preceding-sibling-15">(/works[1]/employee[12]/overtime/day) except (/works[1]/employee[12]/overtime/day[2]/preceding-sibling::day)</entry>
<entry key="quantexpr-54">every $x in (1,2,3), $y in (4,5,6) satisfies xs:integer($x) = xs:integer($y)</entry>
<entry key="preceding-sibling-14">fn:count((/works[1]/employee[12]/preceding-sibling::employee) except (/works[1]/employee[12]/preceding-sibling::employee))</entry>
<entry key="quantexpr-53">every $x in (1,2,3), $y in (4,5,6) satisfies fn:string($x) = fn:string($y)</entry>
<entry key="preceding-sibling-13">(/works[1]/employee[12]/overtime[1]/day[2]/preceding-sibling::day) intersect (/works[1]/employee[12]/overtime[1]/day[2]/preceding-sibling::day)</entry>
<entry key="quantexpr-52">every $x in (1,2,3), $y in (4,5,6) satisfies $x idiv $y = 2</entry>
<entry key="preceding-sibling-12">(/works/employee[12]/*/day[2]/preceding-sibling::day) | (/works/employee[12]/*/day[2])</entry>
<entry key="quantexpr-51">every $x in (1,2,3), $y in (4,5,6) satisfies $x div $y = 2</entry>
<entry key="preceding-sibling-11">(/works/employee[12]/*/day[2]/preceding-sibling::day) | (/works/employee[12]/*/day[2]/preceding-sibling::day)</entry>
<entry key="quantexpr-50">every $x in (1,2,3), $y in (4,5,6) satisfies $x * $y = 10</entry>
<entry key="preceding-sibling-10">exactly-one(/works[1]/employee[13]) &gt;&gt; exactly-one(/works[1]/employee[2]/preceding-sibling::employee)</entry>
<entry key="followingsibling-20">fn:deep-equal(/works[1]/employee[12]/following-sibling::employee,/works[1]/employee[12]/following-sibling::employee)</entry>
<entry key="CastableAs519">xs:gDay("---31") castable as xs:gDay</entry>
<entry key="CastableAs518">xs:gDay("---31") castable as xs:gMonthDay</entry>
<entry key="CastableAs517">xs:gDay("---31") castable as xs:gYear</entry>
<entry key="CastableAs516">xs:gDay("---31") castable as xs:gYearMonth</entry>
<entry key="CastableAs515">xs:gDay("---31") castable as xs:date</entry>
<entry key="CastableAs514">xs:gDay("---31") castable as xs:time</entry>
<entry key="CastableAs513">xs:gDay("---31") castable as xs:dateTime</entry>
<entry key="CastableAs512">xs:gDay("---31") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs511">xs:gDay("---31") castable as xs:yearMonthDuration</entry>
<entry key="CastableAs510">xs:gDay("---31") castable as xs:duration</entry>
<entry key="quantexpr-49">every $x in (1,2,3), $y in (4,5,6) satisfies $x - $y = 5</entry>
<entry key="quantexpr-48">every $x in (1,2,3), $y in (4,5,6) satisfies $x + $y = 5</entry>
<entry key="quantexpr-47">every $x in ("A","B","C") satisfies $x = "A"</entry>
<entry key="cbcl-cast-unsignedInt-005">xs:unsignedInt("-00")</entry>
<entry key="quantexpr-46">every $x in (1, 2) satisfies $x = 1 and ($x +1) = 2</entry>
<entry key="quantexpr-45">every $x in (1, 2) satisfies $x = 1 or $x = 2</entry>
<entry key="quantexpr-44">every $x in (1, 2) satisfies fn:not($x)</entry>
<entry key="followingsibling-19">(/works[1]/employee[12]/following-sibling::employee) or fn:false()</entry>
<entry key="quantexpr-43">some $x in (1, 2) satisfies fn:false()</entry>
<entry key="followingsibling-18">(/works[1]/employee[12]/following-sibling::employee) or fn:true()</entry>
<entry key="quantexpr-42">every $x in (1, 2) satisfies fn:true()</entry>
<entry key="followingsibling-17">(/works[1]/employee[12]/following-sibling::employee) and fn:false()</entry>
<entry key="quantexpr-41">every $x in (1, 2) satisfies fn:count(($x)) = 1</entry>
<entry key="followingsibling-16">(/works[1]/employee[12]/following-sibling::employee) and fn:true()</entry>
<entry key="quantexpr-40">every $x in (1, 2) satisfies fn:string-length(xs:string($x)) = 1</entry>
<entry key="followingsibling-15">(/works[1]/employee[12]/overtime/day) except (/works[1]/employee[12]/overtime/day[1]/following-sibling::day)</entry>
<entry key="followingsibling-14">fn:count((/works[1]/employee[12]/following-sibling::employee) except (/works[1]/employee[12]/following-sibling::employee))</entry>
<entry key="followingsibling-13">(/works[1]/employee[12]/overtime[1]/day[1]/following-sibling::day) intersect (/works[1]/employee[12]/overtime[1]/day[1]/following-sibling::day)</entry>
<entry key="followingsibling-12">(/works/employee[12]/*/day[1]/following-sibling::day) | (/works/employee[12]/*/day[1])</entry>
<entry key="followingsibling-11">(/works/employee[12]/*/day[1]/following-sibling::day) | (/works/employee[12]/*/day[1]/following-sibling::day)</entry>
<entry key="followingsibling-10">exactly-one(/works[1]/employee[12]) &gt;&gt; exactly-one(/works[1]/employee[12]/following-sibling::employee)</entry>
<entry key="CastableAs509">xs:gDay("---31") castable as xs:integer</entry>
<entry key="CastableAs508">xs:gDay("---31") castable as xs:decimal</entry>
<entry key="CastableAs507">xs:gDay("---31") castable as xs:double</entry>
<entry key="CastableAs506">xs:gDay("---31") castable as xs:float</entry>
<entry key="CastableAs505">xs:gDay("---31") castable as xs:string</entry>
<entry key="CastableAs504">xs:gDay("---31") castable as xs:untypedAtomic</entry>
<entry key="CastableAs503">xs:gMonthDay("--05-31") castable as xs:anyURI</entry>
<entry key="CastableAs502">xs:gMonthDay("--05-31") castable as xs:hexBinary</entry>
<entry key="CastableAs501">xs:gMonthDay("--05-31") castable as xs:base64Binary</entry>
<entry key="CastableAs500">xs:gMonthDay("--05-31") castable as xs:boolean</entry>
<entry key="quantexpr-39">every $x in (1, 2) satisfies fn:string($x) = "1"</entry>
<entry key="quantexpr-38">every $x in (1, 2) satisfies fn:avg(($x, 1)) = 1</entry>
<entry key="quantexpr-37">every $x in (1, 2) satisfies $x idiv 2 = 1</entry>
<entry key="quantexpr-36">every $x in (1, 2) satisfies $x div 2 = 1</entry>
<entry key="quantexpr-35">every $x in (1, 2) satisfies $x * 2 = 4</entry>
<entry key="quantexpr-34">every $x in (2, 2) satisfies $x - 2 = 0</entry>
<entry key="quantexpr-32">every $x in (1, 1) satisfies $x + $x = 2</entry>
<entry key="quantexpr-31">every $x in (1, 2) satisfies $x + $x = 3</entry>
<entry key="cbcl-castable-positiveInteger-002">"0" castable as xs:positiveInteger</entry>
<entry key="cbcl-castable-positiveInteger-001">0 castable as xs:positiveInteger</entry>
<entry key="cbcl-castable-int-004">"-2147483649" castable as xs:int</entry>
<entry key="cbcl-castable-int-003">"2147483648" castable as xs:int</entry>
<entry key="cbcl-castable-int-002">-2147483649 castable as xs:int</entry>
<entry key="cbcl-castable-int-001">2147483648 castable as xs:int</entry>
<entry key="quantexpr-19">some $x in (1,2,3), $y in (4,5,6) satisfies $x - $y = 5</entry>
<entry key="K-SeqExprCast-193">xs:string(xs:dayTimeDuration("P3D")) eq "P3D"</entry>
<entry key="K-SeqExprCast-192">xs:string(xs:dayTimeDuration(xs:yearMonthDuration("-P543Y456M"))) eq "PT0S"</entry>
<entry key="K-SeqExprCast-191">xs:string(xs:dayTimeDuration(xs:duration("-P3Y0M31DT3H2M10.001S"))) eq "-P31DT3H2M10.001S"</entry>
<entry key="K-SeqExprCast-190">xs:string(xs:dayTimeDuration(xs:yearMonthDuration("P543Y456M"))) eq "PT0S"</entry>
<entry key="K-SeqExprCast-189">xs:string(xs:dayTimeDuration(xs:duration("P3Y0M31DT3H2M10.001S"))) eq "P31DT3H2M10.001S"</entry>
<entry key="unabbreviatedSyntax-33">for $h in (/works/employee[6]) return $h/child::*[self::empnum or self::pnum][fn:position() = fn:last()]</entry>
<entry key="K-SeqExprCast-188">xs:string(xs:dayTimeDuration("-PT0S")) eq "PT0S"</entry>
<entry key="unabbreviatedSyntax-32">for $h in (/works/employee[7]) return $h/child::*[self::pnum or self::empnum]</entry>
<entry key="K-SeqExprCast-187">xs:string(xs:dayTimeDuration("P31DT3H2M10.001S")) eq "P31DT3H2M10.001S"</entry>
<entry key="unabbreviatedSyntax-31">for $h in (/works) return $h/child::employee[child::status]</entry>
<entry key="K-SeqExprCast-186">xs:string(xs:dayTimeDuration("PT1M1231.432S")) eq "PT21M31.432S"</entry>
<entry key="unabbreviatedSyntax-30">for $h in (/works) return $h/child::employee[child::empnum = 'E3']</entry>
<entry key="K-SeqExprCast-185">xs:string(xs:dayTimeDuration("PT6000M")) eq "P4DT4H"</entry>
<entry key="K-SeqExprCast-184">xs:string(xs:dayTimeDuration("PT9876H1M")) eq "P411DT12H1M"</entry>
<entry key="cbcl-castable-duration-002">"P768614336404564651Y" castable as xs:duration</entry>
<entry key="K-SeqExprCast-183">xs:string(xs:dayTimeDuration("P9876DT1M")) eq "P9876DT1M"</entry>
<entry key="cbcl-castable-duration-001">"-P768614336404564651Y" castable as xs:duration</entry>
<entry key="K-SeqExprCast-182">xs:string(xs:dayTimeDuration("-P5DT0H0M0.000S")) eq "-P5D"</entry>
<entry key="K-SeqExprCast-181">xs:string(xs:dayTimeDuration("-PT8H23M0S")) eq "-PT8H23M"</entry>
<entry key="K-SeqExprCast-180">xs:string(xs:dayTimeDuration("-P0010DT0010H0010M0010S")) eq "-P10DT10H10M10S"</entry>
<entry key="errors-and-optimization-1">if (true()) then 1 else error(QName('http://www.example.com/errors', 'err:oops'), "Oops, this error should not be raised!")</entry>
<entry key="unabbreviatedSyntax-29">for $h in (/works) return $h/child::employee[attribute::gender eq 'female'][fn:position() = 5]</entry>
<entry key="unabbreviatedSyntax-28">for $h in (/works) return $h/child::employee[attribute::name eq "Jane Doe 11"]</entry>
<entry key="unabbreviatedSyntax-27">/child::works/child::employee[fn:position() = 5]/child::hours[fn:position() = 2]</entry>
<entry key="filterexpressionhc21">((1,2,3,4,5,6,7,8,9,10,11)[fn:true()])</entry>
<entry key="unabbreviatedSyntax-26">for $h in (/works) return $h/descendant::employee[fn:position() = 12]</entry>
<entry key="filterexpressionhc20">((1,2,3,4,5,6,7,8,9,10,11)[(. gt 1) and (. gt 2)][(. gt 5) and (. gt 6)])</entry>
<entry key="unabbreviatedSyntax-25">for $h in (/works/employee[2]) return $h/preceding-sibling::employee[fn:position() = 1]</entry>
<entry key="unabbreviatedSyntax-24">for $h in (/works/employee[2]) return $h/following-sibling::employee[fn:position() = 1]</entry>
<entry key="K-SeqExprCast-179">xs:string(xs:dayTimeDuration("P0010DT0010H0010M0010S")) eq "P10DT10H10M10S"</entry>
<entry key="unabbreviatedSyntax-23">for $h in (/works/employee) return $h/child::hours[fn:position() &gt; 1]</entry>
<entry key="unabbreviatedSyntax-22">for $h in (/works) return $h/child::employee[fn:position() = fn:last()-1]</entry>
<entry key="unabbreviatedSyntax-21">for $h in (/works) return $h/child::employee[fn:position() = fn:last()]</entry>
<entry key="unabbreviatedSyntax-20">for $h in (/works) return $h/child::employee[fn:position() = 1]</entry>
<entry key="K-SeqExprCast-175">xs:string(xs:dayTimeDuration("P0DT00H00M00.000S")) eq "PT0S"</entry>
<entry key="filterexpressionhc19">((1,2,3,4,5,6,7,8,9,10,11)[. gt 1][. gt 5])</entry>
<entry key="filterexpressionhc18">((1,2,3,4,5,6,7,8,9,10,11)[(xs:string(.) eq "3")])</entry>
<entry key="filterexpressionhc17">((1,2,4,5,6,7,8,9,10,11)[(. idiv 2 eq 3)])</entry>
<entry key="Axes074-4">fn:count(//center//child::*)</entry>
<entry key="filterexpressionhc16">((1,2,4,5,6,7,8,9,10,11)[(. - 2 eq 6)])</entry>
<entry key="Axes074-3">fn:count(//center//child::*)</entry>
<entry key="filterexpressionhc15">((1,2,4,5,6,7,8,9,10,11)[(. + 2 eq 10)])</entry>
<entry key="Axes074-2">fn:count(//center//child::*)</entry>
<entry key="filterexpressionhc14">((1,2,4,5,6,7,8,9,10,11)[(. * 2 eq 10)])</entry>
<entry key="Axes074-1">fn:count(//center//child::*)</entry>
<entry key="unabbreviatedSyntax-19">for $h in (/works) return $h/descendant::employee/child::pnum</entry>
<entry key="filterexpressionhc13">((1,2,4,5,6,7,8,9,10,11)[(. div 2 eq 5)])</entry>
<entry key="unabbreviatedSyntax-18">for $h in (/works) return $h/descendant::pnum</entry>
<entry key="filterexpressionhc12">((1 to 11)[(. eq 10) or (. eq 5)])</entry>
<entry key="filterexpressionhc11">((1 to 11)[(. eq 10) and (. mod 5 eq 0)])</entry>
<entry key="unabbreviatedSyntax-16">for $h in (/works) return $h/child::*/child::pnum</entry>
<entry key="filterexpressionhc10">((1 to 11)[. ne 10])</entry>
<entry key="unabbreviatedSyntax-15">for $h in (/works) return $h/child::employee/descendant::empnum</entry>
<entry key="unabbreviatedSyntax-14">for $h in (/works[1]/employee[1]) return fn:count(($h/self::employee[1000]))</entry>
<entry key="unabbreviatedSyntax-13">for $h in (/works/employee[1]) return $h/self::employee</entry>
<entry key="K-SeqExprCast-168">xs:string(xs:duration(xs:yearMonthDuration("-P543Y456M"))) eq "-P581Y"</entry>
<entry key="unabbreviatedSyntax-12">for $h in (/works/employee[1]) return $h/descendant-or-self::employee</entry>
<entry key="K-SeqExprCast-167">xs:string(xs:duration(xs:dayTimeDuration("-P31DT3H2M10.001S"))) eq "-P31DT3H2M10.001S"</entry>
<entry key="unabbreviatedSyntax-11">(for $h in (/works/employee[1]/hours) return $h/ancestor-or-self::employee)/@name</entry>
<entry key="K-SeqExprCast-166">xs:string(xs:duration(xs:yearMonthDuration("P543Y456M"))) eq "P581Y"</entry>
<entry key="unabbreviatedSyntax-10">for $h in (/works/employee[1]/hours) return $h/ancestor::employee</entry>
<entry key="K-SeqExprCast-165">xs:string(xs:duration(xs:dayTimeDuration("P31DT3H2M10.001S"))) eq "P31DT3H2M10.001S"</entry>
<entry key="K-SeqExprCast-164">xs:string(xs:duration("-PT0S")) eq "PT0S"</entry>
<entry key="K-SeqExprCast-163">xs:string(xs:duration("P31DT3H2M10.001S")) eq "P31DT3H2M10.001S"</entry>
<entry key="K-SeqExprCast-162">xs:string(xs:yearMonthDuration("P3Y0M")) eq "P3Y"</entry>
<entry key="K-SeqExprCast-161">xs:string(xs:duration("P31D")) eq "P31D"</entry>
<entry key="K-SeqExprCast-160">xs:string(xs:duration("P12M")) eq "P1Y"</entry>
<entry key="Axes063-4">fn:count(//child::south)</entry>
<entry key="Axes063-3">fn:count(//child::south)</entry>
<entry key="Axes063-2">fn:count(//child::south)</entry>
<entry key="K-SeqExprCast-159">xs:string(xs:duration("P365D")) eq "P365D"</entry>
<entry key="Axes063-1">fn:count(//child::south)</entry>
<entry key="K-SeqExprCast-158">xs:string(xs:duration("-P2000Y11M5DT0H0M0.000S")) eq "-P2000Y11M5D"</entry>
<entry key="K-SeqExprCast-157">xs:string(xs:duration("-PT8H23M0S")) eq "-PT8H23M"</entry>
<entry key="K-SeqExprCast-156">xs:string(xs:duration("P0Y0M0DT00H00M00.000S")) eq "PT0S"</entry>
<entry key="K-SeqExprCast-155">xs:string(xs:duration("-P0010DT0010H0010M0010S")) eq "-P10DT10H10M10S"</entry>
<entry key="K-SeqExprCast-154">xs:string(xs:duration("P0010Y0010M0010DT0010H0010M0010S")) eq "P10Y10M10DT10H10M10S"</entry>
<entry key="K-SeqExprCast-143">xs:hexBinary(remove(("3B", 1.1), 2) treat as xs:string)</entry>
<entry key="K-SeqExprCast-142">xs:string(xs:base64Binary("")) eq ""</entry>
<entry key="K-SeqExprCast-141">xs:string(xs:hexBinary(xs:base64Binary("aaa a"))) eq "69A69A"</entry>
<entry key="K-SeqExprCast-140">xs:string(xs:hexBinary(xs:base64Binary("Ow=="))) eq "3B"</entry>
<entry key="K-SeqExprCast-139">xs:string(xs:base64Binary(xs:hexBinary("ffff34564321deac9876"))) eq "//80VkMh3qyYdg=="</entry>
<entry key="K-SeqExprCast-138">xs:string(xs:base64Binary(xs:hexBinary("ffff"))) eq "//8="</entry>
<entry key="K-SeqExprCast-137">xs:string(xs:base64Binary(xs:hexBinary("ffaabbddcceeff0134f001d8ca9bc77899c83e6f7d"))) eq "/6q73czu/wE08AHYypvHeJnIPm99"</entry>
<entry key="K-SeqExprCast-136">xs:string(xs:base64Binary(xs:hexBinary("f0"))) eq "8A=="</entry>
<entry key="K-SeqExprCast-135">xs:string(xs:base64Binary(xs:hexBinary("F43D1234ce8f"))) eq "9D0SNM6P"</entry>
<entry key="K-SeqExprCast-134">xs:string(xs:base64Binary(xs:hexBinary("69A69A"))) eq "aaaa"</entry>
<entry key="K-SeqExprCast-133">xs:string(xs:base64Binary(xs:hexBinary("3B"))) eq "Ow=="</entry>
<entry key="K-SeqExprCast-132">xs:string(xs:base64Binary(xs:hexBinary("12"))) eq "Eg=="</entry>
<entry key="K-SeqExprCast-131">xs:string(xs:base64Binary(xs:hexBinary("0f3c"))) eq "Dzw="</entry>
<entry key="K-SeqExprCast-130">xs:string(xs:base64Binary(xs:hexBinary("03"))) eq "Aw=="</entry>
<entry key="Axes041-1">fn:count(//center/@center-attr-3/descendant-or-self::node())</entry>
<entry key="CastAs497">xs:gMonthDay("--05-31Z") cast as xs:gMonthDay</entry>
<entry key="CastAs496">xs:gMonthDay("--12-03-05:00") cast as xs:gMonthDay</entry>
<entry key="CastAs495">xs:gMonthDay("--05-31") cast as xs:gMonthDay</entry>
<entry key="cbcl-castable-long-004">"-9223372036854775809" castable as xs:long</entry>
<entry key="cbcl-castable-long-003">"9223372036854775808" castable as xs:long</entry>
<entry key="cbcl-castable-long-002">-9223372036854775809 castable as xs:long</entry>
<entry key="cbcl-castable-long-001">9223372036854775808 castable as xs:long</entry>
<entry key="K-SeqExprCast-128">xs:string(xs:base64Binary("frfhforlksid7453")) eq "frfhforlksid7453"</entry>
<entry key="K-SeqExprCast-127">xs:string(xs:base64Binary("aaa a")) eq "aaaa"</entry>
<entry key="K-SeqExprCast-126">xs:string(xs:base64Binary("0w==")) eq "0w=="</entry>
<entry key="Axes030-2">fn:count(//center/text()/self::node())</entry>
<entry key="Axes030-1">fn:count(//center/text()/self::node())</entry>
<entry key="LetExpr015">let $x := (0,0.1e-1,2.0,'a',"cat",'',true()) return $x</entry>
<entry key="LetExpr013">let $x:="hello", $y:=concat($x," there") return $y</entry>
<entry key="LetExpr012">let $x :=(1 to 100)[. mod 5 eq 0], $y := $x[. mod 10 eq 0] return $y</entry>
<entry key="LetExpr011">let $x :=(1 to 100)[. mod 5 eq 0] return $x</entry>
<entry key="CastAs482">xs:gMonthDay("--05-31") cast as xs:string</entry>
<entry key="CastAs481">xs:gMonthDay("--05-31") cast as xs:untypedAtomic</entry>
<entry key="K-SeqExprCast-114">xs:string(xs:hexBinary("")) eq ""</entry>
<entry key="K-SeqExprCast-113">xs:string(xs:hexBinary("3a")) eq "3A"</entry>
<entry key="K-SeqExprCast-112">xs:string(xs:hexBinary("0b")) eq "0B"</entry>
<entry key="K-SeqExprCast-111">xs:string(xs:hexBinary("0c")) eq "0C"</entry>
<entry key="K-SeqExprCast-110">xs:string(xs:hexBinary("03")) eq "03"</entry>
<entry key="LetExpr008">let $x:=1, $y:=$x+1 return $x</entry>
<entry key="LetExpr006">let $x := xs:double("1.7976931348623157E308") return $x</entry>
<entry key="LetExpr005">let $x := xs:long("-92233720368547758")+1 return $x</entry>
<entry key="LetExpr004">let $x := xs:long("92233720368547758") return $x</entry>
<entry key="LetExpr003">let $x := 92233720368547758+1 return $x</entry>
<entry key="LetExpr002">let $x := 92233720368547758 return $x</entry>
<entry key="CastAs473">xs:gYear("1999Z") cast as xs:gYear</entry>
<entry key="LetExpr001">let $x := "92233720368547758" return $x</entry>
<entry key="CastAs472">xs:gYear("-0012-05:00") cast as xs:gYear</entry>
<entry key="CastAs471">xs:gYear("1999") cast as xs:gYear</entry>
<entry key="K-SeqExprCast-109">xs:string(xs:hexBinary("031a34123b")) eq "031A34123B"</entry>
<entry key="K-SeqExprCast-108">xs:string(xs:hexBinary("10")) eq "10"</entry>
<entry key="K-SeqExprCast-107">xs:string(xs:hexBinary("fA")) eq "FA"</entry>
<entry key="K-SeqExprCast-106">xs:string(xs:hexBinary("c0")) eq "C0"</entry>
<entry key="K-SeqExprCast-105">xs:string(xs:hexBinary("a4")) eq "A4"</entry>
<entry key="K-SeqExprCast-104">xs:string(xs:hexBinary("a0")) eq "A0"</entry>
<entry key="K-SeqExprCast-103">xs:string(xs:hexBinary("0a")) eq "0A"</entry>
<entry key="K-SeqExprCast-102">xs:string(xs:hexBinary("aa")) eq "AA"</entry>
<entry key="K-SeqExprCast-101">count(xs:hexBinary(xs:hexBinary("03"))) eq 1</entry>
<entry key="K-SeqExprCast-100">exists(xs:hexBinary("aa"))</entry>
<entry key="xquery10keywords2">
      let $x := (/) 
      return $x /ancestor-or-self /ancestor /and /as /ascending /at /attribute 
      /base-uri /boundary-space /by 
      /case /cast /castable /child /collation /comment /construction /copy-namespaces 
      /declare /default /descendant-or-self /descendant /descending /div /document-node /document 
      /element /else /empty-sequence /empty /encoding /eq /every /except /external 
      /following-sibling /following /for /function 
      /ge /greatest /gt 
      /idiv /if /import /in /inherit /instance /intersect /is /item
       /lax /le /least /let /lt 
       /mod /module /module 
       /namespace /ne /no-inherit /no-preserve /node 
       /of /option /or /order /ordered /ordering 
       /parent /preceding-sibling /preceding /preserve /processing-instruction 
       /return 
       /satisfies /schema-attribute /schema-element /schema /self /some /stable /strict /strip 
       /text /then /to /treat /typeswitch 
       /union /unordered 
       /validate /variable /version 
       /where
       /xquery</entry>
<entry key="CastAs460">xs:gYear("1999") cast as xs:string</entry>
<entry key="function-literal-099">exists(Q{http://www.w3.org/2005/xpath-functions}concat#3)</entry>
<entry key="function-literal-098">Q{http://www.w3.org/2005/xpath-functions}codepoint-equal#2('string', 'string')</entry>
<entry key="function-literal-097">exists(Q{http://www.w3.org/2005/xpath-functions}codepoint-equal#2)</entry>
<entry key="function-literal-096">Q{http://www.w3.org/2005/xpath-functions}compare#3('string', 'string', 'http://www.w3.org/2005/xpath-functions/collation/codepoint')</entry>
<entry key="function-literal-095">exists(Q{http://www.w3.org/2005/xpath-functions}compare#3)</entry>
<entry key="function-literal-094">Q{http://www.w3.org/2005/xpath-functions}compare#2('string', 'string')</entry>
<entry key="function-literal-093">exists(Q{http://www.w3.org/2005/xpath-functions}compare#2)</entry>
<entry key="function-literal-092">Q{http://www.w3.org/2005/xpath-functions}string-to-codepoints#1('A')</entry>
<entry key="function-literal-091">exists(Q{http://www.w3.org/2005/xpath-functions}string-to-codepoints#1)</entry>
<entry key="casthc42">fn:true() cast as xs:boolean</entry>
<entry key="function-literal-090">Q{http://www.w3.org/2005/xpath-functions}codepoints-to-string#1((65, 66))</entry>
<entry key="casthc41">fn:true() cast as xs:integer</entry>
<entry key="casthc40">fn:true() cast as xs:decimal</entry>
<entry key="K-LogicExpr-44">true() and boolean((1, 2, 3, current-time())[1] treat as xs:integer)</entry>
<entry key="K-LogicExpr-43">boolean((1, 2, 3, current-time())[1] treat as xs:integer) and true()</entry>
<entry key="K-LogicExpr-42">boolean((1, 2, 3, current-time())[1] treat as xs:integer) and boolean((1, 2, 3, current-time())[1] treat as xs:integer)</entry>
<entry key="K-LogicExpr-41">count((1, 2, 3, timezone-from-time(current-time()), 4)) and count((1, 2, 3, timezone-from-time(current-time()), 4))</entry>
<entry key="K-LogicExpr-40">true() and count((1, 2, 3, timezone-from-time(current-time()), 4))</entry>
<entry key="CastAs459">xs:gYear("1999") cast as xs:untypedAtomic</entry>
<entry key="CastAs450">xs:gYearMonth("1999-05Z") cast as xs:gYearMonth</entry>
<entry key="function-literal-089">exists(Q{http://www.w3.org/2005/xpath-functions}codepoints-to-string#1)</entry>
<entry key="function-literal-088">Q{http://www.w3.org/2005/xpath-functions/math}atan2#2(1e0, 1e0)</entry>
<entry key="casthc39">fn:true() cast as xs:double</entry>
<entry key="function-literal-087">exists(Q{http://www.w3.org/2005/xpath-functions/math}atan2#2)</entry>
<entry key="casthc38">fn:true() cast as xs:float</entry>
<entry key="function-literal-086">Q{http://www.w3.org/2005/xpath-functions/math}atan#1(1e0)</entry>
<entry key="casthc37">fn:true() cast as xs:string</entry>
<entry key="function-literal-085">exists(Q{http://www.w3.org/2005/xpath-functions/math}atan#1)</entry>
<entry key="casthc36">xs:time("12:00:00") cast as xs:time</entry>
<entry key="function-literal-084">Q{http://www.w3.org/2005/xpath-functions/math}acos#1(1e0)</entry>
<entry key="casthc35">xs:time("12:00:00") cast as xs:string</entry>
<entry key="function-literal-083">exists(Q{http://www.w3.org/2005/xpath-functions/math}acos#1)</entry>
<entry key="casthc34">xs:date("1999-05-31") cast as xs:date</entry>
<entry key="function-literal-082">Q{http://www.w3.org/2005/xpath-functions/math}asin#1(1e0)</entry>
<entry key="casthc33">xs:date("1999-05-31") cast as xs:dateTime</entry>
<entry key="function-literal-081">exists(Q{http://www.w3.org/2005/xpath-functions/math}asin#1)</entry>
<entry key="casthc32">xs:date("1999-05-31") cast as xs:string</entry>
<entry key="K-LogicExpr-39">count((1, 2, 3, timezone-from-time(current-time()), 4)) and true()</entry>
<entry key="function-literal-080">Q{http://www.w3.org/2005/xpath-functions/math}tan#1(1e0)</entry>
<entry key="casthc31">xs:dateTime("1999-05-31T13:20:00-05:00") cast as xs:date</entry>
<entry key="K-LogicExpr-38">not(xs:untypedAtomic("a string") and xs:untypedAtomic(""))</entry>
<entry key="casthc30">xs:dateTime("1999-05-31T13:20:00-05:00") cast as xs:time</entry>
<entry key="K-LogicExpr-37">xs:untypedAtomic("a string") and xs:untypedAtomic("a string")</entry>
<entry key="K-LogicExpr-36">not(xs:anyURI("") and xs:anyURI("example.com/"))</entry>
<entry key="K-LogicExpr-35">not(xs:anyURI("example.com/") and xs:anyURI(""))</entry>
<entry key="K-LogicExpr-34">xs:anyURI("example.com/") and xs:anyURI("example.com/")</entry>
<entry key="K-LogicExpr-33">not(false() and (1, current-time())[1] treat as xs:integer)</entry>
<entry key="K-LogicExpr-32">not((1, current-time())[1] treat as xs:integer and false())</entry>
<entry key="K-LogicExpr-31">1 and 5</entry>
<entry key="K-LogicExpr-30">10.3 and "non-zero length string"</entry>
<entry key="K-GenCompGT-19">count((1, 2, 3, timezone-from-time(current-time()), 4)) &gt;= 0</entry>
<entry key="CastAs449">xs:gYearMonth("-0012-12-05:00") cast as xs:gYearMonth</entry>
<entry key="K-GenCompGT-18">count((1, 2, 3, timezone-from-time(current-time()), 4)) &gt; 0</entry>
<entry key="CastAs448">xs:gYearMonth("1999-05") cast as xs:gYearMonth</entry>
<entry key="K-GenCompGT-15">not(false() &gt; xs:untypedAtomic("true"))</entry>
<entry key="K-GenCompGT-14">not(xs:untypedAtomic("false") &gt; true())</entry>
<entry key="K-GenCompGT-13">true() &gt; xs:untypedAtomic("false")</entry>
<entry key="K-GenCompGT-12">xs:untypedAtomic("true") &gt; false()</entry>
<entry key="K-GenCompGT-11">1 &gt;= 1</entry>
<entry key="K-GenCompGT-10">2 &gt; 1</entry>
<entry key="function-literal-079">exists(Q{http://www.w3.org/2005/xpath-functions/math}tan#1)</entry>
<entry key="function-literal-078">Q{http://www.w3.org/2005/xpath-functions/math}cos#1(1e0)</entry>
<entry key="casthc29">xs:dateTime("1999-05-31T13:20:00-05:00") cast as xs:dateTime</entry>
<entry key="function-literal-077">exists(Q{http://www.w3.org/2005/xpath-functions/math}cos#1)</entry>
<entry key="casthc28">xs:dateTime("1999-05-31T13:20:00-05:00") cast as xs:string</entry>
<entry key="function-literal-076">Q{http://www.w3.org/2005/xpath-functions/math}sin#1(1e0)</entry>
<entry key="casthc27">xs:integer(12678967543233) cast as xs:boolean</entry>
<entry key="K-LogicExpr-9">0 or xs:anyURI("example.com/")</entry>
<entry key="function-literal-075">exists(Q{http://www.w3.org/2005/xpath-functions/math}sin#1)</entry>
<entry key="casthc26">xs:integer(12678967543233) cast as xs:integer</entry>
<entry key="K-LogicExpr-8">xs:anyURI("example.com/") or 0</entry>
<entry key="function-literal-074">Q{http://www.w3.org/2005/xpath-functions/math}sqrt#1(1e0)</entry>
<entry key="casthc25">xs:integer(12678967543233) cast as xs:decimal</entry>
<entry key="K-LogicExpr-7">1 or 5</entry>
<entry key="function-literal-073">exists(Q{http://www.w3.org/2005/xpath-functions/math}sqrt#1)</entry>
<entry key="casthc24">xs:integer(12678967543233) cast as xs:double</entry>
<entry key="K-LogicExpr-6">1 or 0</entry>
<entry key="function-literal-072">Q{http://www.w3.org/2005/xpath-functions/math}pow#2(1e0, 1)</entry>
<entry key="K-SeqExprCast-798">xs:dateTime(xs:untypedAtomic( "2002-10-10T12:00:00-05:00" )) eq xs:dateTime("2002-10-10T12:00:00-05:00")</entry>
<entry key="casthc23">(xs:integer(12678967543233) cast as xs:float) eq xs:float(12678967543233)</entry>
<entry key="K-LogicExpr-5">1 or 1</entry>
<entry key="function-literal-071">exists(Q{http://www.w3.org/2005/xpath-functions/math}pow#2)</entry>
<entry key="casthc22">xs:integer(12678967543233) cast as xs:string</entry>
<entry key="K-LogicExpr-29">1 and 1</entry>
<entry key="K-LogicExpr-4">not("" or 0)</entry>
<entry key="function-literal-070">Q{http://www.w3.org/2005/xpath-functions/math}log10#1(1e0)</entry>
<entry key="K-SeqExprCast-796">xs:dateTime(" 2002-10-10T12:00:00-05:00 ") eq xs:dateTime(" 2002-10-10T12:00:00-05:00 ")</entry>
<entry key="casthc21">xs:decimal(12678967.543233) cast as xs:boolean</entry>
<entry key="K-LogicExpr-28">not("" and 0)</entry>
<entry key="K-LogicExpr-3">not(0 or 0)</entry>
<entry key="K-SeqExprCast-795">subsequence(("dummy", 1.1, xs:dateTime("2002-10-10T12:00:00-05:00")), 3, 1) instance of xs:dateTime</entry>
<entry key="casthc20">xs:decimal(12678967.543233) cast as xs:integer</entry>
<entry key="K-LogicExpr-27">true() or boolean((1, 2, 3, current-time())[1] treat as xs:integer)</entry>
<entry key="K-LogicExpr-2">not(0 or 0)</entry>
<entry key="K-LogicExpr-26">boolean((1, 2, 3, current-time())[1] treat as xs:integer) and true()</entry>
<entry key="K-LogicExpr-1">not("" or 0)</entry>
<entry key="K-LogicExpr-25">boolean((1, 2, 3, current-time())[1] treat as xs:integer) or boolean((1, 2, 3, current-time())[1] treat as xs:integer)</entry>
<entry key="K-LogicExpr-24">count((1, 2, 3, timezone-from-time(current-time()), 4)) or count((1, 2, 3, timezone-from-time(current-time()), 4))</entry>
<entry key="K-SeqExprCast-791">not(xs:dayTimeDuration("P3DT2H") castable as xs:QName)</entry>
<entry key="K-LogicExpr-23">false() or count((1, 2, 3, timezone-from-time(current-time()), 4))</entry>
<entry key="K-LogicExpr-22">count((1, 2, 3, timezone-from-time(current-time()), 4)) or false()</entry>
<entry key="cbcl-cast-unsignedByte-005">xs:unsignedByte("-00")</entry>
<entry key="CastAs436">xs:gYearMonth("1999-05") cast as xs:string</entry>
<entry key="CastAs435">xs:gYearMonth("1999-05") cast as xs:untypedAtomic</entry>
<entry key="CastAs430">xs:date("1999-05-31Z") cast as xs:gMonth</entry>
<entry key="function-literal-069">exists(Q{http://www.w3.org/2005/xpath-functions/math}log10#1)</entry>
<entry key="function-literal-068">Q{http://www.w3.org/2005/xpath-functions/math}log#1(1e0)</entry>
<entry key="casthc19">xs:decimal(12678967.543233) cast as xs:decimal</entry>
<entry key="function-literal-067">exists(Q{http://www.w3.org/2005/xpath-functions/math}log#1)</entry>
<entry key="casthc18">xs:decimal(12678967.543233) cast as xs:double</entry>
<entry key="function-literal-066">Q{http://www.w3.org/2005/xpath-functions/math}exp10#1(1e0)</entry>
<entry key="casthc17">xs:decimal(12678967.543233) cast as xs:float</entry>
<entry key="function-literal-065">exists(Q{http://www.w3.org/2005/xpath-functions/math}exp10#1)</entry>
<entry key="casthc16">xs:decimal(12678967.543233) cast as xs:string</entry>
<entry key="function-literal-064">format-number(Q{http://www.w3.org/2005/xpath-functions/math}exp#1(1e0), '#.0000000')</entry>
<entry key="casthc15">xs:double(1267.43233E12) cast as xs:boolean</entry>
<entry key="function-literal-063">exists(Q{http://www.w3.org/2005/xpath-functions/math}exp#1)</entry>
<entry key="K-SeqExprCast-789">not(xs:dayTimeDuration("P3DT2H") castable as xs:anyURI)</entry>
<entry key="casthc14">(xs:double(1267.43233E12) cast as xs:float) eq xs:float(1267.43233E12)</entry>
<entry key="function-literal-062">Q{http://www.w3.org/2005/xpath-functions/math}pi#0()</entry>
<entry key="casthc13">xs:double(1267.43233E12) cast as xs:string</entry>
<entry key="function-literal-061">exists(Q{http://www.w3.org/2005/xpath-functions/math}pi#0)</entry>
<entry key="K-SeqExprCast-787">not(xs:dayTimeDuration("P3DT2H") castable as xs:hexBinary)</entry>
<entry key="casthc12">xs:double(1267.43233E12) cast as xs:double</entry>
<entry key="function-literal-060">Q{http://www.w3.org/2005/xpath-functions}format-number#3(1, '0', ())</entry>
<entry key="casthc11">xs:float(2.1E3) cast as xs:boolean</entry>
<entry key="K-SeqExprCast-785">not(xs:dayTimeDuration("P3DT2H") castable as xs:base64Binary)</entry>
<entry key="casthc10">xs:float(2.1E3) cast as xs:double</entry>
<entry key="K-SeqExprCast-783">not(xs:dayTimeDuration("P3DT2H") castable as xs:boolean)</entry>
<entry key="K-LogicExpr-15">(0, current-time())[1] treat as xs:integer or true()</entry>
<entry key="K-LogicExpr-14">true() or (0, current-time())[1] treat as xs:integer</entry>
<entry key="K-SeqExprCast-781">not(xs:dayTimeDuration("P3DT2H") castable as xs:gMonth)</entry>
<entry key="K-LogicExpr-13">0 or xs:untypedAtomic("a string")</entry>
<entry key="K-LogicExpr-12">xs:untypedAtomic("a string") or 0</entry>
<entry key="K-LogicExpr-11">not(0 or xs:anyURI(""))</entry>
<entry key="K-LogicExpr-10">not(xs:anyURI("") or 0)</entry>
<entry key="CastAs429">xs:date("-0012-12-03-05:00") cast as xs:gMonth</entry>
<entry key="CastAs428">xs:date("1999-05-31Z") cast as xs:gDay</entry>
<entry key="CastAs427">xs:date("1999-05-31Z") cast as xs:gMonthDay</entry>
<entry key="CastAs426">xs:date("-0012-12-03-05:00") cast as xs:gMonthDay</entry>
<entry key="CastAs425">xs:date("1999-05-31") cast as xs:gMonthDay</entry>
<entry key="CastAs424">xs:date("1999-05-31Z") cast as xs:gYear</entry>
<entry key="CastAs423">xs:date("-0012-12-03-05:00") cast as xs:gYear</entry>
<entry key="CastAs422">xs:date("1999-05-31") cast as xs:gYear</entry>
<entry key="CastAs421">xs:date("1999-05-31") cast as xs:gYearMonth</entry>
<entry key="CastAs420">xs:date("1999-05-31Z") cast as xs:date</entry>
<entry key="function-literal-059">exists(Q{http://www.w3.org/2005/xpath-functions}format-number#3)</entry>
<entry key="function-literal-058">Q{http://www.w3.org/2005/xpath-functions}format-number#2(1, '0')</entry>
<entry key="function-literal-057">exists(Q{http://www.w3.org/2005/xpath-functions}format-number#2)</entry>
<entry key="function-literal-056">Q{http://www.w3.org/2005/xpath-functions}format-integer#3(1, '0', 'en')</entry>
<entry key="function-literal-055">exists(Q{http://www.w3.org/2005/xpath-functions}format-integer#3)</entry>
<entry key="function-literal-054">Q{http://www.w3.org/2005/xpath-functions}format-integer#2(1, '0')</entry>
<entry key="function-literal-053">exists(Q{http://www.w3.org/2005/xpath-functions}format-integer#2)</entry>
<entry key="K-SeqExprCast-779">not(xs:dayTimeDuration("P3DT2H") castable as xs:gDay)</entry>
<entry key="function-literal-052">Q{http://www.w3.org/2005/xpath-functions}number#1('1')</entry>
<entry key="function-literal-051">exists(Q{http://www.w3.org/2005/xpath-functions}number#1)</entry>
<entry key="K-SeqExprCast-777">not(xs:dayTimeDuration("P3DT2H") castable as xs:gMonthDay)</entry>
<entry key="function-literal-050">/root/child/Q{http://www.w3.org/2005/xpath-functions}number#0()</entry>
<entry key="K-SeqExprCast-775">not(xs:dayTimeDuration("P3DT2H") castable as xs:gYear)</entry>
<entry key="K-SeqExprCast-773">not(xs:dayTimeDuration("P3DT2H") castable as xs:gYearMonth)</entry>
<entry key="K-SeqExprCast-771">not(xs:dayTimeDuration("P3DT2H") castable as xs:date)</entry>
<entry key="CastAs419">xs:date("-0012-12-03-05:00") cast as xs:date</entry>
<entry key="CastAs418">xs:date("1999-05-31") cast as xs:date</entry>
<entry key="CastAs416">xs:date("1999-05-31") cast as xs:dateTime</entry>
<entry key="function-literal-049">exists(Q{http://www.w3.org/2005/xpath-functions}number#0)</entry>
<entry key="function-literal-048">Q{http://www.w3.org/2005/xpath-functions}round-half-to-even#2(1.1, 0)</entry>
<entry key="function-literal-047">exists(Q{http://www.w3.org/2005/xpath-functions}round-half-to-even#2)</entry>
<entry key="function-literal-046">Q{http://www.w3.org/2005/xpath-functions}round-half-to-even#1(1.1)</entry>
<entry key="function-literal-045">exists(Q{http://www.w3.org/2005/xpath-functions}round-half-to-even#1)</entry>
<entry key="function-literal-044">Q{http://www.w3.org/2005/xpath-functions}round#2(1.1, 0)</entry>
<entry key="function-literal-043">exists(Q{http://www.w3.org/2005/xpath-functions}round#2)</entry>
<entry key="K-SeqExprCast-769">not(xs:dayTimeDuration("P3DT2H") castable as xs:time)</entry>
<entry key="function-literal-042">Q{http://www.w3.org/2005/xpath-functions}round#1(1.1)</entry>
<entry key="function-literal-041">exists(Q{http://www.w3.org/2005/xpath-functions}round#1)</entry>
<entry key="K-SeqExprCast-767">not(xs:dayTimeDuration("P3DT2H") castable as xs:dateTime)</entry>
<entry key="function-literal-040">Q{http://www.w3.org/2005/xpath-functions}floor#1(1.1)</entry>
<entry key="K-SeqExprCast-765">xs:dayTimeDuration("P3DT2H") castable as xs:dayTimeDuration</entry>
<entry key="K-SeqExprCast-764">xs:dayTimeDuration("P3DT2H") cast as xs:dayTimeDuration eq xs:dayTimeDuration("P3DT2H")</entry>
<entry key="K-SeqExprCast-763">xs:dayTimeDuration("P3DT2H") castable as xs:yearMonthDuration</entry>
<entry key="K-SeqExprCast-762">xs:dayTimeDuration("P3DT2H") cast as xs:yearMonthDuration ne xs:yearMonthDuration("P1Y12M")</entry>
<entry key="K-SeqExprCast-761">xs:dayTimeDuration("P3DT2H") castable as xs:duration</entry>
<entry key="K-SeqExprCast-760">xs:dayTimeDuration("P3DT2H") cast as xs:duration ne xs:duration("P1Y2M3DT10H30M")</entry>
<entry key="CastAs408">xs:date("-0012-12-03-05:00") cast as xs:string</entry>
<entry key="CastAs407">xs:date("1999-05-31") cast as xs:string</entry>
<entry key="CastAs406">xs:date("-0012-12-03-05:00") cast as xs:untypedAtomic</entry>
<entry key="CastAs405">xs:date("1999-05-31") cast as xs:untypedAtomic</entry>
<entry key="K-GenCompEq-46">(true() = xs:untypedAtomic("true"))</entry>
<entry key="K-SeqExprCast-1199">not(xs:gMonth("--11") castable as xs:boolean)</entry>
<entry key="K-GenCompEq-45">not(xs:untypedAtomic("true") = false())</entry>
<entry key="K-GenCompEq-44">false() = xs:untypedAtomic("false")</entry>
<entry key="K-SeqExprCast-1197">xs:gMonth("--11") castable as xs:gMonth</entry>
<entry key="function-literal-039">exists(Q{http://www.w3.org/2005/xpath-functions}floor#1)</entry>
<entry key="K-GenCompEq-43">xs:untypedAtomic("false") = false()</entry>
<entry key="K-SeqExprCast-1196">xs:gMonth("--11") cast as xs:gMonth eq xs:gMonth("--11")</entry>
<entry key="function-literal-038">Q{http://www.w3.org/2005/xpath-functions}ceiling#1(0.9)</entry>
<entry key="K-GenCompEq-42">3 = (1, 2, 3)</entry>
<entry key="K-SeqExprCast-1195">not(xs:gMonth("--11") castable as xs:gDay)</entry>
<entry key="function-literal-037">exists(Q{http://www.w3.org/2005/xpath-functions}ceiling#1)</entry>
<entry key="K-GenCompEq-41">1 = (1, 2, 3)</entry>
<entry key="function-literal-036">Q{http://www.w3.org/2005/xpath-functions}abs#1(-1)</entry>
<entry key="K-GenCompEq-40">2 = (1, 2, 3)</entry>
<entry key="K-SeqExprCast-1193">not(xs:gMonth("--11") castable as xs:gMonthDay)</entry>
<entry key="function-literal-035">exists(Q{http://www.w3.org/2005/xpath-functions}abs#1)</entry>
<entry key="Axes069-3">fn:count(//attribute::mark)</entry>
<entry key="function-literal-034">Q{http://www.w3.org/2005/xpath-functions}trace#2(1, 'label')</entry>
<entry key="K-SeqExprCast-1191">not(xs:gMonth("--11") castable as xs:gYear)</entry>
<entry key="Axes069-2">fn:count(//attribute::mark)</entry>
<entry key="function-literal-033">exists(Q{http://www.w3.org/2005/xpath-functions}trace#2)</entry>
<entry key="K-SeqExprCast-759">not(xs:dayTimeDuration("P3DT2H") castable as xs:integer)</entry>
<entry key="Axes069-1">fn:count(//attribute::mark)</entry>
<entry key="function-literal-031">exists(Q{http://www.w3.org/2005/xpath-functions}error#3)</entry>
<entry key="K-SeqExprCast-757">not(xs:dayTimeDuration("P3DT2H") castable as xs:decimal)</entry>
<entry key="K-SeqExprCast-755">not(xs:dayTimeDuration("P3DT2H") castable as xs:double)</entry>
<entry key="K-SeqExprCast-753">not(xs:dayTimeDuration("P3DT2H") castable as xs:float)</entry>
<entry key="K-SeqExprCast-751">xs:dayTimeDuration("P3DT2H") castable as xs:string</entry>
<entry key="K-SeqExprCast-750">xs:dayTimeDuration("P3DT2H") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="K2-SeqExprTreat-2">3 treat as item()+ + +1</entry>
<entry key="cbcl-cast-language-001">xs:language('en-gb') cast as xs:language</entry>
<entry key="K-GenCompEq-39">(1, 2, 3) = 3</entry>
<entry key="K-GenCompEq-38">(1, 2, 3) = 2</entry>
<entry key="K-GenCompEq-37">(1, 2, 3) = 1</entry>
<entry key="K-GenCompEq-36">1 = 1</entry>
<entry key="K-SeqExprCast-1189">not(xs:gMonth("--11") castable as xs:gYearMonth)</entry>
<entry key="K-SeqExprCast-1187">not(xs:gMonth("--11") castable as xs:date)</entry>
<entry key="function-literal-029">exists(Q{http://www.w3.org/2005/xpath-functions}error#2)</entry>
<entry key="K-SeqExprCast-1185">not(xs:gMonth("--11") castable as xs:time)</entry>
<entry key="function-literal-027">exists(Q{http://www.w3.org/2005/xpath-functions}error#1)</entry>
<entry key="K-SeqExprCast-1183">not(xs:gMonth("--11") castable as xs:dateTime)</entry>
<entry key="function-literal-025">exists(Q{http://www.w3.org/2005/xpath-functions}error#0)</entry>
<entry key="function-literal-024">Q{http://www.w3.org/2005/xpath-functions}document-uri#1(/)</entry>
<entry key="K-SeqExprCast-1181">not(xs:gMonth("--11") castable as xs:dayTimeDuration)</entry>
<entry key="function-literal-023">exists(Q{http://www.w3.org/2005/xpath-functions}document-uri#1)</entry>
<entry key="K-SeqExprCast-749">xs:dayTimeDuration("P3DT2H") castable as xs:untypedAtomic</entry>
<entry key="function-literal-022">/Q{http://www.w3.org/2005/xpath-functions}document-uri#0()</entry>
<entry key="K-SeqExprCast-748">xs:dayTimeDuration("P3DT2H") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="function-literal-021">exists(Q{http://www.w3.org/2005/xpath-functions}document-uri#0)</entry>
<entry key="function-literal-020">Q{http://www.w3.org/2005/xpath-functions}base-uri#1(/)</entry>
<entry key="K-SeqExprCast-746">xs:dayTimeDuration(xs:untypedAtomic( "P3DT2H" )) eq xs:dayTimeDuration("P3DT2H")</entry>
<entry key="Axes058-3">fn:count(/descendant::node())</entry>
<entry key="K-SeqExprCast-744">xs:dayTimeDuration(" P3DT2H ") eq xs:dayTimeDuration(" P3DT2H ")</entry>
<entry key="Axes058-2">fn:count(/descendant::node())</entry>
<entry key="K-SeqExprCast-743">subsequence(("dummy", 1.1, xs:dayTimeDuration("P3DT2H")), 3, 1) instance of xs:dayTimeDuration</entry>
<entry key="Axes058-1">fn:count(/descendant::node())</entry>
<entry key="K-GenCompEq-29">not("a string" = "a stringDIFF")</entry>
<entry key="K-GenCompEq-28">not("a string" = xs:untypedAtomic("a stringDIFF"))</entry>
<entry key="K-GenCompEq-27">not(xs:untypedAtomic("a string") = "a stringDIFF")</entry>
<entry key="K-GenCompEq-26">"a string" = xs:untypedAtomic("a string")</entry>
<entry key="K-SeqExprCast-1179">not(xs:gMonth("--11") castable as xs:yearMonthDuration)</entry>
<entry key="K-GenCompEq-25">xs:untypedAtomic("a string") = "a string"</entry>
<entry key="K-GenCompEq-24">"a string" = "a string"</entry>
<entry key="K-SeqExprCast-1177">not(xs:gMonth("--11") castable as xs:duration)</entry>
<entry key="function-literal-019">exists(Q{http://www.w3.org/2005/xpath-functions}base-uri#1)</entry>
<entry key="function-literal-018">/root/Q{http://www.w3.org/2005/xpath-functions}base-uri#0()</entry>
<entry key="K-GenCompEq-22">0 != count((1, 2, timezone-from-time(current-time())))</entry>
<entry key="K-SeqExprCast-1175">not(xs:gMonth("--11") castable as xs:integer)</entry>
<entry key="function-literal-017">exists(Q{http://www.w3.org/2005/xpath-functions}base-uri#0)</entry>
<entry key="K-GenCompEq-21">not(0 = count((1, 2, timezone-from-time(current-time()))))</entry>
<entry key="function-literal-016">Q{http://www.w3.org/2005/xpath-functions}data#1(/root/child[1])</entry>
<entry key="K-GenCompEq-20">count(remove(remove((current-time(), 1), 1), 1)) = 0</entry>
<entry key="K-SeqExprCast-1173">not(xs:gMonth("--11") castable as xs:decimal)</entry>
<entry key="function-literal-015">exists(Q{http://www.w3.org/2005/xpath-functions}data#1)</entry>
<entry key="function-literal-014">/root/child/Q{http://www.w3.org/2005/xpath-functions}data#0()</entry>
<entry key="K-SeqExprCast-1171">not(xs:gMonth("--11") castable as xs:double)</entry>
<entry key="function-literal-013">exists(Q{http://www.w3.org/2005/xpath-functions}data#0)</entry>
<entry key="K-SeqExprCast-739">not(xs:yearMonthDuration("P1Y12M") castable as xs:QName)</entry>
<entry key="function-literal-012">Q{http://www.w3.org/2005/xpath-functions}string#1(1)</entry>
<entry key="function-literal-011">exists(Q{http://www.w3.org/2005/xpath-functions}string#1)</entry>
<entry key="K2-SeqExprCast-480">xs:untypedAtomic("xs:untypedAtomic"), xs:dateTime("2002-10-10T23:02:12Z"), xs:date("2002-10-10Z"), xs:time("23:02:12Z"),
                xs:duration("P12M"), xs:dayTimeDuration("PT1S"), xs:yearMonthDuration("P1M"), xs:float("3e3"), xs:double("4e4"),
                xs:decimal("2.0"), xs:integer("16"), xs:nonPositiveInteger("0"), xs:negativeInteger("-4"), xs:long("5"),
                xs:int("6"), xs:short("7"), xs:byte("8"), xs:nonNegativeInteger("9"), xs:unsignedLong("10"),
                xs:unsignedInt("11"), xs:unsignedShort("12"), xs:unsignedByte("13"), xs:positiveInteger("14"),
                xs:gYearMonth("1976-02Z"), xs:gYear("2005-12:00"), xs:gMonthDay("--12-25-14:00"),
                xs:gDay("---25-14:00"), xs:gMonth("--12-14:00"), xs:boolean("true"), xs:base64Binary("aaaa"),
                xs:hexBinary("FFFF"), xs:anyURI("http://example.com/"), xs:QName("localName"),
                xs:string("An xs:string"), xs:normalizedString("normalizedString"), xs:token("token"),
                xs:language("language"), xs:NMTOKEN("NMTOKEN"), xs:Name("Name"), xs:NCName("NCName"),
                xs:ID("ID"), xs:IDREF("IDREF"), xs:ENTITY("ENTITY")</entry>
<entry key="K-SeqExprCast-737">not(xs:yearMonthDuration("P1Y12M") castable as xs:anyURI)</entry>
<entry key="function-literal-010">/root/child/Q{http://www.w3.org/2005/xpath-functions}string#0()</entry>
<entry key="K-SeqExprCast-735">not(xs:yearMonthDuration("P1Y12M") castable as xs:hexBinary)</entry>
<entry key="K-SeqExprCast-733">not(xs:yearMonthDuration("P1Y12M") castable as xs:base64Binary)</entry>
<entry key="K-SeqExprCast-731">not(xs:yearMonthDuration("P1Y12M") castable as xs:boolean)</entry>
<entry key="Axes047-2">fn:count(/*)</entry>
<entry key="Axes047-1">fn:count(/*)</entry>
<entry key="K-SeqExprCast-71b">xs:untypedAtomic("ncname") cast as xs:QName?</entry>
<entry key="K-SeqExprCast-1169">not(xs:gMonth("--11") castable as xs:float)</entry>
<entry key="K-GenCompEq-15">1 = xs:untypedAtomic("1")</entry>
<entry key="K-GenCompEq-14">1 = xs:untypedAtomic("1")</entry>
<entry key="K-SeqExprCast-1167">xs:gMonth("--11") castable as xs:string</entry>
<entry key="function-literal-009">exists(Q{http://www.w3.org/2005/xpath-functions}string#0)</entry>
<entry key="K-GenCompEq-13">xs:untypedAtomic("1") = 1</entry>
<entry key="K2-SeqExprCast-478">xs:gYearMonth("0040-01")</entry>
<entry key="K-SeqExprCast-1166">xs:gMonth("--11") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="function-literal-008">Q{http://www.w3.org/2005/xpath-functions}nilled#1(/root)</entry>
<entry key="K-GenCompEq-12">not(xs:untypedAtomic("2") = 1)</entry>
<entry key="K2-SeqExprCast-477">xs:gYear("0040")</entry>
<entry key="K-SeqExprCast-1165">xs:gMonth("--11") castable as xs:untypedAtomic</entry>
<entry key="function-literal-007">exists(Q{http://www.w3.org/2005/xpath-functions}nilled#1)</entry>
<entry key="K-GenCompEq-11">xs:untypedAtomic("1") = 1</entry>
<entry key="K-SeqExprCast-1164">xs:gMonth("--11") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="function-literal-006">/root/Q{http://www.w3.org/2005/xpath-functions}nilled#0()</entry>
<entry key="function-literal-005">exists(Q{http://www.w3.org/2005/xpath-functions}nilled#0)</entry>
<entry key="K-SeqExprCast-1162">xs:gMonth(xs:untypedAtomic( "--11" )) eq xs:gMonth("--11")</entry>
<entry key="function-literal-004">Q{http://www.w3.org/2005/xpath-functions}node-name#1(/root)</entry>
<entry key="function-literal-003">exists(Q{http://www.w3.org/2005/xpath-functions}node-name#1)</entry>
<entry key="K-SeqExprCast-1160">xs:gMonth(" --11 ") eq xs:gMonth(" --11 ")</entry>
<entry key="K-SeqExprCast-729">not(xs:yearMonthDuration("P1Y12M") castable as xs:gMonth)</entry>
<entry key="function-literal-002">/root/Q{http://www.w3.org/2005/xpath-functions}node-name#0()</entry>
<entry key="function-literal-001">exists(Q{http://www.w3.org/2005/xpath-functions}node-name#0)</entry>
<entry key="K-SeqExprCast-727">not(xs:yearMonthDuration("P1Y12M") castable as xs:gDay)</entry>
<entry key="K-GenCompNE-9">not(xs:untypedAtomic("1") != 1)</entry>
<entry key="K-SeqExprCast-725">not(xs:yearMonthDuration("P1Y12M") castable as xs:gMonthDay)</entry>
<entry key="K-GenCompNE-8">xs:untypedAtomic("2") != 1</entry>
<entry key="CastableAs499">xs:gMonthDay("--05-31") castable as xs:gMonth</entry>
<entry key="K-GenCompNE-7">(1, 2) != (2, 3)</entry>
<entry key="CastableAs498">xs:gMonthDay("--05-31") castable as xs:gDay</entry>
<entry key="K-SeqExprCast-723">not(xs:yearMonthDuration("P1Y12M") castable as xs:gYear)</entry>
<entry key="CastableAs497">xs:gMonthDay("--05-31Z") castable as xs:gMonthDay</entry>
<entry key="K-GenCompNE-5">not(() != 1 )</entry>
<entry key="CastableAs496">xs:gMonthDay("--12-03-05:00") castable as xs:gMonthDay</entry>
<entry key="K-SeqExprCast-721">not(xs:yearMonthDuration("P1Y12M") castable as xs:gYearMonth)</entry>
<entry key="K-GenCompNE-4">not(1 != () )</entry>
<entry key="CastableAs495">xs:gMonthDay("--05-31") castable as xs:gMonthDay</entry>
<entry key="K-GenCompNE-3">not(() != () )</entry>
<entry key="CastableAs494">xs:gMonthDay("--05-31") castable as xs:gYear</entry>
<entry key="K-GenCompNE-2">not(() = 1 )</entry>
<entry key="CastableAs493">xs:gMonthDay("--05-31") castable as xs:gYearMonth</entry>
<entry key="K-GenCompNE-1">(() != ()) eq false()</entry>
<entry key="CastableAs492">xs:gMonthDay("--05-31") castable as xs:date</entry>
<entry key="CastableAs491">xs:gMonthDay("--05-31") castable as xs:time</entry>
<entry key="CastableAs490">xs:gMonthDay("--05-31") castable as xs:dateTime</entry>
<entry key="Axes036-2">fn:count(//center/descendant-or-self::center)</entry>
<entry key="Axes036-1">fn:count(//center/descendant-or-self::center)</entry>
<entry key="K-SeqExprCast-1159">subsequence(("dummy", 1.1, xs:gMonth("--11")), 3, 1) instance of xs:gMonth</entry>
<entry key="K-SeqExprCast-1155">not(xs:gDay("---03") castable as xs:QName)</entry>
<entry key="K-SeqExprCast-1153">not(xs:gDay("---03") castable as xs:anyURI)</entry>
<entry key="K-SeqExprCast-1151">not(xs:gDay("---03") castable as xs:hexBinary)</entry>
<entry key="K-SeqExprCast-719">not(xs:yearMonthDuration("P1Y12M") castable as xs:date)</entry>
<entry key="K-SeqExprCast-717">not(xs:yearMonthDuration("P1Y12M") castable as xs:time)</entry>
<entry key="K-SeqExprCast-715">not(xs:yearMonthDuration("P1Y12M") castable as xs:dateTime)</entry>
<entry key="CastableAs489">xs:gMonthDay("--05-31") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs488">xs:gMonthDay("--05-31") castable as xs:yearMonthDuration</entry>
<entry key="K-SeqExprCast-713">xs:yearMonthDuration("P1Y12M") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs487">xs:gMonthDay("--05-31") castable as xs:duration</entry>
<entry key="K-SeqExprCast-712">xs:yearMonthDuration("P1Y12M") cast as xs:dayTimeDuration ne xs:dayTimeDuration("P3DT2H")</entry>
<entry key="CastableAs486">xs:gMonthDay("--05-31") castable as xs:integer</entry>
<entry key="K-SeqExprCast-711">xs:yearMonthDuration("P1Y12M") castable as xs:yearMonthDuration</entry>
<entry key="CastableAs485">xs:gMonthDay("--05-31") castable as xs:decimal</entry>
<entry key="K-SeqExprCast-710">xs:yearMonthDuration("P1Y12M") cast as xs:yearMonthDuration eq xs:yearMonthDuration("P1Y12M")</entry>
<entry key="CastableAs484">xs:gMonthDay("--05-31") castable as xs:double</entry>
<entry key="CastableAs483">xs:gMonthDay("--05-31") castable as xs:float</entry>
<entry key="CastableAs482">xs:gMonthDay("--05-31") castable as xs:string</entry>
<entry key="CastableAs481">xs:gMonthDay("--05-31") castable as xs:untypedAtomic</entry>
<entry key="CastableAs480">xs:gYear("1999") castable as xs:anyURI</entry>
<entry key="K-SeqExprCast-1149">not(xs:gDay("---03") castable as xs:base64Binary)</entry>
<entry key="K-SeqExprCast-1147">not(xs:gDay("---03") castable as xs:boolean)</entry>
<entry key="K-SeqExprCast-1145">not(xs:gDay("---03") castable as xs:gMonth)</entry>
<entry key="K-SeqExprCast-1143">xs:gDay("---03") castable as xs:gDay</entry>
<entry key="K-SeqExprCast-1142">xs:gDay("---03") cast as xs:gDay eq xs:gDay("---03")</entry>
<entry key="K-SeqExprCast-1141">not(xs:gDay("---03") castable as xs:gMonthDay)</entry>
<entry key="K-SeqExprCast-709">xs:yearMonthDuration("P1Y12M") castable as xs:duration</entry>
<entry key="K-SeqExprCast-708">xs:yearMonthDuration("P1Y12M") cast as xs:duration ne xs:duration("P1Y2M3DT10H30M")</entry>
<entry key="K-SeqExprCast-707">not(xs:yearMonthDuration("P1Y12M") castable as xs:integer)</entry>
<entry key="K-SeqExprCast-705">not(xs:yearMonthDuration("P1Y12M") castable as xs:decimal)</entry>
<entry key="CastableAs479">xs:gYear("1999") castable as xs:hexBinary</entry>
<entry key="CastableAs478">xs:gYear("1999") castable as xs:base64Binary</entry>
<entry key="K-SeqExprCast-703">not(xs:yearMonthDuration("P1Y12M") castable as xs:double)</entry>
<entry key="CastableAs477">xs:gYear("1999") castable as xs:boolean</entry>
<entry key="CastableAs476">xs:gYear("1999") castable as xs:gMonth</entry>
<entry key="K-SeqExprCast-701">not(xs:yearMonthDuration("P1Y12M") castable as xs:float)</entry>
<entry key="CastableAs475">xs:gYear("1999") castable as xs:gDay</entry>
<entry key="CastableAs474">xs:gYear("1999") castable as xs:gMonthDay</entry>
<entry key="CastableAs473">xs:gYear("1999Z") castable as xs:gYear</entry>
<entry key="CastableAs472">xs:gYear("-0012-05:00") castable as xs:gYear</entry>
<entry key="CastableAs471">xs:gYear("1999") castable as xs:gYear</entry>
<entry key="CastableAs470">xs:gYear("1999") castable as xs:gYearMonth</entry>
<entry key="generalexpression594">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &gt;= ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression593">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &gt;= ($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1])</entry>
<entry key="generalexpression592">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &gt;= ($works/works/employee[1]/hours[1])</entry>
<entry key="K-SeqExprCast-1139">not(xs:gDay("---03") castable as xs:gYear)</entry>
<entry key="K-SeqExprCast-1137">not(xs:gDay("---03") castable as xs:gYearMonth)</entry>
<entry key="K-SeqExprCast-1135">not(xs:gDay("---03") castable as xs:date)</entry>
<entry key="K-SeqExprCast-1133">not(xs:gDay("---03") castable as xs:time)</entry>
<entry key="K-SeqExprCast-1131">not(xs:gDay("---03") castable as xs:dateTime)</entry>
<entry key="Axes014-1">fn:count(/far-north/parent::*)</entry>
<entry key="CastableAs469">xs:gYear("1999") castable as xs:date</entry>
<entry key="CastableAs468">xs:gYear("1999") castable as xs:time</entry>
<entry key="CastableAs467">xs:gYear("1999") castable as xs:dateTime</entry>
<entry key="CastableAs466">xs:gYear("1999") castable as xs:yearMonthDuration</entry>
<entry key="CastableAs465">xs:gYear("1999") castable as xs:duration</entry>
<entry key="cbcl-cast-nmtoken-002">xs:NMTOKEN('NMTOKEN') cast as xs:NMTOKEN</entry>
<entry key="CastableAs464">xs:gYear("1999") castable as xs:integer</entry>
<entry key="CastableAs463">xs:gYear("1999") castable as xs:decimal</entry>
<entry key="CastableAs462">xs:gYear("1999") castable as xs:double</entry>
<entry key="CastableAs461">xs:gYear("1999") castable as xs:float</entry>
<entry key="CastableAs460">xs:gYear("1999") castable as xs:string</entry>
<entry key="generalexpression588">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &gt;= (10000,50000)</entry>
<entry key="generalexpression587">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &gt;= (50000)</entry>
<entry key="generalexpression586">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &gt;= 10000</entry>
<entry key="generalexpression585">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &gt;= ()</entry>
<entry key="generalexpression584">($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1]) &gt;= ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression583">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &gt;= (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression582">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &gt;= (/works/employee[1]/hours[1])</entry>
<entry key="K-SeqExprCast-1129">not(xs:gDay("---03") castable as xs:dayTimeDuration)</entry>
<entry key="K-SeqExprCast-1127">not(xs:gDay("---03") castable as xs:yearMonthDuration)</entry>
<entry key="CastAs673b">let $var := "ABC" return $var cast as xs:QName</entry>
<entry key="K-SeqExprCast-1125">not(xs:gDay("---03") castable as xs:duration)</entry>
<entry key="K-SeqExprCast-1123">not(xs:gDay("---03") castable as xs:integer)</entry>
<entry key="K-SeqExprCast-1121">not(xs:gDay("---03") castable as xs:decimal)</entry>
<entry key="Axes003-4">fn:count(//center/child::node())</entry>
<entry key="Axes003-3">fn:count(//center/child::node())</entry>
<entry key="Axes003-2">fn:count(//center/child::node())</entry>
<entry key="CastableAs459">xs:gYear("1999") castable as xs:untypedAtomic</entry>
<entry key="Axes003-1">fn:count(//center/child::node())</entry>
<entry key="CastableAs458">xs:gYearMonth("1999-05Z") castable as xs:anyURI</entry>
<entry key="cbcl-condexpr-002">
      	let $x := zero-or-one((1 to 10)[. div 2 = 2]) 
      	return if(empty($x)) then () else xs:string($x)
      </entry>
<entry key="CastableAs457">xs:gYearMonth("1999-05Z") castable as xs:hexBinary</entry>
<entry key="cbcl-condexpr-001">
      	let $x := zero-or-one((1 to 10)[. div 2 = 2]) 
      	return if(exists($x)) then xs:string($x) else ()
      </entry>
<entry key="CondExpr022">if (doc-available('nodocument.xml')) then doc('nodocument.xml') else 10 cast as xs:double</entry>
<entry key="CastableAs456">xs:gYearMonth("1999-05Z") castable as xs:base64Binary</entry>
<entry key="CastableAs455">xs:gYearMonth("1999-05Z") castable as xs:boolean</entry>
<entry key="CastableAs454">xs:gYearMonth("1999-05Z") castable as xs:gMonth</entry>
<entry key="CastableAs453">xs:gYearMonth("1999-05Z") castable as xs:gDay</entry>
<entry key="CastableAs452">xs:gYearMonth("1999-05Z") castable as xs:gMonthDay</entry>
<entry key="ReturnExpr020">for $file in (//Folder)[1]/File return xs:string( data( $file/FileName[1] ))</entry>
<entry key="CastableAs451">xs:gYearMonth("1999-05Z") castable as xs:gYear</entry>
<entry key="CastableAs450">xs:gYearMonth("1999-05Z") castable as xs:gYearMonth</entry>
<entry key="generalexpression578">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &gt;= (10000,50000)</entry>
<entry key="generalexpression577">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &gt;= (50000)</entry>
<entry key="generalexpression576">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &gt;= 10000</entry>
<entry key="generalexpression575">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &gt;= ()</entry>
<entry key="generalexpression574">($works/works/employee[1]/hours[1]) &gt;= ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression573">(/works/employee[1]/hours[1]) &gt;= (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression572">(/works/employee[1]/hours[1]) &gt;= (/works/employee[1]/hours[1])</entry>
<entry key="K-SeqExprCast-1119">not(xs:gDay("---03") castable as xs:double)</entry>
<entry key="K-SeqExprCast-1117">not(xs:gDay("---03") castable as xs:float)</entry>
<entry key="K2-SeqExprCast-427">xs:anyURI("//server/share/dir1")</entry>
<entry key="K-SeqExprCast-1115">xs:gDay("---03") castable as xs:string</entry>
<entry key="K2-SeqExprCast-426">"START", 
      	string(QName("http://example.com", 
      	"prefix:localName")), 
      	string(QName("http://example.com", "localName")), 
      	string(QName("http://example.com", "localName")), 
      	string(QName("", "localName")), 
      	string(QName((), "localName")), 
      	"END" </entry>
<entry key="K-SeqExprCast-1114">xs:gDay("---03") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="K2-SeqExprCast-425">"START", 
      		QName("http://example.com", "prefix:localName"), 
      		QName("http://example.com", "localName"), 
      		QName("http://example.com", "localName"), 
      		QName("", "localName"), QName((), "localName"), 
      		"END"</entry>
<entry key="K-SeqExprCast-1113">xs:gDay("---03") castable as xs:untypedAtomic</entry>
<entry key="K2-SeqExprInstanceOf-97">xs:positiveInteger(xs:float("4")) instance of xs:positiveInteger</entry>
<entry key="K-SeqExprCast-1112">xs:gDay("---03") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="K2-SeqExprInstanceOf-96">xs:unsignedByte(xs:float("4")) instance of xs:unsignedByte</entry>
<entry key="K2-SeqExprInstanceOf-95">xs:unsignedShort(xs:float("4")) instance of xs:unsignedShort</entry>
<entry key="K-SeqExprCast-1110">xs:gDay(xs:untypedAtomic( "---03" )) eq xs:gDay("---03")</entry>
<entry key="K2-SeqExprInstanceOf-94">xs:unsignedInt(xs:float("4")) instance of xs:unsignedInt</entry>
<entry key="K2-SeqExprInstanceOf-93">xs:unsignedLong(xs:float("4")) instance of xs:unsignedLong</entry>
<entry key="CondExpr018">for $file in (//Folder)[1]/File return if( $file/FileName='File00000000004' ) then 1 else data( $file/FileName )</entry>
<entry key="K2-SeqExprCast-420">xs:anyURI(" http://example.com/ foo.xml ")</entry>
<entry key="K2-SeqExprInstanceOf-92">xs:nonNegativeInteger(xs:float("4")) instance of xs:nonNegativeInteger</entry>
<entry key="CondExpr017">for $file in (//Folder)[1]/File return if( $file/FileName='File00000000000' ) then $file/FileName else data( $file/FileName )</entry>
<entry key="K2-SeqExprInstanceOf-91">xs:short(xs:float("-4")) instance of xs:short</entry>
<entry key="CondExpr016">(//Folder)[1]/File[ if ( ./@name='File00000000000' ) then 2 else true() ]/FileName</entry>
<entry key="ReturnExpr018">for $file in (//Folder)[1]/File return ($file/Stream/StreamSize)[1] &gt; 1004</entry>
<entry key="K2-SeqExprInstanceOf-90">xs:int(xs:float("-4")) instance of xs:int</entry>
<entry key="CondExpr015"> (if (3 != 2) then 16 else 0) + (if (8 = 7) then 4 else 1) </entry>
<entry key="CastableAs449">xs:gYearMonth("-0012-12-05:00") castable as xs:gYearMonth</entry>
<entry key="ReturnExpr017">for $file in (//Folder)[1]/File return ($file/Stream/StreamSize)[1] + 1</entry>
<entry key="CondExpr014"> ( if (3 != 2) then 16 else 0 ) + ( if (8 = 7) then 4 else 1 ) </entry>
<entry key="CastableAs448">xs:gYearMonth("1999-05") castable as xs:gYearMonth</entry>
<entry key="CastableAs447">xs:gYearMonth("1999-05Z") castable as xs:date</entry>
<entry key="ReturnExpr015">for $file in for $folder in (//Folder)[1] return $folder/File return $file/FileName</entry>
<entry key="CastableAs446">xs:gYearMonth("1999-05Z") castable as xs:time</entry>
<entry key="CastableAs445">xs:gYearMonth("1999-05Z") castable as xs:dateTime</entry>
<entry key="CondExpr010"> if (2 != 4) then 1 else 0 </entry>
<entry key="CastableAs444">xs:gYearMonth("1999-05Z") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs443">xs:gYearMonth("1999-05Z") castable as xs:yearMonthDuration</entry>
<entry key="ReturnExpr011">for $folder in //Folder, $file in $folder/File return ( $folder/FolderName, $file/FileName )</entry>
<entry key="CastableAs442">xs:gYearMonth("1999-05Z") castable as xs:duration</entry>
<entry key="CastableAs441">xs:gYearMonth("1999-05Z") castable as xs:integer</entry>
<entry key="CastableAs440">xs:gYearMonth("1999-05Z") castable as xs:decimal</entry>
<entry key="generalexpression568">(/works/employee[1]/hours[1]) &gt;= (10000,50000)</entry>
<entry key="generalexpression567">(/works/employee[1]/hours[1]) &gt;= (50000)</entry>
<entry key="generalexpression566">(/works/employee[1]/hours[1]) &gt;= 10000</entry>
<entry key="generalexpression565">(/works/employee[1]/hours[1]) &gt;= ()</entry>
<entry key="K-SeqExprCast-1108">xs:gDay(" ---03 ") eq xs:gDay(" ---03 ")</entry>
<entry key="K2-SeqExprCast-419">xs:language("abcdefgh-abcdefgh")</entry>
<entry key="K-SeqExprCast-1107">subsequence(("dummy", 1.1, xs:gDay("---03")), 3, 1) instance of xs:gDay</entry>
<entry key="K2-SeqExprCast-418">xs:language("abcdefgh")</entry>
<entry key="K2-SeqExprCast-417">xs:language("abcdefg")</entry>
<entry key="K2-SeqExprInstanceOf-89">xs:long(xs:float("-4")) instance of xs:long</entry>
<entry key="K2-SeqExprCast-416">xs:language("abcdef")</entry>
<entry key="K2-SeqExprInstanceOf-88">xs:negativeInteger(xs:float("-4")) instance of xs:negativeInteger</entry>
<entry key="K2-SeqExprCast-415">xs:language("abcde")</entry>
<entry key="K-SeqExprCast-1103">not(xs:gMonthDay("--11-13") castable as xs:QName)</entry>
<entry key="K2-SeqExprInstanceOf-87">xs:nonPositiveInteger(xs:float("0")) instance of xs:nonPositiveInteger</entry>
<entry key="K2-SeqExprCast-414">xs:language("abcd")</entry>
<entry key="K2-SeqExprInstanceOf-86">xs:byte(xs:float("1")) instance of xs:byte</entry>
<entry key="K2-SeqExprCast-413">xs:language("abc")</entry>
<entry key="K-SeqExprCast-1101">not(xs:gMonthDay("--11-13") castable as xs:anyURI)</entry>
<entry key="K2-SeqExprInstanceOf-85">xs:positiveInteger(xs:double("4")) instance of xs:positiveInteger</entry>
<entry key="K2-SeqExprCast-412">xs:language("ab")</entry>
<entry key="K2-SeqExprInstanceOf-84">xs:unsignedByte(xs:double("4")) instance of xs:unsignedByte</entry>
<entry key="CondExpr009">if (/Root/Customers[1]/@CustomerID = 'ALFKI' or /Root/Customers[1]/FullAddress/City = 'Non-Existent') then "pass" else "fail"</entry>
<entry key="cbcl-cast-ncname-001">xs:ID('id') cast as xs:NCName</entry>
<entry key="K2-SeqExprCast-411">xs:language("a")</entry>
<entry key="K2-SeqExprInstanceOf-83">xs:unsignedShort(xs:double("4")) instance of xs:unsignedShort</entry>
<entry key="CondExpr008">if ( /Root/Customers[1]/@CustomerID = 'ALFKI' and /Root/Customers[1]/FullAddress/City = 'Berlin') then "pass" else "fail"</entry>
<entry key="K2-SeqExprCast-410">xs:string(xs:ENTITY("foo"))</entry>
<entry key="K2-SeqExprInstanceOf-82">xs:unsignedInt(xs:double("4")) instance of xs:unsignedInt</entry>
<entry key="ReturnExpr009">for $file in (//Folder)[1]/File return (//FileName)[1]</entry>
<entry key="K2-SeqExprInstanceOf-81">xs:unsignedLong(xs:double("4")) instance of xs:unsignedLong</entry>
<entry key="ReturnExpr008">for $file in (//Folder)[1]/File return 1</entry>
<entry key="K2-SeqExprInstanceOf-80">xs:nonNegativeInteger(xs:double("4")) instance of xs:nonNegativeInteger</entry>
<entry key="CastableAs439">xs:gYearMonth("1999-05Z") castable as xs:double</entry>
<entry key="ReturnExpr007">for $file in (//Folder)[1]/File return $file/parent::Folder/FolderName</entry>
<entry key="CastableAs438">xs:gYearMonth("1999-05") castable as xs:double</entry>
<entry key="ReturnExpr006">for $file in (//Folder)[1]/File return data( $file/FileName )</entry>
<entry key="CastableAs437">xs:gYearMonth("1999-05") castable as xs:float</entry>
<entry key="ReturnExpr005">for $file in (//Folder)[1]/File return $file/FileName</entry>
<entry key="CastableAs436">xs:gYearMonth("1999-05") castable as xs:string</entry>
<entry key="CastableAs435">xs:gYearMonth("1999-05") castable as xs:untypedAtomic</entry>
<entry key="CastableAs434">xs:date("1999-05-31") castable as xs:anyURI</entry>
<entry key="CastableAs433">xs:date("1999-05-31") castable as xs:hexBinary</entry>
<entry key="CastableAs432">xs:date("1999-05-31") castable as xs:base64Binary</entry>
<entry key="CastableAs431">xs:date("1999-05-31") castable as xs:boolean</entry>
<entry key="CastableAs430">xs:date("1999-05-31Z") castable as xs:gMonth</entry>
<entry key="K2-SeqExprCast-409">xs:string(xs:IDREF("foo"))</entry>
<entry key="K2-SeqExprCast-408">xs:string(xs:ID("foo"))</entry>
<entry key="K2-SeqExprCast-407">xs:string(xs:NCName("foo"))</entry>
<entry key="K2-SeqExprInstanceOf-79">xs:short(xs:double("-4")) instance of xs:short</entry>
<entry key="K2-SeqExprCast-406">xs:string(xs:Name("foo"))</entry>
<entry key="K2-SeqExprInstanceOf-78">xs:int(xs:double("-4")) instance of xs:int</entry>
<entry key="K2-SeqExprCast-405">xs:string(xs:NMTOKEN("foo"))</entry>
<entry key="K2-SeqExprInstanceOf-77">xs:long(xs:double("-4")) instance of xs:long</entry>
<entry key="K2-SeqExprCast-404">xs:string(xs:language("foo"))</entry>
<entry key="K2-SeqExprInstanceOf-76">xs:negativeInteger(xs:double("-4")) instance of xs:negativeInteger</entry>
<entry key="K2-SeqExprCast-403">xs:string(xs:token("foo"))</entry>
<entry key="K2-SeqExprInstanceOf-75">xs:nonPositiveInteger(xs:double("0")) instance of xs:nonPositiveInteger</entry>
<entry key="K2-SeqExprCast-402">xs:string(xs:normalizedString("foo"))</entry>
<entry key="K2-SeqExprInstanceOf-74">xs:byte(xs:double("1")) instance of xs:byte</entry>
<entry key="K2-SeqExprCast-401">xs:untypedAtomic(xs:ENTITY("foo"))</entry>
<entry key="K2-SeqExprCast-400">xs:untypedAtomic(xs:IDREF("foo"))</entry>
<entry key="K2-SeqExprInstanceOf-71">xs:normalizedString("ncname") instance of xs:token</entry>
<entry key="K2-SeqExprInstanceOf-70">xs:Name("ncname") instance of xs:language</entry>
<entry key="CastableAs429">xs:date("-0012-12-03-05:00") castable as xs:gMonth</entry>
<entry key="CastableAs428">xs:date("1999-05-31Z") castable as xs:gDay</entry>
<entry key="CastableAs427">xs:date("1999-05-31Z") castable as xs:gMonthDay</entry>
<entry key="CastableAs426">xs:date("-0012-12-03-05:00") castable as xs:gMonthDay</entry>
<entry key="CastableAs425">xs:date("1999-05-31") castable as xs:gMonthDay</entry>
<entry key="CastableAs424">xs:date("1999-05-31Z") castable as xs:gYear</entry>
<entry key="CastableAs423">xs:date("-0012-12-03-05:00") castable as xs:gYear</entry>
<entry key="CastableAs422">xs:date("1999-05-31") castable as xs:gYear</entry>
<entry key="CastableAs421">xs:date("1999-05-31") castable as xs:gYearMonth</entry>
<entry key="CastableAs420">xs:date("1999-05-31Z") castable as xs:date</entry>
<entry key="K2-SeqExprInstanceOf-69">xs:language("ncname") instance of xs:NMTOKEN</entry>
<entry key="K2-SeqExprInstanceOf-68">xs:ENTITY("ncname") instance of xs:IDREF</entry>
<entry key="K2-SeqExprInstanceOf-67">xs:ID("ncname") instance of xs:IDREF</entry>
<entry key="K2-SeqExprInstanceOf-66">xs:token("ncname") instance of xs:NCName</entry>
<entry key="K2-SeqExprInstanceOf-65">xs:long("1") instance of xs:positiveInteger</entry>
<entry key="K2-SeqExprInstanceOf-64">xs:long("1") instance of xs:nonNegativeInteger</entry>
<entry key="K2-SeqExprInstanceOf-63">xs:long("1") instance of xs:nonPositiveInteger</entry>
<entry key="K2-SeqExprInstanceOf-62">xs:long("1") instance of xs:negativeInteger</entry>
<entry key="K2-SeqExprInstanceOf-61">xs:positiveInteger("1") instance of xs:nonPositiveInteger</entry>
<entry key="K2-SeqExprInstanceOf-60">xs:positiveInteger("1") instance of xs:negativeInteger</entry>
<entry key="CastableAs419">xs:date("-0012-12-03-05:00") castable as xs:date</entry>
<entry key="CastableAs418">xs:date("1999-05-31") castable as xs:date</entry>
<entry key="CastableAs417">xs:date("1999-05-31") castable as xs:time</entry>
<entry key="CastableAs416">xs:date("1999-05-31") castable as xs:dateTime</entry>
<entry key="CastableAs415">xs:date("1999-05-31") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs414">xs:date("1999-05-31") castable as xs:yearMonthDuration</entry>
<entry key="CastableAs413">xs:date("1999-05-31") castable as xs:duration</entry>
<entry key="CastableAs412">xs:date("1999-05-31") castable as xs:integer</entry>
<entry key="CastableAs411">xs:date("1999-05-31Z") castable as xs:double</entry>
<entry key="CastableAs410">xs:date("1999-05-31") castable as xs:double</entry>
<entry key="generalexpression534">(10000,50000) &gt;= ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression533">(10000,50000) &gt;= (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression532">(10000,50000) &gt;= (/works/employee[1]/hours[1])</entry>
<entry key="K2-SeqExprInstanceOf-59">xs:nonNegativeInteger("1") instance of xs:negativeInteger</entry>
<entry key="K2-CondExpr-7">if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else ()</entry>
<entry key="K2-SeqExprInstanceOf-58">xs:nonNegativeInteger("1") instance of xs:nonPositiveInteger</entry>
<entry key="K-Literals-31a">"a string &amp;;"</entry>
<entry key="K2-SeqExprInstanceOf-57">xs:positiveInteger("1") instance of xs:nonNegativeInteger</entry>
<entry key="K2-SeqExprInstanceOf-56">xs:unsignedByte("0") instance of xs:unsignedShort</entry>
<entry key="K2-CondExpr-4">if(//(employee[location = "Denver"]/ancestor::*)) then 1 else 3</entry>
<entry key="K2-SeqExprInstanceOf-55">xs:unsignedShort("0") instance of xs:unsignedInt</entry>
<entry key="K2-SeqExprInstanceOf-54">xs:unsignedInt("0") instance of xs:unsignedLong</entry>
<entry key="K2-SeqExprInstanceOf-53">xs:unsignedLong("0") instance of xs:nonNegativeInteger</entry>
<entry key="xquery30keywords2">
        let $x := (/)
        return $x
        /NaN
        /allowing
        /ancestor-or-self
        /ancestor
        /and
        /as
        /ascending
        /at
        /attribute
        /base-uri
        /boundary-space
        /by
        /case
        /cast
        /castable
        /catch
        /child
        /collation
        /comment
        /construction
        /context
        /copy-namespaces
        /count
        /decimal-format
        /decimal-separator
        /declare
        /default
        /descendant-or-self
        /descendant
        /descending
        /digit
        /div
        /document-node
        /document
        /element
        /else
        /empty-sequence
        /empty
        /encoding
        /end
        /eq
        /every
        /except
        /external
        /following-sibling
        /following
        /for
        /function
        /ge
        /greatest
        /group
        /grouping-separator
        /gt
        /idiv
        /if
        /import
        /in
        /infinity
        /inherit
        /instance
        /intersect
        /is
        /item
        /lax
        /le
        /least
        /let
        /lt
        /minus-sign
        /mod
        /module
        /namespace-node
        /namespace
        /ne
        /next
        /no-inherit
        /no-preserve
        /node
        /of
        /only
        /option
        /or
        /order
        /ordered
        /ordering
        /parent
        /pattern-separator
        /per-mille
        /percent
        /preceding-sibling
        /preceding
        /preserve
        /previous
        /processing-instruction
        /return
        /satisfies
        /schema-attribute
        /schema-element
        /schema
        /self
        /sliding
        /some
        /stable
        /start
        /strict
        /strip
        /switch
        /text
        /then
        /to
        /treat
        /try
        /tumbling
        /type
        /typeswitch
        /union
        /unordered
        /validate
        /variable
        /version
        /when
        /where
        /window
        /xquery
        /zero-digit
      </entry>
<entry key="K2-SeqExprInstanceOf-52">xs:nonNegativeInteger("0") instance of xs:integer</entry>
<entry key="K2-SeqExprInstanceOf-51">xs:byte("0") instance of xs:short</entry>
<entry key="K2-SeqExprInstanceOf-50">xs:short("0") instance of xs:int</entry>
<entry key="CastableAs409">xs:date("1999-05-31") castable as xs:float</entry>
<entry key="CastableAs408">xs:date("-0012-12-03-05:00") castable as xs:string</entry>
<entry key="CastableAs407">xs:date("1999-05-31") castable as xs:string</entry>
<entry key="CastableAs406">xs:date("-0012-12-03-05:00") castable as xs:untypedAtomic</entry>
<entry key="CastableAs405">xs:date("1999-05-31") castable as xs:untypedAtomic</entry>
<entry key="CastableAs404">xs:time("13:20:00-05:00") castable as xs:anyURI</entry>
<entry key="CastableAs403">xs:time("13:20:00-05:00") castable as xs:hexBinary</entry>
<entry key="CastableAs402">xs:time("13:20:00-05:00") castable as xs:base64Binary</entry>
<entry key="CastableAs401">xs:time("13:20:00-05:00") castable as xs:boolean</entry>
<entry key="CastableAs400">xs:time("13:20:00-05:00") castable as xs:gMonth</entry>
<entry key="generalexpression528">(10000,50000) &gt;= (10000,50000)</entry>
<entry key="generalexpression527">(10000,50000) &gt;= (50000)</entry>
<entry key="generalexpression526">(10000,50000) &gt;= 10000</entry>
<entry key="generalexpression525">(10000,50000) &gt;= ()</entry>
<entry key="generalexpression524">(50000) &gt;= ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression523">(50000) &gt;= (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression522">(50000) &gt;= (/works/employee[1]/hours[1])</entry>
<entry key="K2-SeqExprInstanceOf-49">xs:int("0") instance of xs:long</entry>
<entry key="K2-SeqExprInstanceOf-48">xs:long("0") instance of xs:integer</entry>
<entry key="K2-SeqExprInstanceOf-47">xs:negativeInteger("-1") instance of xs:nonPositiveInteger</entry>
<entry key="K2-SeqExprInstanceOf-46">xs:nonPositiveInteger("0") instance of xs:integer</entry>
<entry key="K2-SeqExprInstanceOf-45">xs:ENTITY("ncname") instance of xs:NCName</entry>
<entry key="K2-SeqExprInstanceOf-44">xs:IDREF("ncname") instance of xs:NCName</entry>
<entry key="K2-SeqExprInstanceOf-43">xs:ID("ncname") instance of xs:NCName</entry>
<entry key="K2-SeqExprInstanceOf-42">xs:NCName("ncname") instance of xs:Name</entry>
<entry key="K2-SeqExprInstanceOf-41">xs:Name("ncname") instance of xs:token</entry>
<entry key="K2-SeqExprInstanceOf-40">xs:NMTOKEN("ncname") instance of xs:token</entry>
<entry key="K2-Literals-32">465.</entry>
<entry key="K2-Literals-30">.5</entry>
<entry key="generalexpression518">(50000) &gt;= (10000,50000)</entry>
<entry key="generalexpression517">(50000) &gt;= (50000)</entry>
<entry key="generalexpression516">(50000) &gt;= 10000</entry>
<entry key="generalexpression515">(50000) &gt;= ()</entry>
<entry key="generalexpression514">10000 &gt;= ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression513">10000 &gt;= (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression512">10000 &gt;= (/works/employee[1]/hours[1])</entry>
<entry key="K2-SeqExprInstanceOf-39">xs:language("ncname") instance of xs:token</entry>
<entry key="K2-SeqExprInstanceOf-38">xs:token("ncname") instance of xs:normalizedString</entry>
<entry key="K2-SeqExprInstanceOf-37">xs:normalizedString("ncname") instance of xs:string</entry>
<entry key="K2-SeqExprInstanceOf-36">xs:ENTITY("NCName") instance of xs:ENTITY</entry>
<entry key="K2-SeqExprInstanceOf-35">xs:IDREF("NCName") instance of xs:IDREF</entry>
<entry key="K2-SeqExprInstanceOf-34">xs:ID("NCName") instance of xs:ID</entry>
<entry key="K2-SeqExprInstanceOf-33">xs:NCName("NCName") instance of xs:NCName</entry>
<entry key="K2-SeqExprInstanceOf-32">xs:Name("NCName") instance of xs:Name</entry>
<entry key="K2-SeqExprInstanceOf-31">xs:NMTOKEN("NCName") instance of xs:NMTOKEN</entry>
<entry key="K2-SeqExprInstanceOf-30">xs:language("NCName") instance of xs:language</entry>
<entry key="generalexpression508">10000 &gt;= (10000,50000)</entry>
<entry key="generalexpression507">10000 &gt;= (50000)</entry>
<entry key="generalexpression506">10000 &gt;= ()</entry>
<entry key="generalexpression505">() &gt;= ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression504">() &gt;= (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression503">() &gt;= (/works/employee[1]/hours[1])</entry>
<entry key="K2-SeqExprInstanceOf-29">xs:token("NCName") instance of xs:token</entry>
<entry key="K2-SeqExprInstanceOf-28">xs:normalizedString("NCName") instance of xs:normalizedString</entry>
<entry key="K2-SeqExprInstanceOf-27">xs:positiveInteger(1) instance of xs:positiveInteger</entry>
<entry key="K2-SeqExprInstanceOf-26">xs:unsignedByte(0) instance of xs:unsignedByte</entry>
<entry key="K2-SeqExprInstanceOf-25">xs:unsignedShort(0) instance of xs:unsignedShort</entry>
<entry key="K2-SeqExprInstanceOf-24">xs:unsignedInt(0) instance of xs:unsignedInt</entry>
<entry key="K2-SeqExprInstanceOf-23">xs:unsignedLong(0) instance of xs:unsignedLong</entry>
<entry key="K-Literals-9">.3 eq .3</entry>
<entry key="K2-SeqExprInstanceOf-22">xs:nonNegativeInteger(0) instance of xs:nonNegativeInteger</entry>
<entry key="K-Literals-8">3. eq 3.</entry>
<entry key="K2-SeqExprInstanceOf-21">xs:nonNegativeInteger(0) instance of xs:nonNegativeInteger</entry>
<entry key="K2-SeqExprInstanceOf-20">xs:byte(0) instance of xs:byte</entry>
<entry key="K-Literals-6">"fo""o" eq concat("fo", """", "o")</entry>
<entry key="K-Literals-5">'''' eq "'"</entry>
<entry key="K-Literals-4">"""" eq '"'</entry>
<entry key="K-XQueryComment-19">(:*******************************************************:)
(: Test: K-XQueryComment-19                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test stressing many nested comments.       :)
(:*******************************************************:)
1(:(:(:(:(:(:(:(::):):):):):):):) eq 1</entry>
<entry key="K2-Literals-15">-0</entry>
<entry key="K-XQueryComment-18">(:*******************************************************:)
(: Test: K-XQueryComment-18                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: Three comments appearing serially inside a comment. :)
(:*******************************************************:)
1(: (:one comment:) content (:another comment:) content (:a third:):)
			   eq 1</entry>
<entry key="K2-Literals-14">0.0</entry>
<entry key="K-Literals-2">'foo' eq "foo"</entry>
<entry key="K-XQueryComment-17">(:*******************************************************:)
(: Test: K-XQueryComment-17                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: Colons and paranteses appearing freely in comment content. :)
(:*******************************************************:)
1(: ((( : )) ))ladl:  :(): ()()(dahsi ()()( dad: ) :) eq 1</entry>
<entry key="K2-Literals-13">-0.0</entry>
<entry key="K-Literals-1">'fo''o' eq 'fo''o'</entry>
<entry key="K2-Literals-12">0e0</entry>
<entry key="K2-Literals-11">-0e0</entry>
<entry key="K-XQueryComment-12">(:*******************************************************:)
(: Test: K-XQueryComment-12                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A for loop with a comment inbetween.         :)
(:*******************************************************:)
for (: set up loop :) $i in 3 return $i eq 3</entry>
<entry key="K-XQueryComment-11">(:*******************************************************:)
(: Test: K-XQueryComment-11                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: An empty comment after a function's paranteses. :)
(:*******************************************************:)
true()(::)</entry>
<entry key="K-XQueryComment-10">(:*******************************************************:)
(: Test: K-XQueryComment-10                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: An empty comment at the very beginning of an expression. :)
(:*******************************************************:)
(::) 1 eq 1</entry>
<entry key="K2-SeqExprInstanceOf-19">xs:short(0) instance of xs:short</entry>
<entry key="K2-SeqExprInstanceOf-18">xs:int(0) instance of xs:int</entry>
<entry key="K2-SeqExprInstanceOf-17">xs:long(0) instance of xs:long</entry>
<entry key="K2-SeqExprInstanceOf-16">xs:negativeInteger(-1) instance of xs:negativeInteger</entry>
<entry key="K2-SeqExprInstanceOf-15">xs:nonPositiveInteger(0) instance of xs:nonPositiveInteger</entry>
<entry key="Axes084-4">fn:count(//center//@center-attr-2)</entry>
<entry key="Axes084-3">fn:count(//center//@center-attr-2)</entry>
<entry key="Axes084-2">fn:count(//center//@center-attr-2)</entry>
<entry key="Axes084-1">fn:count(//center//@center-attr-2)</entry>
<entry key="cbcl-castable-unsignedByte-005">"-00" castable as xs:unsignedByte</entry>
<entry key="cbcl-castable-unsignedByte-004">"-1" castable as xs:unsignedByte</entry>
<entry key="cbcl-castable-unsignedByte-003">"256" castable as xs:unsignedByte</entry>
<entry key="cbcl-castable-unsignedByte-002">-1 castable as xs:unsignedByte</entry>
<entry key="cbcl-castable-unsignedByte-001">256 castable as xs:unsignedByte</entry>
<entry key="Axes073-2">fn:count(//self::node())</entry>
<entry key="Axes073-1">fn:count(//self::node())</entry>
<entry key="XQueryComment014">(: Name: XQueryComment014 :)
(: Description: Comments inside a cast expression :)


"10" cast as (: type comment :) xs:integer ?

</entry>
<entry key="XQueryComment013">(: Name: XQueryComment013 :)
(: Description: Comments inside a sequence expression :)


(1, 2, (: comment :) 3, 4)

</entry>
<entry key="XQueryComment012">(: Name: XQueryComment012 :)
(: Description: Comments that looks like a function call :)


/south(: test :)

</entry>
<entry key="XQueryComment011">(: Name: XQueryComment011 :)
(: Description: Comments inside a conditional expression :)



if (:test:)(:t2:)(:t3:) (/fs:MyComputer) 
	then "true"
	else "false"

</entry>
<entry key="XQueryComment010">
(: Name: XQueryComment010 :)
(: Description: Comments inside a conditional expression :)
if (: comment :) 
  ( //fs:Folder[1]/fs:FolderName/text() = "Folder00000000000" ) 
then (: this is the then case :) ( true() )
else (: this is the else case :) ( false() )

</entry>
<entry key="surrogates08a">codepoints-to-string((97, 98, 99, 119126, 100, 101, 102))</entry>
<entry key="XQueryComment009">(: Name: XQueryComment009 :)
(: Description: Comments inside a conditional expression :)



if (:test (: yada (: neato :) :) :) (/fs:MyComputer) 
	then (: yada :) "true"
	else "false"
</entry>
<entry key="XQueryComment002">(: Name: XQueryComment002 :)
(: Description: Simple use case for XQuery comments :)




(: This is a comment :)
(//fs:Folder)[1]/fs:File[1]/fs:FileName
</entry>
<entry key="Axes062-2">fn:count(//child::*)</entry>
<entry key="Axes062-1">fn:count(//child::*)</entry>
<entry key="cbcl-cast-nonPositiveInteger-003">xs:nonPositiveInteger("+00")</entry>
<entry key="lessthaneqonanyuri-1">(xs:anyURI("http://www.example/com")) &lt;= (xs:anyURI("http://www.example/com"))</entry>
<entry key="Axes009-3">fn:count(//west/attribute::node())</entry>
<entry key="Axes009-2">fn:count(//west/attribute::node())</entry>
<entry key="Axes009-1">fn:count(//west/attribute::node())</entry>
<entry key="CastAs394">xs:time("13:20:00Z") cast as xs:time</entry>
<entry key="CastAs393">xs:time("13:20:02.123") cast as xs:time</entry>
<entry key="CastAs392">xs:time("13:20:00-05:00") cast as xs:time</entry>
<entry key="CastAs383">xs:time("13:20:00-05:00") cast as xs:string</entry>
<entry key="CastAs382">xs:time("13:20:00-05:00") cast as xs:untypedAtomic</entry>
<entry key="K-FunctionCallExpr-17a">matches(format-time(current-time(), "[H01]:[m01]", (), (), ()), "..:..")</entry>
<entry key="cbcl-castable-unsignedShort-005">"-00" castable as xs:unsignedShort</entry>
<entry key="CastAs377">xs:dateTime("-1999-05-31T13:20:00+14:00") cast as xs:gMonth</entry>
<entry key="cbcl-castable-unsignedShort-004">"-1" castable as xs:unsignedShort</entry>
<entry key="CastAs376">xs:dateTime("1999-05-31T13:20:00") cast as xs:gMonth</entry>
<entry key="cbcl-castable-unsignedShort-003">"65536" castable as xs:unsignedShort</entry>
<entry key="CastAs375">xs:dateTime("-1999-05-31T13:20:00+14:00") cast as xs:gDay</entry>
<entry key="cbcl-castable-unsignedShort-002">-1 castable as xs:unsignedShort</entry>
<entry key="CastAs374">xs:dateTime("1999-05-31T13:20:00") cast as xs:gDay</entry>
<entry key="cbcl-castable-unsignedShort-001">65536 castable as xs:unsignedShort</entry>
<entry key="CastAs373">xs:dateTime("-1999-05-31T13:20:00+14:00") cast as xs:gMonthDay</entry>
<entry key="CastAs372">xs:dateTime("1999-05-31T13:20:00") cast as xs:gMonthDay</entry>
<entry key="CastAs371">xs:dateTime("-1999-05-31T13:20:00+14:00") cast as xs:gYear</entry>
<entry key="CastAs370">xs:dateTime("1999-05-31T13:20:00") cast as xs:gYear</entry>
<entry key="K-FunctionCallExpr-16a">matches(format-time(current-time(), "[H01]:[m01]"), "[0-2][0-9]:[0-5][0-9]")</entry>
<entry key="CastAs369">xs:dateTime("-1999-05-31T13:20:00+14:00") cast as xs:gYearMonth</entry>
<entry key="CastAs368">xs:dateTime("1999-05-31T13:20:00") cast as xs:gYearMonth</entry>
<entry key="CastAs367">xs:dateTime("-1999-05-31T13:20:00+14:00") cast as xs:date</entry>
<entry key="CastAs366">xs:dateTime("1999-05-31T13:20:00") cast as xs:date</entry>
<entry key="CastAs365">xs:dateTime("-1999-05-31T13:20:00+14:00") cast as xs:time</entry>
<entry key="CastAs364">xs:dateTime("1999-05-31T13:20:00") cast as xs:time</entry>
<entry key="CastAs363">xs:dateTime("1999-05-31T13:20:00") cast as xs:dateTime</entry>
<entry key="K-FunctionCallExpr-15a">format-number(3, "0000")</entry>
<entry key="CastAs355">xs:dateTime("-1999-05-31T13:20:00+14:00") cast as xs:string</entry>
<entry key="CastAs354">xs:dateTime("1999-05-31T13:20:00") cast as xs:string</entry>
<entry key="CastAs353">xs:dateTime("-1999-05-31T13:20:00+14:00") cast as xs:untypedAtomic</entry>
<entry key="CastAs352">xs:dateTime("1999-05-31T13:20:00") cast as xs:untypedAtomic</entry>
<entry key="K-SeqExprCast-699">xs:yearMonthDuration("P1Y12M") castable as xs:string</entry>
<entry key="K-SeqExprCast-698">xs:yearMonthDuration("P1Y12M") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="K-SeqExprCast-697">xs:yearMonthDuration("P1Y12M") castable as xs:untypedAtomic</entry>
<entry key="K-SeqExprCast-696">xs:yearMonthDuration("P1Y12M") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="K-SeqExprCast-694">xs:yearMonthDuration(xs:untypedAtomic( "P1Y12M" )) eq xs:yearMonthDuration("P1Y12M")</entry>
<entry key="K-SeqExprCast-692">xs:yearMonthDuration(" P1Y12M ") eq xs:yearMonthDuration(" P1Y12M ")</entry>
<entry key="K-SeqExprCast-691">subsequence(("dummy", 1.1, xs:yearMonthDuration("P1Y12M")), 3, 1) instance of xs:yearMonthDuration</entry>
<entry key="CastAs339">xs:dayTimeDuration("-PT100M") cast as xs:dayTimeDuration</entry>
<entry key="CastAs338">xs:dayTimeDuration("P14D") cast as xs:dayTimeDuration</entry>
<entry key="CastAs337">xs:dayTimeDuration("P3DT10H30M") cast as xs:dayTimeDuration</entry>
<entry key="CastAs336">xs:dayTimeDuration("P3DT10H30M") cast as xs:yearMonthDuration</entry>
<entry key="CastAs335">xs:dayTimeDuration("-PT100M") cast as xs:duration</entry>
<entry key="CastAs334">xs:dayTimeDuration("PT24H") cast as xs:duration</entry>
<entry key="CastAs333">xs:dayTimeDuration("P3DT10H30M") cast as xs:duration</entry>
<entry key="K-SeqExprCast-687">not(xs:duration("P1Y2M3DT10H30M") castable as xs:QName)</entry>
<entry key="K-SeqExprCast-685">not(xs:duration("P1Y2M3DT10H30M") castable as xs:anyURI)</entry>
<entry key="K-SeqExprCast-683">not(xs:duration("P1Y2M3DT10H30M") castable as xs:hexBinary)</entry>
<entry key="K-SeqExprCast-681">not(xs:duration("P1Y2M3DT10H30M") castable as xs:base64Binary)</entry>
<entry key="CastAs328">xs:dayTimeDuration("-PT100M") cast as xs:string</entry>
<entry key="CastAs327">xs:dayTimeDuration("P3DT10H30M") cast as xs:string</entry>
<entry key="CastAs326">xs:dayTimeDuration("-PT100M") cast as xs:untypedAtomic</entry>
<entry key="CastAs325">xs:dayTimeDuration("P3DT10H30M") cast as xs:untypedAtomic</entry>
<entry key="K-SeqExprCast-679">not(xs:duration("P1Y2M3DT10H30M") castable as xs:boolean)</entry>
<entry key="K-SeqExprCast-677">not(xs:duration("P1Y2M3DT10H30M") castable as xs:gMonth)</entry>
<entry key="K-SeqExprCast-675">not(xs:duration("P1Y2M3DT10H30M") castable as xs:gDay)</entry>
<entry key="K-SeqExprCast-673">not(xs:duration("P1Y2M3DT10H30M") castable as xs:gMonthDay)</entry>
<entry key="K-SeqExprCast-671">not(xs:duration("P1Y2M3DT10H30M") castable as xs:gYear)</entry>
<entry key="CastAs312">xs:yearMonthDuration("P1Y2M") cast as xs:dayTimeDuration</entry>
<entry key="CastAs311">xs:yearMonthDuration("-P21M") cast as xs:yearMonthDuration</entry>
<entry key="Axes079-4">fn:count(//center//node())</entry>
<entry key="CastAs310">xs:yearMonthDuration("P1Y2M") cast as xs:yearMonthDuration</entry>
<entry key="Axes079-3">fn:count(//center//node())</entry>
<entry key="Axes079-2">fn:count(//center//node())</entry>
<entry key="Axes079-1">fn:count(//center//node())</entry>
<entry key="K-SeqExprCast-669">not(xs:duration("P1Y2M3DT10H30M") castable as xs:gYearMonth)</entry>
<entry key="K-SeqExprCast-667">not(xs:duration("P1Y2M3DT10H30M") castable as xs:date)</entry>
<entry key="K-SeqExprCast-665">not(xs:duration("P1Y2M3DT10H30M") castable as xs:time)</entry>
<entry key="K-SeqExprCast-663">not(xs:duration("P1Y2M3DT10H30M") castable as xs:dateTime)</entry>
<entry key="K-SeqExprCast-661">xs:duration("P1Y2M3DT10H30M") castable as xs:dayTimeDuration</entry>
<entry key="K-SeqExprCast-660">xs:duration("P1Y2M3DT10H30M") cast as xs:dayTimeDuration ne xs:dayTimeDuration("P3DT2H")</entry>
<entry key="CastAs309">xs:yearMonthDuration("P1Y2M") cast as xs:duration</entry>
<entry key="CastAs304">xs:yearMonthDuration("P1Y2M") cast as xs:string</entry>
<entry key="CastAs303">xs:yearMonthDuration("P1Y2M") cast as xs:untypedAtomic</entry>
<entry key="K-SeqExprCast-1099">not(xs:gMonthDay("--11-13") castable as xs:hexBinary)</entry>
<entry key="K-SeqExprCast-1097">not(xs:gMonthDay("--11-13") castable as xs:base64Binary)</entry>
<entry key="K-SeqExprCast-1095">not(xs:gMonthDay("--11-13") castable as xs:boolean)</entry>
<entry key="K-SeqExprCast-1093">not(xs:gMonthDay("--11-13") castable as xs:gMonth)</entry>
<entry key="Axes068-3">fn:count(//attribute::*)</entry>
<entry key="Axes068-2">fn:count(//attribute::*)</entry>
<entry key="K-SeqExprCast-1091">not(xs:gMonthDay("--11-13") castable as xs:gDay)</entry>
<entry key="Axes068-1">fn:count(//attribute::*)</entry>
<entry key="K-SeqExprCast-659">xs:duration("P1Y2M3DT10H30M") castable as xs:yearMonthDuration</entry>
<entry key="K-SeqExprCast-658">xs:duration("P1Y2M3DT10H30M") cast as xs:yearMonthDuration ne xs:yearMonthDuration("P1Y12M")</entry>
<entry key="K-SeqExprCast-657">xs:duration("P1Y2M3DT10H30M") castable as xs:duration</entry>
<entry key="K-SeqExprCast-656">xs:duration("P1Y2M3DT10H30M") cast as xs:duration eq xs:duration("P1Y2M3DT10H30M")</entry>
<entry key="K-SeqExprCast-655">not(xs:duration("P1Y2M3DT10H30M") castable as xs:integer)</entry>
<entry key="K-SeqExprCast-653">not(xs:duration("P1Y2M3DT10H30M") castable as xs:decimal)</entry>
<entry key="K-SeqExprCast-651">not(xs:duration("P1Y2M3DT10H30M") castable as xs:double)</entry>
<entry key="K-SeqExprCast-1089">xs:gMonthDay("--11-13") castable as xs:gMonthDay</entry>
<entry key="K-SeqExprCast-1088">xs:gMonthDay("--11-13") cast as xs:gMonthDay eq xs:gMonthDay("--11-13")</entry>
<entry key="K2-SeqExprCast-399">xs:untypedAtomic(xs:ID("foo"))</entry>
<entry key="K-SeqExprCast-1087">not(xs:gMonthDay("--11-13") castable as xs:gYear)</entry>
<entry key="K2-SeqExprCast-398">xs:untypedAtomic(xs:NCName("foo"))</entry>
<entry key="K2-SeqExprCast-397">xs:untypedAtomic(xs:Name("foo"))</entry>
<entry key="K-SeqExprCast-1085">not(xs:gMonthDay("--11-13") castable as xs:gYearMonth)</entry>
<entry key="K2-SeqExprCast-396">xs:untypedAtomic(xs:NMTOKEN("foo"))</entry>
<entry key="K2-SeqExprCast-395">xs:untypedAtomic(xs:language("foo"))</entry>
<entry key="K-SeqExprCast-1083">not(xs:gMonthDay("--11-13") castable as xs:date)</entry>
<entry key="K2-SeqExprCast-394">xs:untypedAtomic(xs:token("foo"))</entry>
<entry key="K2-SeqExprCast-393">xs:untypedAtomic(xs:normalizedString("foo"))</entry>
<entry key="K-SeqExprCast-1081">not(xs:gMonthDay("--11-13") castable as xs:time)</entry>
<entry key="K2-SeqExprCast-392">xs:untypedAtomic(xs:unsignedShort(3))</entry>
<entry key="K-SeqExprCast-649">not(xs:duration("P1Y2M3DT10H30M") castable as xs:float)</entry>
<entry key="K2-SeqExprCast-391">xs:untypedAtomic(xs:unsignedLong(3))</entry>
<entry key="K2-SeqExprCast-390">xs:untypedAtomic(xs:unsignedInt(3))</entry>
<entry key="K-SeqExprCast-647">xs:duration("P1Y2M3DT10H30M") castable as xs:string</entry>
<entry key="Axes057-4">fn:count(/descendant::south)</entry>
<entry key="K-SeqExprCast-646">xs:duration("P1Y2M3DT10H30M") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="Axes057-3">fn:count(/descendant::south)</entry>
<entry key="K-SeqExprCast-645">xs:duration("P1Y2M3DT10H30M") castable as xs:untypedAtomic</entry>
<entry key="Axes057-2">fn:count(/descendant::south)</entry>
<entry key="K-SeqExprCast-644">xs:duration("P1Y2M3DT10H30M") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="Axes057-1">fn:count(/descendant::south)</entry>
<entry key="K-SeqExprCast-642">xs:duration(xs:untypedAtomic( "P1Y2M3DT10H30M" )) eq xs:duration("P1Y2M3DT10H30M")</entry>
<entry key="K-SeqExprCast-640">xs:duration(" P1Y2M3DT10H30M ") eq xs:duration(" P1Y2M3DT10H30M ")</entry>
<entry key="cbcl-castable-gYear-003">"-0000" castable as xs:gYear</entry>
<entry key="cbcl-castable-gYear-002">"0000" castable as xs:gYear</entry>
<entry key="K-SeqExprCast-1079">not(xs:gMonthDay("--11-13") castable as xs:dateTime)</entry>
<entry key="cbcl-castable-gYear-001">"99999999999999999999999999999" castable as xs:gYear</entry>
<entry key="ancestor-9">exactly-one(/works/employee[1]/ancestor::works) &gt;&gt; exactly-one(/works/employee[1]/ancestor::works)</entry>
<entry key="K2-SeqExprCast-389">xs:untypedAtomic(xs:unsignedInt(3))</entry>
<entry key="ancestor-8">exactly-one(/works/employee[1]) &gt;&gt; exactly-one(/works/employee[1]/ancestor::works)</entry>
<entry key="K-SeqExprCast-1077">not(xs:gMonthDay("--11-13") castable as xs:dayTimeDuration)</entry>
<entry key="K2-SeqExprCast-388">xs:untypedAtomic(xs:unsignedByte(3))</entry>
<entry key="ancestor-7">exactly-one(/works/employee[1]/ancestor::works) &lt;&lt; exactly-one(/works/employee[1])</entry>
<entry key="K2-SeqExprCast-387">xs:untypedAtomic(xs:short(3))</entry>
<entry key="ancestor-6">exactly-one(/works/employee[1]/ancestor::works) &lt;&lt; exactly-one(/works/employee[1]/ancestor::works)</entry>
<entry key="K-SeqExprCast-1075">not(xs:gMonthDay("--11-13") castable as xs:yearMonthDuration)</entry>
<entry key="K2-SeqExprCast-386">xs:untypedAtomic(xs:nonPositiveInteger(0))</entry>
<entry key="ancestor-5">exactly-one(/works/employee[1]/ancestor::works) &lt;&lt; exactly-one(/works/employee[1])</entry>
<entry key="K2-SeqExprCast-385">xs:untypedAtomic(xs:nonNegativeInteger(3))</entry>
<entry key="ancestor-4">exactly-one(/works/employee[1]/ancestor::works) is exactly-one(/works/employee[1])</entry>
<entry key="K-SeqExprCast-1073">not(xs:gMonthDay("--11-13") castable as xs:duration)</entry>
<entry key="K2-SeqExprCast-384">xs:untypedAtomic(xs:negativeInteger(-3))</entry>
<entry key="ancestor-3">exactly-one(/works/employee[1]/ancestor::works) is exactly-one(/works)</entry>
<entry key="K2-SeqExprCast-383">xs:untypedAtomic(xs:long(3))</entry>
<entry key="ancestor-2">fn:count(/works/employee[1]/ancestor::noSuchNode)</entry>
<entry key="K-SeqExprCast-1071">not(xs:gMonthDay("--11-13") castable as xs:integer)</entry>
<entry key="K2-SeqExprCast-382">xs:untypedAtomic(xs:int(3))</entry>
<entry key="K-SeqExprCast-639">subsequence(("dummy", 1.1, xs:duration("P1Y2M3DT10H30M")), 3, 1) instance of xs:duration</entry>
<entry key="K2-SeqExprCast-381">xs:untypedAtomic(xs:byte(3))</entry>
<entry key="K2-SeqExprCast-380">xs:string(xs:unsignedShort(3))</entry>
<entry key="K-SeqExprCast-635">not(xs:integer("6789") castable as xs:QName)</entry>
<entry key="K-SeqExprCast-633">not(xs:integer("6789") castable as xs:anyURI)</entry>
<entry key="cbcl-some-001">some $x in (1 to 10)[. div 2 = 11] satisfies true()</entry>
<entry key="K-SeqExprCast-631">not(xs:integer("6789") castable as xs:hexBinary)</entry>
<entry key="treat-as-9">let $var := xs:date("2000-01-01+05:00") return fn:year-from-date($var treat as xs:date)</entry>
<entry key="treat-as-8">let $var := xs:boolean(fn:true()) return fn:not($var treat as xs:boolean)</entry>
<entry key="treat-as-7">let $var := xs:double(100) return fn:abs($var treat as xs:double)</entry>
<entry key="Axes046-2">fn:count(/child::node())</entry>
<entry key="treat-as-6">let $var := xs:float(100) return fn:abs($var treat as xs:float)</entry>
<entry key="Axes046-1">fn:count(/child::node())</entry>
<entry key="treat-as-5">let $var := xs:decimal(100) return fn:abs($var cast as xs:integer treat as xs:integer)</entry>
<entry key="treat-as-4">let $var := 100 return fn:abs($var treat as xs:decimal)</entry>
<entry key="treat-as-3">let $var := 100 return ($var treat as xs:integer) div 2</entry>
<entry key="treat-as-2">let $var := "String 1" return fn:concat($var treat as xs:string,"String 2")</entry>
<entry key="K-SeqExprCast-1069">not(xs:gMonthDay("--11-13") castable as xs:decimal)</entry>
<entry key="K2-SeqExprCast-379">xs:string(xs:unsignedLong(3))</entry>
<entry key="K-SeqExprCast-1067">not(xs:gMonthDay("--11-13") castable as xs:double)</entry>
<entry key="K2-SeqExprCast-378">xs:string(xs:unsignedInt(3))</entry>
<entry key="K2-SeqExprCast-377">xs:string(xs:unsignedInt(3))</entry>
<entry key="K-SeqExprCast-1065">not(xs:gMonthDay("--11-13") castable as xs:float)</entry>
<entry key="K2-SeqExprCast-376">xs:string(xs:unsignedByte(3))</entry>
<entry key="K2-SeqExprCast-375">xs:string(xs:short(3))</entry>
<entry key="K-SeqExprCast-1063">xs:gMonthDay("--11-13") castable as xs:string</entry>
<entry key="K2-SeqExprCast-374">xs:string(xs:nonPositiveInteger(0))</entry>
<entry key="K-SeqExprCast-1062">xs:gMonthDay("--11-13") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="K2-SeqExprCast-373">xs:string(xs:nonNegativeInteger(3))</entry>
<entry key="K-SeqExprCast-1061">xs:gMonthDay("--11-13") castable as xs:untypedAtomic</entry>
<entry key="K2-SeqExprCast-372">xs:string(xs:negativeInteger(-3))</entry>
<entry key="K-SeqExprCast-1060">xs:gMonthDay("--11-13") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="K-SeqExprCast-629">not(xs:integer("6789") castable as xs:base64Binary)</entry>
<entry key="K2-SeqExprCast-371">xs:string(xs:long(3))</entry>
<entry key="K2-SeqExprCast-370">xs:string(xs:int(3))</entry>
<entry key="K-SeqExprCast-627">xs:integer("6789") castable as xs:boolean</entry>
<entry key="K-SeqExprCast-626">xs:integer("6789") cast as xs:boolean eq xs:boolean("true")</entry>
<entry key="K-SeqExprCast-625">not(xs:integer("6789") castable as xs:gMonth)</entry>
<entry key="CastableAs399">xs:time("13:20:00-05:00") castable as xs:gDay</entry>
<entry key="CastableAs398">xs:time("13:20:00-05:00") castable as xs:gMonthDay</entry>
<entry key="K-SeqExprCast-623">not(xs:integer("6789") castable as xs:gDay)</entry>
<entry key="CastableAs397">xs:time("13:20:00-05:00") castable as xs:gYear</entry>
<entry key="CastableAs396">xs:time("13:20:00-05:00") castable as xs:gYearMonth</entry>
<entry key="K-SeqExprCast-621">not(xs:integer("6789") castable as xs:gMonthDay)</entry>
<entry key="CastableAs395">xs:time("13:20:00-05:00") castable as xs:date</entry>
<entry key="CastableAs394">xs:time("13:20:00Z") castable as xs:time</entry>
<entry key="CastableAs393">xs:time("13:20:02.123") castable as xs:time</entry>
<entry key="CastableAs392">xs:time("13:20:00-05:00") castable as xs:time</entry>
<entry key="CastableAs391">xs:time("13:20:00-05:00") castable as xs:dateTime</entry>
<entry key="CastableAs390">xs:time("13:20:00-05:00") castable as xs:dayTimeDuration</entry>
<entry key="Axes035-4">fn:count(//center/descendant-or-self::south)</entry>
<entry key="Axes035-3">fn:count(//center/descendant-or-self::south)</entry>
<entry key="Axes035-2">fn:count(//center/descendant-or-self::south)</entry>
<entry key="Axes035-1">fn:count(//center/descendant-or-self::south)</entry>
<entry key="K-SeqExprCast-1058">xs:gMonthDay(xs:untypedAtomic( "--11-13" )) eq xs:gMonthDay("--11-13")</entry>
<entry key="K2-SeqExprCast-369">xs:string(xs:byte(3))</entry>
<entry key="K2-SeqExprCast-368">xs:decimal(xs:unsignedShort(3))</entry>
<entry key="K-SeqExprCast-1056">xs:gMonthDay(" --11-13 ") eq xs:gMonthDay(" --11-13 ")</entry>
<entry key="cbcl-cast-name-001">xs:NCName('NCName') cast as xs:Name</entry>
<entry key="K2-SeqExprCast-367">xs:decimal(xs:unsignedLong(3))</entry>
<entry key="K-SeqExprCast-1055">subsequence(("dummy", 1.1, xs:gMonthDay("--11-13")), 3, 1) instance of xs:gMonthDay</entry>
<entry key="K2-SeqExprCast-366">xs:decimal(xs:unsignedInt(3))</entry>
<entry key="K2-SeqExprCast-365">xs:decimal(xs:unsignedInt(3))</entry>
<entry key="K2-SeqExprCast-364">xs:decimal(xs:unsignedByte(3))</entry>
<entry key="K2-SeqExprCast-363">xs:decimal(xs:short(3))</entry>
<entry key="K-SeqExprCast-1051">not(xs:gYear("1999") castable as xs:QName)</entry>
<entry key="K2-SeqExprCast-362">xs:decimal(xs:nonPositiveInteger(0))</entry>
<entry key="K-SeqExprCast-619">not(xs:integer("6789") castable as xs:gYear)</entry>
<entry key="K2-SeqExprCast-361">xs:decimal(xs:nonNegativeInteger(3))</entry>
<entry key="K2-SeqExprCast-360">xs:decimal(xs:negativeInteger(-3))</entry>
<entry key="K-SeqExprCast-617">not(xs:integer("6789") castable as xs:gYearMonth)</entry>
<entry key="K-SeqExprCast-615">not(xs:integer("6789") castable as xs:date)</entry>
<entry key="CastableAs389">xs:time("13:20:00-05:00") castable as xs:yearMonthDuration</entry>
<entry key="CastableAs388">xs:time("13:20:00-05:00") castable as xs:duration</entry>
<entry key="K-SeqExprCast-613">not(xs:integer("6789") castable as xs:time)</entry>
<entry key="CastableAs387">xs:time("13:20:00-05:00") castable as xs:integer</entry>
<entry key="CastableAs386">xs:time("13:20:00-05:00") castable as xs:decimal</entry>
<entry key="K-SeqExprCast-611">not(xs:integer("6789") castable as xs:dateTime)</entry>
<entry key="CastableAs385">xs:time("13:20:00-05:00") castable as xs:double</entry>
<entry key="CastableAs384">xs:time("13:20:00-05:00") castable as xs:float</entry>
<entry key="CastableAs383">xs:time("13:20:00-05:00") castable as xs:string</entry>
<entry key="CastableAs382">xs:time("13:20:00-05:00") castable as xs:untypedAtomic</entry>
<entry key="CastableAs381">xs:dateTime("1999-05-31T13:20:00") castable as xs:anyURI</entry>
<entry key="CastableAs380">xs:dateTime("1999-05-31T13:20:00") castable as xs:hexBinary</entry>
<entry key="K-SeqExprCast-1049">not(xs:gYear("1999") castable as xs:anyURI)</entry>
<entry key="K2-SeqExprCast-359">xs:decimal(xs:long(3))</entry>
<entry key="K-SeqExprCast-1047">not(xs:gYear("1999") castable as xs:hexBinary)</entry>
<entry key="K2-SeqExprCast-358">xs:decimal(xs:int(3))</entry>
<entry key="K2-SeqExprCast-357">xs:decimal(xs:byte(3))</entry>
<entry key="K-SeqExprCast-1045">not(xs:gYear("1999") castable as xs:base64Binary)</entry>
<entry key="K2-SeqExprCast-356">xs:float(xs:unsignedShort(3))</entry>
<entry key="K2-SeqExprCast-355">xs:float(xs:unsignedLong(3))</entry>
<entry key="K-SeqExprCast-1043">not(xs:gYear("1999") castable as xs:boolean)</entry>
<entry key="K2-SeqExprCast-354">xs:float(xs:unsignedInt(3))</entry>
<entry key="K2-SeqExprCast-353">xs:float(xs:unsignedInt(3))</entry>
<entry key="K-SeqExprCast-1041">not(xs:gYear("1999") castable as xs:gMonth)</entry>
<entry key="K2-SeqExprCast-352">xs:float(xs:unsignedByte(3))</entry>
<entry key="K-SeqExprCast-609">not(xs:integer("6789") castable as xs:dayTimeDuration)</entry>
<entry key="K2-SeqExprCast-351">xs:float(xs:short(3))</entry>
<entry key="K2-SeqExprCast-350">xs:float(xs:nonPositiveInteger(0))</entry>
<entry key="K-SeqExprCast-607">not(xs:integer("6789") castable as xs:yearMonthDuration)</entry>
<entry key="K-SeqExprCast-605">not(xs:integer("6789") castable as xs:duration)</entry>
<entry key="CastableAs379">xs:dateTime("1999-05-31T13:20:00") castable as xs:base64Binary</entry>
<entry key="CastableAs378">xs:dateTime("1999-05-31T13:20:00") castable as xs:boolean</entry>
<entry key="K-SeqExprCast-603">xs:integer("6789") castable as xs:integer</entry>
<entry key="CastableAs377">xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:gMonth</entry>
<entry key="K-SeqExprCast-602">xs:integer("6789") cast as xs:integer eq xs:integer("6789")</entry>
<entry key="CastableAs376">xs:dateTime("1999-05-31T13:20:00") castable as xs:gMonth</entry>
<entry key="K-SeqExprCast-601">xs:integer("6789") castable as xs:decimal</entry>
<entry key="CastableAs375">xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:gDay</entry>
<entry key="K-SeqExprCast-600">xs:integer("6789") cast as xs:decimal ne xs:decimal("10.01")</entry>
<entry key="CastableAs374">xs:dateTime("1999-05-31T13:20:00") castable as xs:gDay</entry>
<entry key="CastableAs373">xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:gMonthDay</entry>
<entry key="CastableAs372">xs:dateTime("1999-05-31T13:20:00") castable as xs:gMonthDay</entry>
<entry key="CastableAs371">xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:gYear</entry>
<entry key="generalexpression499">() &gt;= (10000,50000)</entry>
<entry key="CastableAs370">xs:dateTime("1999-05-31T13:20:00") castable as xs:gYear</entry>
<entry key="generalexpression498">() &gt;= (50000)</entry>
<entry key="generalexpression497">() &gt;= 10000</entry>
<entry key="generalexpression496">() &gt;= ()</entry>
<entry key="generalexpression494">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &gt; ($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1])</entry>
<entry key="generalexpression493">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &gt; ($works/works/employee[1]/hours[1])</entry>
<entry key="K-SeqExprCast-1039">not(xs:gYear("1999") castable as xs:gDay)</entry>
<entry key="K2-SeqExprCast-349">xs:float(xs:nonNegativeInteger(3))</entry>
<entry key="K-SeqExprCast-1037">not(xs:gYear("1999") castable as xs:gMonthDay)</entry>
<entry key="K2-SeqExprCast-348">xs:float(xs:negativeInteger(-3))</entry>
<entry key="K2-SeqExprCast-347">xs:float(xs:long(3))</entry>
<entry key="K-SeqExprCast-1035">xs:gYear("1999") castable as xs:gYear</entry>
<entry key="K2-SeqExprCast-346">xs:float(xs:int(3))</entry>
<entry key="K-SeqExprCast-1034">xs:gYear("1999") cast as xs:gYear eq xs:gYear("1999")</entry>
<entry key="K2-SeqExprCast-345">xs:float(xs:byte(3))</entry>
<entry key="K-SeqExprCast-1033">not(xs:gYear("1999") castable as xs:gYearMonth)</entry>
<entry key="K2-SeqExprCast-344">xs:double(xs:unsignedShort(3))</entry>
<entry key="K2-SeqExprCast-343">xs:double(xs:unsignedLong(3))</entry>
<entry key="Axes013-1">fn:count(//center/parent::*)</entry>
<entry key="K-SeqExprCast-1031">not(xs:gYear("1999") castable as xs:date)</entry>
<entry key="K2-SeqExprCast-342">xs:double(xs:unsignedInt(3))</entry>
<entry key="K2-SeqExprCast-341">xs:double(xs:unsignedInt(3))</entry>
<entry key="K2-SeqExprCast-340">xs:double(xs:unsignedByte(3))</entry>
<entry key="CastableAs369">xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:gYearMonth</entry>
<entry key="CastableAs368">xs:dateTime("1999-05-31T13:20:00") castable as xs:gYearMonth</entry>
<entry key="CastableAs367">xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:date</entry>
<entry key="CastableAs366">xs:dateTime("1999-05-31T13:20:00") castable as xs:date</entry>
<entry key="CastableAs365">xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:time</entry>
<entry key="PathExpr-9p">fn:count(.[/&lt;a div 3])</entry>
<entry key="CastableAs364">xs:dateTime("1999-05-31T13:20:00") castable as xs:time</entry>
<entry key="CastableAs363">xs:dateTime("1999-05-31T13:20:00") castable as xs:dateTime</entry>
<entry key="CastableAs362">xs:dateTime("1999-05-31T13:20:00") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs361">xs:dateTime("1999-05-31T13:20:00") castable as xs:yearMonthDuration</entry>
<entry key="generalexpression489">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &gt; (10000,50000)</entry>
<entry key="CastableAs360">xs:dateTime("1999-05-31T13:20:00") castable as xs:duration</entry>
<entry key="generalexpression488">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &gt; (50000)</entry>
<entry key="generalexpression487">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &gt; 10000</entry>
<entry key="generalexpression486">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &gt; ()</entry>
<entry key="generalexpression485">($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1]) &gt; ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression484">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &gt; (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression483">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &gt; (/works/employee[1]/hours[1])</entry>
<entry key="K-SeqExprCast-1029">not(xs:gYear("1999") castable as xs:time)</entry>
<entry key="K2-SeqExprCast-339">xs:double(xs:short(3))</entry>
<entry key="K-SeqExprCast-1027">not(xs:gYear("1999") castable as xs:dateTime)</entry>
<entry key="K2-SeqExprCast-338">xs:double(xs:nonPositiveInteger(0))</entry>
<entry key="K2-SeqExprCast-337">xs:double(xs:nonNegativeInteger(3))</entry>
<entry key="K-SeqExprCast-1025">not(xs:gYear("1999") castable as xs:dayTimeDuration)</entry>
<entry key="K2-SeqExprCast-336">xs:double(xs:negativeInteger(-3))</entry>
<entry key="K2-SeqExprCast-335">xs:double(xs:long(3))</entry>
<entry key="K-SeqExprCast-1023">not(xs:gYear("1999") castable as xs:yearMonthDuration)</entry>
<entry key="K2-SeqExprCast-334">xs:double(xs:int(3))</entry>
<entry key="K2-SeqExprCast-333">xs:double(xs:byte(3))</entry>
<entry key="K-SeqExprCast-1021">not(xs:gYear("1999") castable as xs:duration)</entry>
<entry key="Axes002-4">fn:count(//center/child::south-east)</entry>
<entry key="FunctionCall-026">function($in as xs:string*) as xs:string {string-join($in, ';')}((xs:anyURI('http://one.com/'), xs:anyURI('http://two.com/')))</entry>
<entry key="Axes002-3">fn:count(//center/child::south-east)</entry>
<entry key="FunctionCall-025">function($in as xs:double*) as xs:double {sum($in, 0.0e0)}((1, xs:float(0.25), xs:decimal(0.5)))</entry>
<entry key="Axes002-2">fn:count(//center/child::south-east)</entry>
<entry key="Axes002-1">fn:count(//center/child::south-east)</entry>
<entry key="CastableAs359">xs:dateTime("1999-05-31T13:20:00") castable as xs:integer</entry>
<entry key="CastableAs358">xs:dateTime("1999-05-31T13:20:00") castable as xs:decimal</entry>
<entry key="CastableAs357">xs:dateTime("2000-01-16T00:00:00Z") castable as xs:float</entry>
<entry key="CastableAs356">xs:dateTime("1999-05-31T13:20:00") castable as xs:float</entry>
<entry key="CastableAs355">xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:string</entry>
<entry key="PathExpr-8p">fn:count(.[/ &lt; /b])</entry>
<entry key="CastableAs354">xs:dateTime("1999-05-31T13:20:00") castable as xs:string</entry>
<entry key="CastableAs353">xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:untypedAtomic</entry>
<entry key="CastableAs352">xs:dateTime("1999-05-31T13:20:00") castable as xs:untypedAtomic</entry>
<entry key="CastableAs351">xs:dayTimeDuration("P3DT10H30M") castable as xs:anyURI</entry>
<entry key="generalexpression479">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &gt; (10000,50000)</entry>
<entry key="CastableAs350">xs:dayTimeDuration("P3DT10H30M") castable as xs:hexBinary</entry>
<entry key="generalexpression478">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &gt; (50000)</entry>
<entry key="generalexpression477">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &gt; 10000</entry>
<entry key="generalexpression476">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &gt; ()</entry>
<entry key="generalexpression475">($works/works/employee[1]/hours[1]) &gt; ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression474">(/works/employee[1]/hours[1]) &gt; (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression473">(/works/employee[1]/hours[1]) &gt; (/works/employee[1]/hours[1])</entry>
<entry key="K-SeqExprCast-1019">not(xs:gYear("1999") castable as xs:integer)</entry>
<entry key="K-SeqExprCast-1017">not(xs:gYear("1999") castable as xs:decimal)</entry>
<entry key="K-SeqExprCast-1015">not(xs:gYear("1999") castable as xs:double)</entry>
<entry key="K-SeqExprCast-1013">not(xs:gYear("1999") castable as xs:float)</entry>
<entry key="K-SeqExprCast-1011">xs:gYear("1999") castable as xs:string</entry>
<entry key="K-SeqExprCast-1010">xs:gYear("1999") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="CastableAs349">xs:dayTimeDuration("P3DT10H30M") castable as xs:base64Binary</entry>
<entry key="CastableAs348">xs:dayTimeDuration("P3DT10H30M") castable as xs:boolean</entry>
<entry key="sequence-type-9">(2) castable as xs:integer?</entry>
<entry key="cbcl-cast-nmtoken-001b">for $string in ("&#13;
	 foobar 
&#13;	" cast as xs:NMTOKEN) return not(contains($string, '	') or contains($string, '
') or contains($string, '&#13;') or string-length($string) ne 6)</entry>
<entry key="CastableAs347">xs:dayTimeDuration("P3DT10H30M") castable as xs:gMonth</entry>
<entry key="sequence-type-8">(1,2) instance of xs:integer+</entry>
<entry key="FunctionCall-011">codepoints-to-string(xs:NMTOKENS('48 49 50 51')!xs:untypedAtomic(.))</entry>
<entry key="CastableAs346">xs:dayTimeDuration("P3DT10H30M") castable as xs:gDay</entry>
<entry key="sequence-type-7">(1,2) instance of xs:integer?</entry>
<entry key="FunctionCall-010">function($in as xs:decimal*) as xs:decimal {sum($in, 0.0)}(xs:NMTOKENS('1 1.2 1.3 1.4')!xs:untypedAtomic(.))</entry>
<entry key="CastableAs345">xs:dayTimeDuration("P3DT10H30M") castable as xs:gMonthDay</entry>
<entry key="sequence-type-6">(1) instance of xs:integer?</entry>
<entry key="PathExpr-7p">fn:count(.[/ &lt; a])</entry>
<entry key="CastableAs344">xs:dayTimeDuration("P3DT10H30M") castable as xs:gYear</entry>
<entry key="sequence-type-5">("ab","cde","fgh") instance of xs:integer*</entry>
<entry key="CastableAs343">xs:dayTimeDuration("P3DT10H30M") castable as xs:gYearMonth</entry>
<entry key="sequence-type-4">("ab","cde","fgh") instance of xs:string*</entry>
<entry key="CastableAs342">xs:dayTimeDuration("P3DT10H30M") castable as xs:date</entry>
<entry key="sequence-type-3">(1.1,3.2,4.5) instance of xs:decimal*</entry>
<entry key="CastableAs341">xs:dayTimeDuration("P3DT10H30M") castable as xs:time</entry>
<entry key="sequence-type-2">(1E3,2E3,3E3) instance of xs:double*</entry>
<entry key="generalexpression469">(/works/employee[1]/hours[1]) &gt; (10000,50000)</entry>
<entry key="CastableAs340">xs:dayTimeDuration("P3DT10H30M") castable as xs:dateTime</entry>
<entry key="sequence-type-1">(1,2,3) instance of xs:integer*</entry>
<entry key="generalexpression468">(/works/employee[1]/hours[1]) &gt; (50000)</entry>
<entry key="generalexpression467">(/works/employee[1]/hours[1]) &gt; 10000</entry>
<entry key="generalexpression466">(/works/employee[1]/hours[1]) &gt; ()</entry>
<entry key="K-SeqExprCast-1009">xs:gYear("1999") castable as xs:untypedAtomic</entry>
<entry key="K-SeqExprCast-1008">xs:gYear("1999") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="K-SeqExprCast-1006">xs:gYear(xs:untypedAtomic( "1999" )) eq xs:gYear("1999")</entry>
<entry key="K-SeqExprCast-1004">xs:gYear(" 1999 ") eq xs:gYear(" 1999 ")</entry>
<entry key="K-SeqExprCast-1003">subsequence(("dummy", 1.1, xs:gYear("1999")), 3, 1) instance of xs:gYear</entry>
<entry key="CastableAs339">xs:dayTimeDuration("-PT100M") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs338">xs:dayTimeDuration("P14D") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs337">xs:dayTimeDuration("P3DT10H30M") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs336">xs:dayTimeDuration("P3DT10H30M") castable as xs:yearMonthDuration</entry>
<entry key="CastableAs335">xs:dayTimeDuration("-PT100M") castable as xs:duration</entry>
<entry key="CastableAs334">xs:dayTimeDuration("PT24H") castable as xs:duration</entry>
<entry key="CastableAs333">xs:dayTimeDuration("P3DT10H30M") castable as xs:duration</entry>
<entry key="CastableAs332">xs:dayTimeDuration("P3DT10H30M") castable as xs:integer</entry>
<entry key="CastableAs331">xs:dayTimeDuration("P3DT10H30M") castable as xs:decimal</entry>
<entry key="CastableAs330">xs:dayTimeDuration("P3DT10H30M") castable as xs:double</entry>
<entry key="CastableAs329">xs:dayTimeDuration("P3DT10H30M") castable as xs:float</entry>
<entry key="CastableAs328">xs:dayTimeDuration("-PT100M") castable as xs:string</entry>
<entry key="CastableAs327">xs:dayTimeDuration("P3DT10H30M") castable as xs:string</entry>
<entry key="CastableAs326">xs:dayTimeDuration("-PT100M") castable as xs:untypedAtomic</entry>
<entry key="CastableAs325">xs:dayTimeDuration("P3DT10H30M") castable as xs:untypedAtomic</entry>
<entry key="PathExpr-5p">fn:count(.[/ &lt; 5])</entry>
<entry key="CastableAs324">xs:yearMonthDuration("P1Y2M") castable as xs:anyURI</entry>
<entry key="CastableAs323">xs:yearMonthDuration("P1Y2M") castable as xs:hexBinary</entry>
<entry key="CastableAs322">xs:yearMonthDuration("P1Y2M") castable as xs:base64Binary</entry>
<entry key="CastableAs321">xs:yearMonthDuration("P1Y2M") castable as xs:boolean</entry>
<entry key="CastableAs320">xs:yearMonthDuration("P1Y2M") castable as xs:gMonth</entry>
<entry key="CastableAs319">xs:yearMonthDuration("P1Y2M") castable as xs:gDay</entry>
<entry key="CastableAs318">xs:yearMonthDuration("P1Y2M") castable as xs:gMonthDay</entry>
<entry key="CastableAs317">xs:yearMonthDuration("P1Y2M") castable as xs:gYear</entry>
<entry key="CastableAs316">xs:yearMonthDuration("P1Y2M") castable as xs:gYearMonth</entry>
<entry key="CastableAs315">xs:yearMonthDuration("P1Y2M") castable as xs:date</entry>
<entry key="CastableAs314">xs:yearMonthDuration("P1Y2M") castable as xs:time</entry>
<entry key="CastableAs313">xs:yearMonthDuration("P1Y2M") castable as xs:dateTime</entry>
<entry key="CastableAs312">xs:yearMonthDuration("P1Y2M") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs311">xs:yearMonthDuration("-P21M") castable as xs:yearMonthDuration</entry>
<entry key="CastableAs310">xs:yearMonthDuration("P1Y2M") castable as xs:yearMonthDuration</entry>
<entry key="generalexpression435">(10000,50000) &gt; ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression434">(10000,50000) &gt; (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression433">(10000,50000) &gt; (/works/employee[1]/hours[1])</entry>
<entry key="CastableAs309">xs:yearMonthDuration("P1Y2M") castable as xs:duration</entry>
<entry key="CastableAs308">xs:yearMonthDuration("P1Y2M") castable as xs:integer</entry>
<entry key="CastableAs307">xs:yearMonthDuration("P1Y2M") castable as xs:decimal</entry>
<entry key="CastableAs306">xs:yearMonthDuration("P1Y2M") castable as xs:double</entry>
<entry key="CastableAs305">xs:yearMonthDuration("P1Y2M") castable as xs:float</entry>
<entry key="CastableAs304">xs:yearMonthDuration("P1Y2M") castable as xs:string</entry>
<entry key="CastableAs303">xs:yearMonthDuration("P1Y2M") castable as xs:untypedAtomic</entry>
<entry key="CastableAs302">xs:duration("P1Y2M3DT10H30M23S") castable as xs:anyURI</entry>
<entry key="CastableAs301">xs:duration("P1Y2M3DT10H30M23S") castable as xs:hexBinary</entry>
<entry key="generalexpression429">(10000,50000) &gt; (10000,50000)</entry>
<entry key="CastableAs300">xs:duration("P1Y2M3DT10H30M23S") castable as xs:base64Binary</entry>
<entry key="generalexpression428">(10000,50000) &gt; (50000)</entry>
<entry key="generalexpression427">(10000,50000) &gt; 10000</entry>
<entry key="generalexpression426">(10000,50000) &gt; ()</entry>
<entry key="generalexpression425">(50000) &gt; ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression424">(50000) &gt; (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression423">(50000) &gt; (/works/employee[1]/hours[1])</entry>
<entry key="line-ending-P002">deep-equal(string-to-codepoints('&#13;
'), (13, 10))</entry>
<entry key="function-literal-528">Q{http://www.w3.org/2001/XMLSchema}ENTITIES#1('ENTITY1 ENTITY2 ENTITY3')</entry>
<entry key="function-literal-527">exists(Q{http://www.w3.org/2001/XMLSchema}ENTITIES#1)</entry>
<entry key="function-literal-526">Q{http://www.w3.org/2001/XMLSchema}NMTOKENS#1('NMTOKEN1 NMTOKEN2 NMTOKEN3')</entry>
<entry key="function-literal-525">exists(Q{http://www.w3.org/2001/XMLSchema}NMTOKENS#1)</entry>
<entry key="function-literal-524">Q{http://www.w3.org/2001/XMLSchema}IDREFS#1('ID1 ID2 ID3')</entry>
<entry key="function-literal-523">exists(Q{http://www.w3.org/2001/XMLSchema}IDREFS#1)</entry>
<entry key="K-Literals-37">"t" eq "t"</entry>
<entry key="function-literal-520">Q{http://www.w3.org/2001/XMLSchema}QName#1('fn:QName')</entry>
<entry key="generalexpression419">(50000) &gt; (10000,50000)</entry>
<entry key="generalexpression418">(50000) &gt; (50000)</entry>
<entry key="generalexpression417">(50000) &gt; 10000</entry>
<entry key="generalexpression416">(50000) &gt; ()</entry>
<entry key="generalexpression415">10000 &gt; ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression414">10000 &gt; (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression413">10000 &gt; (/works/employee[1]/hours[1])</entry>
<entry key="function-literal-519">exists(Q{http://www.w3.org/2001/XMLSchema}QName#1)</entry>
<entry key="function-literal-518">Q{http://www.w3.org/2001/XMLSchema}anyURI#1('http://www.example.org/')</entry>
<entry key="function-literal-517">exists(Q{http://www.w3.org/2001/XMLSchema}anyURI#1)</entry>
<entry key="function-literal-516">Q{http://www.w3.org/2001/XMLSchema}hexBinary#1('0fb7')</entry>
<entry key="function-literal-515">exists(Q{http://www.w3.org/2001/XMLSchema}hexBinary#1)</entry>
<entry key="function-literal-514">Q{http://www.w3.org/2001/XMLSchema}base64Binary#1('D74D35D35D35')</entry>
<entry key="function-literal-513">exists(Q{http://www.w3.org/2001/XMLSchema}base64Binary#1)</entry>
<entry key="function-literal-512">Q{http://www.w3.org/2001/XMLSchema}boolean#1('1')</entry>
<entry key="K-Literals-28">0.3 eq .3</entry>
<entry key="function-literal-511">exists(Q{http://www.w3.org/2001/XMLSchema}boolean#1)</entry>
<entry key="function-literal-510">Q{http://www.w3.org/2001/XMLSchema}ENTITY#1('ENTITY')</entry>
<entry key="K-Literals-22">xs:float("NaN") instance of xs:float</entry>
<entry key="K-Literals-21">not(xs:float("NaN"))</entry>
<entry key="K-Literals-20">not(xs:double("NaN"))</entry>
<entry key="generalexpression409">10000 &gt; (10000,50000)</entry>
<entry key="generalexpression408">10000 &gt; (50000)</entry>
<entry key="generalexpression407">10000 &gt; ()</entry>
<entry key="generalexpression406">() &gt; ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression405">() &gt; (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression404">() &gt; (/works/employee[1]/hours[1])</entry>
<entry key="generalexpression400">() &gt; (10000,50000)</entry>
<entry key="function-literal-509">exists(Q{http://www.w3.org/2001/XMLSchema}ENTITY#1)</entry>
<entry key="function-literal-508">Q{http://www.w3.org/2001/XMLSchema}IDREF#1('IDREF')</entry>
<entry key="function-literal-507">exists(Q{http://www.w3.org/2001/XMLSchema}IDREF#1)</entry>
<entry key="function-literal-506">Q{http://www.w3.org/2001/XMLSchema}ID#1('ID')</entry>
<entry key="function-literal-505">exists(Q{http://www.w3.org/2001/XMLSchema}ID#1)</entry>
<entry key="K-SeqExprInstanceOf-66">((10)mod(3)) instance of xs:integer</entry>
<entry key="function-literal-504">Q{http://www.w3.org/2001/XMLSchema}NCName#1('NCName')</entry>
<entry key="K-SeqExprInstanceOf-65">((10)idiv(3)) instance of xs:integer</entry>
<entry key="function-literal-503">exists(Q{http://www.w3.org/2001/XMLSchema}NCName#1)</entry>
<entry key="K-Literals-19">"a xs:string" instance of xs:string</entry>
<entry key="K-SeqExprInstanceOf-64">not(((10)div(3)) instance of xs:integer)</entry>
<entry key="function-literal-502">Q{http://www.w3.org/2001/XMLSchema}Name#1('Name')</entry>
<entry key="K-Literals-18">3.3e1 instance of xs:double</entry>
<entry key="function-literal-501">exists(Q{http://www.w3.org/2001/XMLSchema}Name#1)</entry>
<entry key="K-Literals-17">3.3 instance of xs:decimal</entry>
<entry key="function-literal-500">Q{http://www.w3.org/2001/XMLSchema}NMTOKEN#1('NMTOKEN')</entry>
<entry key="K-Literals-16">3 instance of xs:integer</entry>
<entry key="K-Literals-15">-1231.123e3 instance of xs:double</entry>
<entry key="K-Literals-14">1.E3 instance of xs:double</entry>
<entry key="K-Literals-13">1231.123e3 instance of xs:double</entry>
<entry key="K-Literals-12">1.e3 instance of xs:double</entry>
<entry key="K-Literals-11">1.e+3 instance of xs:double</entry>
<entry key="K-Literals-10">1.3e-3 instance of xs:double</entry>
<entry key="cbcl-filter-001">let $x := exists((1 to 10)[. mod 2 = 0]) return (1 to 100)[position() mod 2 = 0 and position() mod 3 = 0 and $x]</entry>
<entry key="internalcontextitem-8">(fn:false(),fn:true(),fn:false())[fn:not(xs:boolean(.))]</entry>
<entry key="internalcontextitem-7">(fn:true(),fn:false(),fn:true())[xs:boolean(.)]</entry>
<entry key="internalcontextitem-6">(1,2,3)[xs:double(.)]</entry>
<entry key="internalcontextitem-5">(1,2,3)[xs:float(.)]</entry>
<entry key="internalcontextitem-4">(1,2,3)[xs:decimal(.)]</entry>
<entry key="internalcontextitem-3">(1,2,3)[xs:integer(.)]</entry>
<entry key="PathExpr-16">let $a := . return fn:count(.[/=$a])</entry>
<entry key="internalcontextitem-2">("A","B","C")[xs:string(.)]</entry>
<entry key="PathExpr-15">fn:count(.[/-5])</entry>
<entry key="Axes083-3">fn:count(//west//@*)</entry>
<entry key="Axes083-2">fn:count(//west//@*)</entry>
<entry key="Axes083-1">fn:count(//west//@*)</entry>
<entry key="K-SeqExprInstanceOf-48">1.1 instance of xs:decimal and not(1.1 instance of xs:integer)</entry>
<entry key="K-SeqExprInstanceOf-47">not("a string" instance of xs:QName)</entry>
<entry key="K-SeqExprInstanceOf-46">not("a string" instance of xs:NOTATION)</entry>
<entry key="K-SeqExprInstanceOf-45">(1.1, (), 1) instance of xs:decimal+</entry>
<entry key="K-SeqExprInstanceOf-44">("xs:string", (), "xs:string") instance of xs:string+</entry>
<entry key="K-SeqExprInstanceOf-43">((), "xs:string") instance of xs:string</entry>
<entry key="K-SeqExprInstanceOf-42">((), (), ()) instance of empty-sequence()</entry>
<entry key="K-SeqExprInstanceOf-41">(((()))) instance of empty-sequence()</entry>
<entry key="K-SeqExprInstanceOf-40">() instance of empty-sequence()</entry>
<entry key="cbcl-castable-language-004">"gobbledygook" castable as xs:language</entry>
<entry key="cbcl-castable-language-003">'en-gb' castable as xs:language</entry>
<entry key="cbcl-castable-language-002">1.0 castable as xs:language</entry>
<entry key="cbcl-castable-language-001">xs:language('en-gb') castable as xs:language</entry>
<entry key="Axes072-2">fn:count(//self::*)</entry>
<entry key="Axes072-1">fn:count(//self::*)</entry>
<entry key="K-SeqExprInstanceOf-39">() instance of empty-sequence()</entry>
<entry key="K-SeqExprInstanceOf-38">not( (1, 2, 3) instance of empty-sequence())</entry>
<entry key="K-SeqExprInstanceOf-37">not(1 instance of empty-sequence())</entry>
<entry key="K-SeqExprInstanceOf-36">not(1 instance of comment())</entry>
<entry key="K-SeqExprInstanceOf-35">not(1 instance of processing-instruction())</entry>
<entry key="Axes019-1">fn:count(//center/..)</entry>
<entry key="K-SeqExprInstanceOf-34">not(1 instance of element())</entry>
<entry key="K-SeqExprInstanceOf-33">not(1 instance of node())</entry>
<entry key="K-SeqExprInstanceOf-32">not(1 instance of text())</entry>
<entry key="K-SeqExprInstanceOf-31">not(1 instance of comment())</entry>
<entry key="K-SeqExprInstanceOf-30">not(1 instance of processing-instruction())</entry>
<entry key="Axes061-2">fn:count(/descendant-or-self::node())</entry>
<entry key="Axes061-1">fn:count(/descendant-or-self::node())</entry>
<entry key="K-SeqExprInstanceOf-29">not(1 instance of element())</entry>
<entry key="K-SeqExprInstanceOf-28">not(1 instance of node())</entry>
<entry key="cbcl-treat-as-008">subsequence((1 to 10)[. mod 2 = 0] treat as xs:integer+,1,2)</entry>
<entry key="K-SeqExprInstanceOf-27">not(1 instance of text())</entry>
<entry key="cbcl-treat-as-007">count((1 to 10)[. mod 2 = 0] treat as xs:integer+)</entry>
<entry key="K-SeqExprInstanceOf-26">(1, 2, count("one"), 4, 5) instance of xs:integer+</entry>
<entry key="cbcl-treat-as-006">exactly-one((1 to 10)[. div 2 = 1]) treat as xs:integer*</entry>
<entry key="K-SeqExprInstanceOf-25">(1, 2, "a string", 4, 5) instance of xs:anyAtomicType*</entry>
<entry key="cbcl-treat-as-005">exactly-one((1 to 10)[. div 2 = 1]) treat as xs:integer+</entry>
<entry key="K-SeqExprInstanceOf-24">not((1, 2, "a string", 4, 5) instance of xs:string*)</entry>
<entry key="cbcl-treat-as-004">zero-or-one((1 to 10)[. div 2 = 1]) treat as xs:integer*</entry>
<entry key="K-SeqExprInstanceOf-23">not((1, 2, 1.1, 4, 5) instance of xs:integer*)</entry>
<entry key="cbcl-treat-as-003">zero-or-one((1 to 10)[. div 2 = 1]) treat as xs:integer+</entry>
<entry key="K-SeqExprInstanceOf-22">not((1, 2, "a string", 4, 5) instance of xs:integer*)</entry>
<entry key="cbcl-treat-as-002">(1 to 10)[. mod 2 = 0] treat as xs:integer*</entry>
<entry key="K-SeqExprInstanceOf-21">(1, 2, 3, 4, 5) instance of item()+</entry>
<entry key="Axes008-3">fn:count(//west/attribute::west-attr-2)</entry>
<entry key="cbcl-treat-as-001">(1 to 10)[. mod 2 = 0] treat as xs:integer+</entry>
<entry key="K-SeqExprInstanceOf-20">(1, 2, 3, 4, 5) instance of xs:integer*</entry>
<entry key="Axes008-2">fn:count(//west/attribute::west-attr-2)</entry>
<entry key="Axes008-1">fn:count(//west/attribute::west-attr-2)</entry>
<entry key="K-SeqExprInstanceOf-19">not((1, 2, 3, 4, 5) instance of xs:integer?)</entry>
<entry key="K-SeqExprInstanceOf-18">not((1, 2, 3, 4, 5) instance of xs:integer)</entry>
<entry key="K-SeqExprInstanceOf-17">(1, 2, 3, 4, 5) instance of xs:integer+</entry>
<entry key="K-SeqExprInstanceOf-16">not("a string" instance of xs:untypedAtomic)</entry>
<entry key="K-SeqExprInstanceOf-15">not(xs:anyURI("http://www.example.com/") instance of xs:string)</entry>
<entry key="K-SeqExprInstanceOf-14">xs:anyURI("http://www.example.com/") instance of xs:anyURI</entry>
<entry key="K-SeqExprInstanceOf-13">not(1.1 instance of xs:integer)</entry>
<entry key="K-SeqExprInstanceOf-12">1.1 instance of xs:decimal</entry>
<entry key="K-SeqExprInstanceOf-11">not("false" instance of xs:boolean)</entry>
<entry key="K-SeqExprInstanceOf-10">"a string" instance of xs:string</entry>
<entry key="K-FilterExpr-9">empty((1, 2, 3)[4])</entry>
<entry key="K-FilterExpr-8">empty((1, 2, 3)[0])</entry>
<entry key="K-FilterExpr-7">empty((1, 2, 3)[4])</entry>
<entry key="K-FilterExpr-6">empty((1, 2, 3)[0])</entry>
<entry key="cbcl-castable-yearMonthDuration-002">"P768614336404564651Y" castable as xs:yearMonthDuration</entry>
<entry key="cbcl-castable-yearMonthDuration-001">"-P768614336404564651Y" castable as xs:yearMonthDuration</entry>
<entry key="casthc9">xs:float(2.1E3) cast as xs:string</entry>
<entry key="casthc8">xs:float(2.1E3) cast as xs:float</entry>
<entry key="casthc7">"A String" cast as xs:string</entry>
<entry key="casthc6">(5 + 5) cast as xs:string</entry>
<entry key="casthc5">(5 + 5) cast as xs:decimal</entry>
<entry key="casthc4">(5 + 5) cast as xs:double</entry>
<entry key="casthc3">(5 + 5) cast as xs:boolean</entry>
<entry key="casthc2">(5 + 5) cast as xs:float</entry>
<entry key="CastAs290">xs:duration("P24M") cast as xs:dayTimeDuration</entry>
<entry key="casthc1">(5 + 5) cast as xs:integer</entry>
<entry key="CastAs289">xs:duration("PT10H") cast as xs:dayTimeDuration</entry>
<entry key="CastAs288">xs:duration("P1Y2M3DT10H30M23S") cast as xs:dayTimeDuration</entry>
<entry key="CastAs287">xs:duration("P24M") cast as xs:yearMonthDuration</entry>
<entry key="cbcl-cast-unsignedShort-005">xs:unsignedShort("-00")</entry>
<entry key="CastAs286">xs:duration("PT10H") cast as xs:yearMonthDuration</entry>
<entry key="CastAs285">xs:duration("P1Y2M3DT10H30M23S") cast as xs:yearMonthDuration</entry>
<entry key="CastAs284">xs:duration("PT10H") cast as xs:duration</entry>
<entry key="CastAs283">xs:duration("P1Y2M3DT10H30M23S") cast as xs:duration</entry>
<entry key="CastAs278">xs:duration("P1Y2M3DT10H30M23S") cast as xs:string</entry>
<entry key="CastAs277">xs:duration("P1Y2M3DT10H30M23S") cast as xs:untypedAtomic</entry>
<entry key="CastAs273">xs:integer("-100") cast as xs:boolean</entry>
<entry key="CastAs261">xs:integer("-100") cast as xs:integer</entry>
<entry key="CastAs260">xs:integer("-100") cast as xs:decimal</entry>
<entry key="lessthanonanyuri-1">(xs:anyURI("http://www.example/com")) &lt; (xs:anyURI("http://www.example/com"))</entry>
<entry key="cbcl-castable-byte-004">"-129" castable as xs:byte</entry>
<entry key="CastAs259">xs:integer("-100") cast as xs:double</entry>
<entry key="cbcl-castable-byte-003">"128" castable as xs:byte</entry>
<entry key="CastAs258">xs:integer("-100") cast as xs:float</entry>
<entry key="cbcl-castable-byte-002">-129 castable as xs:byte</entry>
<entry key="CastAs257">xs:integer("-100") cast as xs:string</entry>
<entry key="cbcl-castable-byte-001">128 castable as xs:byte</entry>
<entry key="CondExpr21">if( true() ) then 10 cast as xs:double ? else /Folder[1] cast as xs:double ?</entry>
<entry key="CastAs256">xs:integer("1") cast as xs:untypedAtomic</entry>
<entry key="CondExpr20">if( false() ) then /Folder[1] cast as xs:double ? else 10 cast as xs:double ?</entry>
<entry key="CastAs252">xs:decimal("-1.1234") cast as xs:boolean</entry>
<entry key="K-ForExprWithout-9">3 eq (for $foo in 1 return for $foo in 3 return $foo)</entry>
<entry key="K-ForExprWithout-8">2 eq (for $foo in 1 return $foo + 1)</entry>
<entry key="K-ForExprWithout-7">1 eq (for $foo in 1 return $foo)</entry>
<entry key="K-ForExprWithout-6">3 eq (for $foo in 1 return 3)</entry>
<entry key="K-ForExprWithout-5">deep-equal(1 to 5, (for $i in (1,2,3,4,5) return $i))</entry>
<entry key="K-GenCompLT-19">0 &lt; count((1, 2, 3, timezone-from-time(current-time()), 4))</entry>
<entry key="CastAs240">xs:decimal("5.5432") cast as xs:integer</entry>
<entry key="K-GenCompLT-18">1 &lt;= count((1, 2, 3, timezone-from-time(current-time()), 4))</entry>
<entry key="K-GenCompLT-15">not(true() &lt; xs:untypedAtomic("false"))</entry>
<entry key="K-GenCompLT-14">not(xs:untypedAtomic("true") &lt; false())</entry>
<entry key="K-GenCompLT-13">false() &lt; xs:untypedAtomic("true")</entry>
<entry key="K-GenCompLT-12">xs:untypedAtomic("false") &lt; true()</entry>
<entry key="K-GenCompLT-11">1 &lt; 2</entry>
<entry key="K-GenCompLT-10">0 &lt; (1, 2, 3)</entry>
<entry key="K-SeqExprCast-599">xs:integer("6789") castable as xs:double</entry>
<entry key="K-SeqExprCast-598">xs:integer("6789") cast as xs:double ne xs:double("3.3e3")</entry>
<entry key="K-SeqExprCast-597">xs:integer("6789") castable as xs:float</entry>
<entry key="K-SeqExprCast-596">xs:integer("6789") cast as xs:float ne xs:float("3.4e5")</entry>
<entry key="K-SeqExprCast-595">xs:integer("6789") castable as xs:string</entry>
<entry key="K-SeqExprCast-594">xs:integer("6789") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="K-SeqExprCast-593">xs:integer("6789") castable as xs:untypedAtomic</entry>
<entry key="K-SeqExprCast-592">xs:integer("6789") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="K-SeqExprCast-591">boolean(xs:integer("6789"))</entry>
<entry key="K-SeqExprCast-590">xs:integer(xs:untypedAtomic( "6789" )) eq xs:integer("6789")</entry>
<entry key="CastAs239">xs:decimal("-1.1234") cast as xs:integer</entry>
<entry key="CastAs238">xs:decimal("-1.1234") cast as xs:decimal</entry>
<entry key="CastAs237">xs:decimal("-1.1234") cast as xs:double</entry>
<entry key="CastAs236">xs:decimal("-1.1234") cast as xs:float</entry>
<entry key="CastAs235">xs:decimal("-1.1234") cast as xs:string</entry>
<entry key="CastAs234">xs:decimal("-1.1234") cast as xs:untypedAtomic</entry>
<entry key="CastAs230">xs:double("1e5") cast as xs:boolean</entry>
<entry key="K-SeqExprCast-588">xs:integer(" 6789 ") eq xs:integer(" 6789 ")</entry>
<entry key="K-SeqExprCast-587">subsequence(("dummy", 1.1, xs:integer("6789")), 3, 1) instance of xs:integer</entry>
<entry key="K-SeqExprCast-583">not(xs:decimal("10.01") castable as xs:QName)</entry>
<entry key="K-SeqExprCast-581">not(xs:decimal("10.01") castable as xs:anyURI)</entry>
<entry key="K-SeqExprCast-579">not(xs:decimal("10.01") castable as xs:hexBinary)</entry>
<entry key="K-SeqExprCast-577">not(xs:decimal("10.01") castable as xs:base64Binary)</entry>
<entry key="K-SeqExprCast-575">xs:decimal("10.01") castable as xs:boolean</entry>
<entry key="K-SeqExprCast-574">xs:decimal("10.01") cast as xs:boolean eq xs:boolean("true")</entry>
<entry key="K-SeqExprCast-573">not(xs:decimal("10.01") castable as xs:gMonth)</entry>
<entry key="K-SeqExprCast-571">not(xs:decimal("10.01") castable as xs:gDay)</entry>
<entry key="CastAs216">xs:double("-1.75e-3") cast as xs:integer</entry>
<entry key="CastAs215">xs:double("1e5") cast as xs:integer</entry>
<entry key="CastAs214">xs:double("-0.0E0") cast as xs:integer</entry>
<entry key="cbcl-castable-unsignedInt-005">"-00" castable as xs:unsignedInt</entry>
<entry key="CastAs212">round-half-to-even(xs:double("-1.75e-3") cast as xs:decimal,5)</entry>
<entry key="cbcl-castable-unsignedInt-004">"-1" castable as xs:unsignedInt</entry>
<entry key="CastAs211">xs:double("5.4321E-1001") cast as xs:decimal</entry>
<entry key="cbcl-castable-unsignedInt-003">"4294967296" castable as xs:unsignedInt</entry>
<entry key="CastAs210">xs:double("-0.0E0") cast as xs:decimal</entry>
<entry key="Axes078-4">fn:count(//center//south)</entry>
<entry key="cbcl-castable-unsignedInt-002">-1 castable as xs:unsignedInt</entry>
<entry key="Axes078-3">fn:count(//center//south)</entry>
<entry key="cbcl-castable-unsignedInt-001">4294967296 castable as xs:unsignedInt</entry>
<entry key="Axes078-2">fn:count(//center//south)</entry>
<entry key="Axes078-1">fn:count(//center//south)</entry>
<entry key="K-SeqExprCast-569">not(xs:decimal("10.01") castable as xs:gMonthDay)</entry>
<entry key="K-SeqExprCast-567">not(xs:decimal("10.01") castable as xs:gYear)</entry>
<entry key="K-SeqExprCast-565">not(xs:decimal("10.01") castable as xs:gYearMonth)</entry>
<entry key="K-SeqExprCast-563">not(xs:decimal("10.01") castable as xs:date)</entry>
<entry key="K-SeqExprCast-561">not(xs:decimal("10.01") castable as xs:time)</entry>
<entry key="CastAs209">xs:double("INF") cast as xs:double</entry>
<entry key="CastAs208">xs:double("1e5") cast as xs:double</entry>
<entry key="CastAs207">xs:double("NaN") cast as xs:float</entry>
<entry key="CastAs206">xs:double("-1.75e-3") cast as xs:float</entry>
<entry key="CastAs205">xs:double("1e5") cast as xs:float</entry>
<entry key="CastAs203">xs:double("-0.0E0") cast as xs:float</entry>
<entry key="CastAs202">xs:double("INF") cast as xs:string</entry>
<entry key="CastAs201">xs:double("1e8") cast as xs:string</entry>
<entry key="CastAs200">xs:double("INF") cast as xs:untypedAtomic</entry>
<entry key="Axes067-3">fn:count(//node())</entry>
<entry key="Axes067-2">fn:count(//node())</entry>
<entry key="K-SeqExprCast-559">not(xs:decimal("10.01") castable as xs:dateTime)</entry>
<entry key="Axes067-1">fn:count(//node())</entry>
<entry key="NodeTest005">/*/.</entry>
<entry key="K-SeqExprCast-557">not(xs:decimal("10.01") castable as xs:dayTimeDuration)</entry>
<entry key="NodeTest004">/.</entry>
<entry key="NodeTest003">/*/*[1]/name()</entry>
<entry key="K-SeqExprCast-555">not(xs:decimal("10.01") castable as xs:yearMonthDuration)</entry>
<entry key="NodeTest002">/processing-instruction()</entry>
<entry key="NodeTest001">/comment()</entry>
<entry key="K-SeqExprCast-553">not(xs:decimal("10.01") castable as xs:duration)</entry>
<entry key="K-SeqExprCast-551">xs:decimal("10.01") castable as xs:integer</entry>
<entry key="K-SeqExprCast-550">xs:decimal("10.01") cast as xs:integer ne xs:integer("6789")</entry>
<entry key="K-SeqExprCast-549">xs:decimal("10.01") castable as xs:decimal</entry>
<entry key="K-SeqExprCast-548">xs:decimal("10.01") cast as xs:decimal eq xs:decimal("10.01")</entry>
<entry key="K-SeqExprCast-547">xs:decimal("10.01") castable as xs:double</entry>
<entry key="K-SeqExprCast-546">xs:decimal("10.01") cast as xs:double ne xs:double("3.3e3")</entry>
<entry key="K-SeqExprCast-545">xs:decimal("10.01") castable as xs:float</entry>
<entry key="Axes056-3">fn:count(/descendant::*)</entry>
<entry key="K-SeqExprCast-544">xs:decimal("10.01") cast as xs:float ne xs:float("3.4e5")</entry>
<entry key="Axes056-2">fn:count(/descendant::*)</entry>
<entry key="K-SeqExprCast-543">xs:decimal("10.01") castable as xs:string</entry>
<entry key="Axes056-1">fn:count(/descendant::*)</entry>
<entry key="K-SeqExprCast-542">xs:decimal("10.01") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="K-SeqExprCast-541">xs:decimal("10.01") castable as xs:untypedAtomic</entry>
<entry key="K-SeqExprCast-540">xs:decimal("10.01") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="K-SeqExprCast-539">boolean(xs:decimal("10.01"))</entry>
<entry key="K-SeqExprCast-538">xs:decimal(xs:untypedAtomic( "10.01" )) eq xs:decimal("10.01")</entry>
<entry key="K-SeqExprCast-536">xs:decimal(" 10.01 ") eq xs:decimal(" 10.01 ")</entry>
<entry key="K-SeqExprCast-535">subsequence(("dummy", 1.1, xs:decimal("10.01")), 3, 1) instance of xs:decimal</entry>
<entry key="K-SeqExprCast-531">not(xs:double("3.3e3") castable as xs:QName)</entry>
<entry key="Axes045-2">fn:count(/child::far-north)</entry>
<entry key="Axes045-1">fn:count(/child::far-north)</entry>
<entry key="K-SeqExprCast-529">not(xs:double("3.3e3") castable as xs:anyURI)</entry>
<entry key="K-SeqExprCast-527">not(xs:double("3.3e3") castable as xs:hexBinary)</entry>
<entry key="K-SeqExprCast-525">not(xs:double("3.3e3") castable as xs:base64Binary)</entry>
<entry key="CastableAs299">xs:duration("P1Y2M3DT10H30M23S") castable as xs:boolean</entry>
<entry key="CastableAs298">xs:duration("P1Y2M3DT10H30M23S") castable as xs:gMonth</entry>
<entry key="K-SeqExprCast-523">xs:double("3.3e3") castable as xs:boolean</entry>
<entry key="CastableAs297">xs:duration("P1Y2M3DT10H30M23S") castable as xs:gDay</entry>
<entry key="K-SeqExprCast-522">xs:double("3.3e3") cast as xs:boolean eq xs:boolean("true")</entry>
<entry key="CastableAs296">xs:duration("P1Y2M3DT10H30M23S") castable as xs:gMonthDay</entry>
<entry key="K-SeqExprCast-521">not(xs:double("3.3e3") castable as xs:gMonth)</entry>
<entry key="CastableAs295">xs:duration("P1Y2M3DT10H30M23S") castable as xs:gYear</entry>
<entry key="CastableAs294">xs:duration("P1Y2M3DT10H30M23S") castable as xs:gYearMonth</entry>
<entry key="CastableAs293">xs:duration("P1Y2M3DT10H30M23S") castable as xs:date</entry>
<entry key="CastableAs292">xs:duration("P1Y2M3DT10H30M23S") castable as xs:time</entry>
<entry key="CastableAs291">xs:duration("P1Y2M3DT10H30M23S") castable as xs:dateTime</entry>
<entry key="CastableAs290">xs:duration("P24M") castable as xs:dayTimeDuration</entry>
<entry key="Axes034-2">fn:count(//center/descendant-or-self::*)</entry>
<entry key="Axes034-1">fn:count(//center/descendant-or-self::*)</entry>
<entry key="K-SeqExprCast-519">not(xs:double("3.3e3") castable as xs:gDay)</entry>
<entry key="K-SeqExprCast-517">not(xs:double("3.3e3") castable as xs:gMonthDay)</entry>
<entry key="K-SeqExprCast-515">not(xs:double("3.3e3") castable as xs:gYear)</entry>
<entry key="CastableAs289">xs:duration("PT10H") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs288">xs:duration("P1Y2M3DT10H30M23S") castable as xs:dayTimeDuration</entry>
<entry key="K-SeqExprCast-513">not(xs:double("3.3e3") castable as xs:gYearMonth)</entry>
<entry key="CastableAs287">xs:duration("P24M") castable as xs:yearMonthDuration</entry>
<entry key="CastableAs286">xs:duration("PT10H") castable as xs:yearMonthDuration</entry>
<entry key="K-SeqExprCast-511">not(xs:double("3.3e3") castable as xs:date)</entry>
<entry key="CastableAs285">xs:duration("P1Y2M3DT10H30M23S") castable as xs:yearMonthDuration</entry>
<entry key="CastableAs284">xs:duration("PT10H") castable as xs:duration</entry>
<entry key="CastableAs283">xs:duration("P1Y2M3DT10H30M23S") castable as xs:duration</entry>
<entry key="CastableAs282">xs:duration("P1Y2M3DT10H30M23S") castable as xs:integer</entry>
<entry key="CastableAs281">xs:duration("P1Y2M3DT10H30M23S") castable as xs:decimal</entry>
<entry key="CastableAs280">xs:duration("P1Y2M3DT10H30M23S") castable as xs:double</entry>
<entry key="Axes023-1">fn:count(//center/self::node())</entry>
<entry key="K-SeqExprCast-509">not(xs:double("3.3e3") castable as xs:time)</entry>
<entry key="K-SeqExprCast-507">not(xs:double("3.3e3") castable as xs:dateTime)</entry>
<entry key="K-SeqExprCast-505">not(xs:double("3.3e3") castable as xs:dayTimeDuration)</entry>
<entry key="predicatesns-9">(/root/integer[xs:integer(.) = 12678967543233])</entry>
<entry key="CastableAs279">xs:duration("P1Y2M3DT10H30M23S") castable as xs:float</entry>
<entry key="predicatesns-8">(/root/string[xs:string(.) = "A String Function"])</entry>
<entry key="CastableAs278">xs:duration("P1Y2M3DT10H30M23S") castable as xs:string</entry>
<entry key="K-SeqExprCast-503">not(xs:double("3.3e3") castable as xs:yearMonthDuration)</entry>
<entry key="CastableAs277">xs:duration("P1Y2M3DT10H30M23S") castable as xs:untypedAtomic</entry>
<entry key="CastableAs276">xs:integer("-100") castable as xs:anyURI</entry>
<entry key="K-SeqExprCast-501">not(xs:double("3.3e3") castable as xs:duration)</entry>
<entry key="predicatesns-5">(//integer[fn:true() or fn:true()])</entry>
<entry key="CastableAs275">xs:integer("-100") castable as xs:hexBinary</entry>
<entry key="predicatesns-4">(//integer[fn:true() and fn:true()])</entry>
<entry key="CastableAs274">xs:integer("-100") castable as xs:base64Binary</entry>
<entry key="predicatesns-3">(//integer[fn:not(fn:false())])</entry>
<entry key="CastableAs273">xs:integer("-100") castable as xs:boolean</entry>
<entry key="CastableAs272">xs:integer("-100") castable as xs:gMonth</entry>
<entry key="predicatesns-1">fn:count((//integer[fn:true()]))</entry>
<entry key="CastableAs271">xs:integer("-100") castable as xs:gDay</entry>
<entry key="generalexpression399">() &gt; (50000)</entry>
<entry key="CastableAs270">xs:integer("-100") castable as xs:gMonthDay</entry>
<entry key="generalexpression398">() &gt; 10000</entry>
<entry key="generalexpression397">() &gt; ()</entry>
<entry key="generalexpression396">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &lt;= ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression395">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &lt;= ($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1])</entry>
<entry key="generalexpression394">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &lt;= ($works/works/employee[1]/hours[1])</entry>
<entry key="generalexpression390">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &lt;= (10000,50000)</entry>
<entry key="function-literal-499">exists(Q{http://www.w3.org/2001/XMLSchema}NMTOKEN#1)</entry>
<entry key="Axes012-1">fn:count( / )</entry>
<entry key="function-literal-498">Q{http://www.w3.org/2001/XMLSchema}language#1('en')</entry>
<entry key="function-literal-497">exists(Q{http://www.w3.org/2001/XMLSchema}language#1)</entry>
<entry key="function-literal-496">Q{http://www.w3.org/2001/XMLSchema}token#1('token')</entry>
<entry key="function-literal-495">exists(Q{http://www.w3.org/2001/XMLSchema}token#1)</entry>
<entry key="function-literal-494">Q{http://www.w3.org/2001/XMLSchema}normalizedString#1('normalized
string')</entry>
<entry key="function-literal-493">exists(Q{http://www.w3.org/2001/XMLSchema}normalizedString#1)</entry>
<entry key="CastableAs269">xs:integer("-100") castable as xs:gYear</entry>
<entry key="function-literal-492">Q{http://www.w3.org/2001/XMLSchema}string#1('string')</entry>
<entry key="CastableAs268">xs:integer("-100") castable as xs:gYearMonth</entry>
<entry key="function-literal-491">exists(Q{http://www.w3.org/2001/XMLSchema}string#1)</entry>
<entry key="CastableAs267">xs:integer("-100") castable as xs:date</entry>
<entry key="function-literal-490">Q{http://www.w3.org/2001/XMLSchema}gMonth#1('--11Z')</entry>
<entry key="CastableAs266">xs:integer("-100") castable as xs:time</entry>
<entry key="CastableAs265">xs:integer("-100") castable as xs:dateTime</entry>
<entry key="CastableAs264">xs:integer("-100") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs263">xs:integer("-100") castable as xs:yearMonthDuration</entry>
<entry key="CastableAs262">xs:integer("-100") castable as xs:duration</entry>
<entry key="CastableAs261">xs:integer("-100") castable as xs:integer</entry>
<entry key="generalexpression389">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &lt;= (50000)</entry>
<entry key="CastableAs260">xs:integer("-100") castable as xs:decimal</entry>
<entry key="generalexpression388">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &lt;= 10000</entry>
<entry key="generalexpression387">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &lt;= ()</entry>
<entry key="generalexpression386">($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1]) &lt;= ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression385">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &lt;= (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression384">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &lt;= (/works/employee[1]/hours[1])</entry>
<entry key="generalexpression380">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &lt;= (10000,50000)</entry>
<entry key="function-literal-489">exists(Q{http://www.w3.org/2001/XMLSchema}gMonth#1)</entry>
<entry key="function-literal-488">Q{http://www.w3.org/2001/XMLSchema}gDay#1('---01Z')</entry>
<entry key="function-literal-487">exists(Q{http://www.w3.org/2001/XMLSchema}gDay#1)</entry>
<entry key="function-literal-486">Q{http://www.w3.org/2001/XMLSchema}gMonthDay#1('--11-01Z')</entry>
<entry key="function-literal-485">exists(Q{http://www.w3.org/2001/XMLSchema}gMonthDay#1)</entry>
<entry key="Axes001-3">fn:count(//center/child::*)</entry>
<entry key="function-literal-484">Q{http://www.w3.org/2001/XMLSchema}gYear#1('2012Z')</entry>
<entry key="Axes001-2">fn:count(//center/child::*)</entry>
<entry key="function-literal-483">exists(Q{http://www.w3.org/2001/XMLSchema}gYear#1)</entry>
<entry key="CastableAs259">xs:integer("-100") castable as xs:double</entry>
<entry key="Axes001-1">fn:count(//center/child::*)</entry>
<entry key="function-literal-482">Q{http://www.w3.org/2001/XMLSchema}gYearMonth#1('2001-10Z')</entry>
<entry key="CastableAs258">xs:integer("-100") castable as xs:float</entry>
<entry key="function-literal-481">exists(Q{http://www.w3.org/2001/XMLSchema}gYearMonth#1)</entry>
<entry key="CastableAs257">xs:integer("-100") castable as xs:string</entry>
<entry key="function-literal-480">Q{http://www.w3.org/2001/XMLSchema}positiveInteger#1('1')</entry>
<entry key="CastableAs256">xs:integer("1") castable as xs:untypedAtomic</entry>
<entry key="CastableAs255">xs:decimal("-1.1234") castable as xs:anyURI</entry>
<entry key="CastableAs254">xs:decimal("-1.1234") castable as xs:hexBinary</entry>
<entry key="CastableAs253">xs:decimal("-1.1234") castable as xs:base64Binary</entry>
<entry key="CastableAs252">xs:decimal("-1.1234") castable as xs:boolean</entry>
<entry key="CastableAs251">xs:decimal("-1.1234") castable as xs:gMonth</entry>
<entry key="generalexpression379">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &lt;= (50000)</entry>
<entry key="CastableAs250">xs:decimal("-1.1234") castable as xs:gDay</entry>
<entry key="generalexpression378">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &lt;= 10000</entry>
<entry key="generalexpression377">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &lt;= ()</entry>
<entry key="generalexpression376">($works/works/employee[1]/hours[1]) &lt;= ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression375">(/works/employee[1]/hours[1]) &lt;= (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression374">(/works/employee[1]/hours[1]) &lt;= (/works/employee[1]/hours[1])</entry>
<entry key="generalexpression370">(/works/employee[1]/hours[1]) &lt;= (10000,50000)</entry>
<entry key="K-GenCompNE-30">3 != (1, 2, 3)</entry>
<entry key="K2-SeqExprCast-224">xs:double(" INF ")</entry>
<entry key="function-literal-479">exists(Q{http://www.w3.org/2001/XMLSchema}positiveInteger#1)</entry>
<entry key="K2-SeqExprCast-223">xs:float(" INF ")</entry>
<entry key="function-literal-478">Q{http://www.w3.org/2001/XMLSchema}nonNegativeInteger#1('1')</entry>
<entry key="K2-SeqExprCast-222">xs:double(" NaN ")</entry>
<entry key="function-literal-477">exists(Q{http://www.w3.org/2001/XMLSchema}nonNegativeInteger#1)</entry>
<entry key="K2-SeqExprCast-221">xs:float(" NaN ")</entry>
<entry key="function-literal-476">Q{http://www.w3.org/2001/XMLSchema}unsignedByte#1('1')</entry>
<entry key="function-literal-475">exists(Q{http://www.w3.org/2001/XMLSchema}unsignedByte#1)</entry>
<entry key="function-literal-474">Q{http://www.w3.org/2001/XMLSchema}unsignedShort#1('1')</entry>
<entry key="function-literal-473">exists(Q{http://www.w3.org/2001/XMLSchema}unsignedShort#1)</entry>
<entry key="CastableAs249">xs:decimal("-1.1234") castable as xs:gMonthDay</entry>
<entry key="function-literal-472">Q{http://www.w3.org/2001/XMLSchema}unsignedInt#1('1')</entry>
<entry key="CastableAs248">xs:decimal("-1.1234") castable as xs:gYear</entry>
<entry key="function-literal-471">exists(Q{http://www.w3.org/2001/XMLSchema}unsignedInt#1)</entry>
<entry key="CastableAs247">xs:decimal("-1.1234") castable as xs:gYearMonth</entry>
<entry key="function-literal-470">Q{http://www.w3.org/2001/XMLSchema}unsignedLong#1('1')</entry>
<entry key="CastableAs246">xs:decimal("-1.1234") castable as xs:date</entry>
<entry key="CastableAs245">xs:decimal("-1.1234") castable as xs:time</entry>
<entry key="CastableAs244">xs:decimal("-1.1234") castable as xs:dateTime</entry>
<entry key="CastableAs243">xs:decimal("-1.1234") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs242">xs:decimal("-1.1234") castable as xs:yearMonthDuration</entry>
<entry key="CastableAs241">xs:decimal("-1.1234") castable as xs:duration</entry>
<entry key="generalexpression369">(/works/employee[1]/hours[1]) &lt;= (50000)</entry>
<entry key="CastableAs240">xs:decimal("5.5432") castable as xs:integer</entry>
<entry key="K-GenCompNE-29">2 != (1, 2, 3)</entry>
<entry key="generalexpression368">(/works/employee[1]/hours[1]) &lt;= 10000</entry>
<entry key="K-GenCompNE-28">1 != (1, 2, 3)</entry>
<entry key="generalexpression367">(/works/employee[1]/hours[1]) &lt;= ()</entry>
<entry key="K-GenCompNE-27">1 != 2</entry>
<entry key="K-GenCompNE-26">(1, 2, 3) != 3</entry>
<entry key="K-GenCompNE-25">(1, 2, 3) != 2</entry>
<entry key="K-GenCompNE-24">(1, 2, 3) != 1</entry>
<entry key="K-GenCompNE-23">not(false() != xs:untypedAtomic("false"))</entry>
<entry key="K-GenCompNE-22">not(xs:untypedAtomic("false") != false())</entry>
<entry key="K-GenCompNE-21">false() != xs:untypedAtomic("true")</entry>
<entry key="K-GenCompNE-20">xs:untypedAtomic("true") != false()</entry>
<entry key="K2-SeqExprCast-214">xs:double(xs:int("-1873914410"))</entry>
<entry key="function-literal-469">exists(Q{http://www.w3.org/2001/XMLSchema}unsignedLong#1)</entry>
<entry key="K2-SeqExprCast-213">xs:double(xs:positiveInteger("52"))</entry>
<entry key="quantExpr-60">every $x in ("1985-07-05Z", "1985-07-05Z"), $y in ("1985-07-05Z","1985-07-05Z") satisfies xs:date($x) = xs:date($y)</entry>
<entry key="function-literal-468">Q{http://www.w3.org/2001/XMLSchema}nonNegativeInteger#1('1')</entry>
<entry key="function-literal-467">exists(Q{http://www.w3.org/2001/XMLSchema}nonNegativeInteger#1)</entry>
<entry key="function-literal-466">Q{http://www.w3.org/2001/XMLSchema}byte#1('1')</entry>
<entry key="function-literal-465">exists(Q{http://www.w3.org/2001/XMLSchema}byte#1)</entry>
<entry key="function-literal-464">Q{http://www.w3.org/2001/XMLSchema}short#1('1')</entry>
<entry key="function-literal-463">exists(Q{http://www.w3.org/2001/XMLSchema}short#1)</entry>
<entry key="CastableAs239">xs:decimal("-1.1234") castable as xs:integer</entry>
<entry key="function-literal-462">Q{http://www.w3.org/2001/XMLSchema}int#1('1')</entry>
<entry key="CastableAs238">xs:decimal("-1.1234") castable as xs:decimal</entry>
<entry key="function-literal-461">exists(Q{http://www.w3.org/2001/XMLSchema}int#1)</entry>
<entry key="CastableAs237">xs:decimal("-1.1234") castable as xs:double</entry>
<entry key="function-literal-460">Q{http://www.w3.org/2001/XMLSchema}long#1('1')</entry>
<entry key="CastableAs236">xs:decimal("-1.1234") castable as xs:float</entry>
<entry key="CastableAs235">xs:decimal("-1.1234") castable as xs:string</entry>
<entry key="CastableAs234">xs:decimal("-1.1234") castable as xs:untypedAtomic</entry>
<entry key="CastableAs233">xs:double("1e5") castable as xs:anyURI</entry>
<entry key="CastableAs232">xs:double("1e5") castable as xs:hexBinary</entry>
<entry key="CastableAs231">xs:double("1e5") castable as xs:base64Binary</entry>
<entry key="CastableAs230">xs:double("1e5") castable as xs:boolean</entry>
<entry key="K-GenCompNE-19">not(xs:untypedAtomic("a string") != "a string")</entry>
<entry key="K-GenCompNE-18">not("a string" != xs:untypedAtomic("a string"))</entry>
<entry key="K-GenCompNE-17">"a string" != xs:untypedAtomic("a stringDIFF")</entry>
<entry key="K-GenCompNE-16">xs:untypedAtomic("a string") != "a stringDIFF"</entry>
<entry key="K-GenCompNE-15">not("a string" != "a string")</entry>
<entry key="K-GenCompNE-14">"a string" != "a stringDIFF"</entry>
<entry key="treat-as-25">let $var := (100+200) div 10 return ($var cast as xs:integer treat as xs:integer) - 10</entry>
<entry key="K-GenCompNE-13">count((0, timezone-from-time(current-time()))) != 0</entry>
<entry key="treat-as-24">let $var := (100+200) div 10 return ($var cast as xs:integer treat as xs:integer) + 10</entry>
<entry key="K-GenCompNE-12">not(1 != xs:untypedAtomic("1"))</entry>
<entry key="treat-as-23">let $var := xs:double(-100) return fn:abs($var cast as xs:decimal treat as xs:decimal)</entry>
<entry key="K-GenCompNE-11">2 != xs:untypedAtomic("1")</entry>
<entry key="treat-as-22">let $var := xs:float(-100) return fn:abs($var cast as xs:decimal treat as xs:decimal)</entry>
<entry key="K-GenCompNE-10">not("2" = xs:untypedAtomic("1"))</entry>
<entry key="K2-SeqExprCast-209">xs:anyURI("〜")</entry>
<entry key="treat-as-21">let $var := xs:decimal(-100) return fn:abs($var cast as xs:float treat as xs:float)</entry>
<entry key="K2-SeqExprCast-208">concat("b", xs:anyURI(" "), "b")</entry>
<entry key="treat-as-20">let $var := xs:decimal(-100) return fn:abs($var cast as xs:double treat as xs:double)</entry>
<entry key="function-literal-459">exists(Q{http://www.w3.org/2001/XMLSchema}long#1)</entry>
<entry key="function-literal-458">Q{http://www.w3.org/2001/XMLSchema}negativeInteger#1('-1')</entry>
<entry key="K2-SeqExprCast-202">xs:NMTOKEN(" ::::...:SDA21455313 ")</entry>
<entry key="function-literal-457">exists(Q{http://www.w3.org/2001/XMLSchema}negativeInteger#1)</entry>
<entry key="K2-SeqExprCast-201">namespace-uri-from-QName(xs:QName("ncname"))</entry>
<entry key="function-literal-456">Q{http://www.w3.org/2001/XMLSchema}nonPositiveInteger#1('-1')</entry>
<entry key="function-literal-455">exists(Q{http://www.w3.org/2001/XMLSchema}nonPositiveInteger#1)</entry>
<entry key="function-literal-454">Q{http://www.w3.org/2001/XMLSchema}integer#1('1')</entry>
<entry key="function-literal-453">exists(Q{http://www.w3.org/2001/XMLSchema}integer#1)</entry>
<entry key="CastableAs229">xs:double("1e5") castable as xs:gMonth</entry>
<entry key="function-literal-452">Q{http://www.w3.org/2001/XMLSchema}decimal#1('1')</entry>
<entry key="CastableAs228">xs:double("1e5") castable as xs:gDay</entry>
<entry key="function-literal-451">exists(Q{http://www.w3.org/2001/XMLSchema}decimal#1)</entry>
<entry key="CastableAs227">xs:double("1e5") castable as xs:gMonthDay</entry>
<entry key="function-literal-450">Q{http://www.w3.org/2001/XMLSchema}double#1('1')</entry>
<entry key="CastableAs226">xs:double("1e5") castable as xs:gYear</entry>
<entry key="CastableAs225">xs:double("1e5") castable as xs:gYearMonth</entry>
<entry key="CastableAs224">xs:double("1e5") castable as xs:date</entry>
<entry key="CastableAs223">xs:double("1e5") castable as xs:time</entry>
<entry key="CastableAs222">xs:double("1e5") castable as xs:dateTime</entry>
<entry key="CastableAs221">xs:double("1e5") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs220">xs:double("1e5") castable as xs:yearMonthDuration</entry>
<entry key="treat-as-19">let $var := xs:float(-100) return fn:abs($var cast as xs:double treat as xs:double)</entry>
<entry key="treat-as-18">let $var := xs:double(-100) return fn:abs($var cast as xs:float treat as xs:float)</entry>
<entry key="treat-as-17">let $var := xs:double(-100) return fn:abs($var cast as xs:integer treat as xs:integer)</entry>
<entry key="treat-as-16">let $var := xs:float(-100) return fn:abs($var cast as xs:integer treat as xs:integer)</entry>
<entry key="treat-as-15">let $var := -100 return fn:abs($var cast as xs:double treat as xs:double)</entry>
<entry key="treat-as-14">let $var := -100 return fn:abs($var cast as xs:float treat as xs:float)</entry>
<entry key="generalexpression9">() = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="treat-as-13">let $var := 100 return (xs:decimal($var) treat as xs:decimal, xs:double($var) treat as xs:double, xs:float($var) treat as xs:float, $var treat as xs:integer)</entry>
<entry key="generalexpression8">() = (/works/employee[1]/hours[1])</entry>
<entry key="treat-as-12">let $var := 100 return ($var treat as xs:integer, $var treat as xs:integer, $var treat as xs:integer)</entry>
<entry key="filterexpressionhc9">((1 to 25)[. eq 10])</entry>
<entry key="treat-as-11">let $var := xs:time("01:23:00+05:00") return fn:hours-from-time($var treat as xs:time)</entry>
<entry key="filterexpressionhc8">((1 to 25)[. le 10])</entry>
<entry key="treat-as-10">let $var := xs:dateTime("1999-05-31T13:20:00-05:00") return fn:minutes-from-dateTime($var treat as xs:dateTime)</entry>
<entry key="filterexpressionhc7">((1 to 25)[. lt 10])</entry>
<entry key="filterexpressionhc6">((1 to 25)[. ge 10])</entry>
<entry key="generalexpression4">() = (10000,50000)</entry>
<entry key="filterexpressionhc5">(//employee[fn:last()])</entry>
<entry key="generalexpression3">() = (50000)</entry>
<entry key="filterexpressionhc4">(//empnum | (/))//employee[xs:integer(hours[1]) gt 20]</entry>
<entry key="generalexpression2">() = 10000</entry>
<entry key="filterexpressionhc3">((1 to 25)[25])</entry>
<entry key="function-literal-449">exists(Q{http://www.w3.org/2001/XMLSchema}double#1)</entry>
<entry key="generalexpression1">() = ()</entry>
<entry key="filterexpressionhc2">((1 to 25)[. mod 2 eq 0])</entry>
<entry key="function-literal-448">Q{http://www.w3.org/2001/XMLSchema}float#1('1')</entry>
<entry key="K-GenCompLT-9">2 &lt; (1, 2, 3)</entry>
<entry key="filterexpressionhc1">(/works/employee[xs:integer(hours[1]) gt 20])</entry>
<entry key="function-literal-447">exists(Q{http://www.w3.org/2001/XMLSchema}float#1)</entry>
<entry key="K-GenCompLT-8">1 &lt; (1, 2, 3)</entry>
<entry key="function-literal-446">Q{http://www.w3.org/2001/XMLSchema}dayTimeDuration#1('PT15H')</entry>
<entry key="K-GenCompLT-7">(1, 2, 3) &lt; 3</entry>
<entry key="function-literal-445">exists(Q{http://www.w3.org/2001/XMLSchema}dayTimeDuration#1)</entry>
<entry key="K-GenCompLT-6">(1, 2, 3) &lt; 2</entry>
<entry key="function-literal-444">Q{http://www.w3.org/2001/XMLSchema}yearMonthDuration#1('P1Y')</entry>
<entry key="K-GenCompLT-5">(1, 2, 3) &lt; 4</entry>
<entry key="function-literal-443">exists(Q{http://www.w3.org/2001/XMLSchema}yearMonthDuration#1)</entry>
<entry key="CastableAs219">xs:double("1e5") castable as xs:duration</entry>
<entry key="predicatesns-14">(/root/date[xs:date(.) = xs:date("2000-01-01+05:00")])</entry>
<entry key="function-literal-442">Q{http://www.w3.org/2001/XMLSchema}duration#1('P5Y2M10DT15H')</entry>
<entry key="K-GenCompLT-3">not(() &lt; 1 )</entry>
<entry key="CastableAs218">xs:double("NaN") castable as xs:integer</entry>
<entry key="predicatesns-13">(/root/boolean[xs:boolean(.) = fn:true()])</entry>
<entry key="function-literal-441">exists(Q{http://www.w3.org/2001/XMLSchema}duration#1)</entry>
<entry key="K-GenCompLT-2">not(1 &lt; () )</entry>
<entry key="CastableAs217">xs:double("INF") castable as xs:integer</entry>
<entry key="predicatesns-12">(/root/double[xs:double(.) = 1267.43233E12])</entry>
<entry key="function-literal-440">Q{http://www.w3.org/2001/XMLSchema}time#1('01:02:03Z')</entry>
<entry key="K-GenCompLT-1">not(() &lt; () )</entry>
<entry key="CastableAs216">xs:double("-1.75e-3") castable as xs:integer</entry>
<entry key="predicatesns-11">(/root/float[xs:float(.) = xs:float(1267.43233E12)])</entry>
<entry key="CastableAs215">xs:double("1e5") castable as xs:integer</entry>
<entry key="predicatesns-10">(/root/decimal[(xs:decimal(.) = 12678967.543233)])</entry>
<entry key="CastableAs214">xs:double("-0.0E0") castable as xs:integer</entry>
<entry key="CastableAs213">xs:double("INF") castable as xs:decimal</entry>
<entry key="CastableAs212">xs:double("-1.75e-3") castable as xs:decimal</entry>
<entry key="CastableAs211">xs:double("5.4321E-1001") castable as xs:decimal</entry>
<entry key="cast-to-parent-21">let $value := xs:short(10E2) return $value cast as xs:double</entry>
<entry key="CastableAs210">xs:double("-0.0E0") castable as xs:decimal</entry>
<entry key="cast-to-parent-20">let $value := xs:unsignedLong(10E2) return $value cast as xs:double</entry>
<entry key="generalexpression336">(10000,50000) &lt;= ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression335">(10000,50000) &lt;= (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression334">(10000,50000) &lt;= (/works/employee[1]/hours[1])</entry>
<entry key="generalexpression330">(10000,50000) &lt;= (10000,50000)</entry>
<entry key="quantExpr-33">every $x in (1, 2) satisfies $x - 2 = 2</entry>
<entry key="function-literal-439">exists(Q{http://www.w3.org/2001/XMLSchema}time#1)</entry>
<entry key="quantExpr-30">some $x in ("1985-07-05Z", "1985-07-05Z"), $y in ("1985-07-05Z","1985-07-05Z") satisfies xs:date($x) = xs:date($y)</entry>
<entry key="function-literal-438">Q{http://www.w3.org/2001/XMLSchema}date#1('1970-01-02Z')</entry>
<entry key="function-literal-437">exists(Q{http://www.w3.org/2001/XMLSchema}date#1)</entry>
<entry key="function-literal-436">Q{http://www.w3.org/2001/XMLSchema}dateTime#1('1970-01-02T04:05:06Z')</entry>
<entry key="function-literal-435">exists(Q{http://www.w3.org/2001/XMLSchema}dateTime#1)</entry>
<entry key="function-literal-434">Q{http://www.w3.org/2001/XMLSchema}untypedAtomic#1('string')</entry>
<entry key="function-literal-433">exists(Q{http://www.w3.org/2001/XMLSchema}untypedAtomic#1)</entry>
<entry key="CastableAs209">xs:double("INF") castable as xs:double</entry>
<entry key="function-literal-432">Q{http://www.w3.org/2005/xpath-functions}for-each-pair#3(("a", "b", "c"), ("x", "y", "z"), concat#2)</entry>
<entry key="cast-to-parent-19">let $value := xs:int(10E2) return $value cast as xs:double</entry>
<entry key="CastableAs208">xs:double("1e5") castable as xs:double</entry>
<entry key="function-literal-431">exists(Q{http://www.w3.org/2005/xpath-functions}for-each-pair#3)</entry>
<entry key="cast-to-parent-18">let $value := xs:long(10E2) return $value cast as xs:double</entry>
<entry key="CastableAs207">xs:double("NaN") castable as xs:float</entry>
<entry key="function-literal-430">Q{http://www.w3.org/2005/xpath-functions}fold-right#3(1 to 5, "", fn:concat(?, ".", ?))</entry>
<entry key="cast-to-parent-17">let $value := xs:positiveInteger(10E2) return $value cast as xs:double</entry>
<entry key="CastableAs206">xs:double("-1.75e-3") castable as xs:float</entry>
<entry key="instanceof9">xs:dateTime("2002-04-02T12:00:00Z") instance of xs:decimal</entry>
<entry key="cast-to-parent-16">let $value := xs:integer(10E2) return $value cast as xs:double</entry>
<entry key="CastableAs205">xs:double("1e5") castable as xs:float</entry>
<entry key="instanceof8">xs:dateTime("2002-04-02T12:00:00Z") instance of xs:string</entry>
<entry key="cast-to-parent-15">let $value := xs:decimal(10E2) return $value cast as xs:double</entry>
<entry key="CastableAs204">xs:double("5.4321E-1001") castable as xs:float</entry>
<entry key="instanceof7">xs:dateTime("2002-04-02T12:00:00Z") instance of xs:anyURI</entry>
<entry key="cast-to-parent-14">let $value := xs:byte(10.0) return $value cast as xs:float</entry>
<entry key="CastableAs203">xs:double("-0.0E0") castable as xs:float</entry>
<entry key="instanceof6">xs:dateTime("2002-04-02T12:00:00Z") instance of xs:double</entry>
<entry key="cast-to-parent-13">let $value := xs:unsignedByte(10.0) return $value cast as xs:float</entry>
<entry key="CastableAs202">xs:double("INF") castable as xs:string</entry>
<entry key="instanceof5">xs:dateTime("2002-04-02T12:00:00Z") instance of xs:float</entry>
<entry key="cast-to-parent-12">let $value := xs:unsignedShort(10.0) return $value cast as xs:float</entry>
<entry key="CastableAs201">xs:double("1e8") castable as xs:string</entry>
<entry key="instanceof4">xs:dateTime("2002-04-02T12:00:00Z") instance of xs:boolean</entry>
<entry key="generalexpression329">(10000,50000) &lt;= (50000)</entry>
<entry key="cast-to-parent-11">let $value := xs:unsignedInt(10.0) return $value cast as xs:float</entry>
<entry key="CastableAs200">xs:double("INF") castable as xs:untypedAtomic</entry>
<entry key="instanceof3">xs:dateTime("2002-04-02T12:00:00Z") instance of xs:date</entry>
<entry key="generalexpression328">(10000,50000) &lt;= 10000</entry>
<entry key="cast-to-parent-10">let $value := xs:short(10.0) return $value cast as xs:float</entry>
<entry key="instanceof2">xs:dateTime("2002-04-02T12:00:00Z") instance of xs:time</entry>
<entry key="generalexpression327">(10000,50000) &lt;= ()</entry>
<entry key="instanceof1">xs:dateTime("2002-04-02T12:00:00Z") instance of xs:dateTime</entry>
<entry key="generalexpression326">(50000) &lt;= ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression325">(50000) &lt;= (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression324">(50000) &lt;= (/works/employee[1]/hours[1])</entry>
<entry key="quantExpr-29">some $x in ("1980-05-05T13:13:13Z", "1980-05-05T13:13:13Z"), $y in ("1980-05-05T13:13:13Z","1980-05-05T13:13:13Z") satisfies xs:dateTime($x) = xs:dateTime($y)</entry>
<entry key="quantExpr-28">some $x in ("true", "false"), $y in ("false","true") satisfies xs:boolean($x) = xs:boolean($y)</entry>
<entry key="generalexpression320">(50000) &lt;= (10000,50000)</entry>
<entry key="quantExpr-27">some $x in (1,2,3), $y in (4,5,6) satisfies xs:double($x) = xs:double($y)</entry>
<entry key="quantExpr-26">some $x in (1,2,3), $y in (4,5,6) satisfies xs:float($x) = xs:float($y)</entry>
<entry key="quantExpr-25">some $x in (1,2,3), $y in (4,5,6) satisfies xs:decimal($x) = xs:decimal($y)</entry>
<entry key="quantExpr-24">some $x in (1,2,3), $y in (4,5,6) satisfies xs:integer($x) = xs:integer($y)</entry>
<entry key="quantExpr-23">some $x in (1,2,3), $y in (4,5,6) satisfies fn:string($x) = fn:string($y)</entry>
<entry key="quantExpr-22">some $x in (1,2,3), $y in (4,5,6) satisfies $x idiv $y = 2</entry>
<entry key="quantExpr-21">some $x in (1,2,3), $y in (4,5,6) satisfies $x div $y = 2</entry>
<entry key="function-literal-429">exists(Q{http://www.w3.org/2005/xpath-functions}fold-right#3)</entry>
<entry key="quantExpr-20">some $x in (1,2,3), $y in (4,5,6) satisfies $x * $y = 10</entry>
<entry key="function-literal-428">Q{http://www.w3.org/2005/xpath-functions}fold-left#3(1 to 5, "", fn:concat(?, ".", ?))</entry>
<entry key="function-literal-427">exists(Q{http://www.w3.org/2005/xpath-functions}fold-left#3)</entry>
<entry key="function-literal-426">Q{http://www.w3.org/2005/xpath-functions}filter#2(1 to 10, function($a) {$a mod 2 = 0})</entry>
<entry key="function-literal-425">exists(Q{http://www.w3.org/2005/xpath-functions}filter#2)</entry>
<entry key="function-literal-424">Q{http://www.w3.org/2005/xpath-functions}for-each#2(("23", "29"), xs:int#1)</entry>
<entry key="function-literal-423">exists(Q{http://www.w3.org/2005/xpath-functions}for-each#2)</entry>
<entry key="function-literal-422">Q{http://www.w3.org/2005/xpath-functions}function-arity#1(fn:abs#1)</entry>
<entry key="function-literal-421">exists(Q{http://www.w3.org/2005/xpath-functions}function-arity#1)</entry>
<entry key="function-literal-420">Q{http://www.w3.org/2005/xpath-functions}function-name#1(fn:abs#1)</entry>
<entry key="generalexpression319">(50000) &lt;= (50000)</entry>
<entry key="generalexpression318">(50000) &lt;= 10000</entry>
<entry key="generalexpression317">(50000) &lt;= ()</entry>
<entry key="generalexpression316">10000 &lt;= ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression315">10000 &lt;= (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression314">10000 &lt;= (/works/employee[1]/hours[1])</entry>
<entry key="quantExpr-18">some $x in (1,2,3), $y in (4,5,6) satisfies $x + $y = 5</entry>
<entry key="generalexpression310">10000 &lt;= (10000,50000)</entry>
<entry key="quantExpr-17">some $x in ("A","B","C") satisfies $x = "A"</entry>
<entry key="quantExpr-16">some $x in (1, 2) satisfies $x = 1 and ($x +1) = 2</entry>
<entry key="quantExpr-15">some $x in (1, 2) satisfies $x = 1 or $x = 2</entry>
<entry key="quantExpr-14">some $x in (1, 2) satisfies fn:not($x)</entry>
<entry key="quantExpr-13">some $x in (1, 2) satisfies fn:false()</entry>
<entry key="quantExpr-12">some $x in (1, 2) satisfies fn:true()</entry>
<entry key="quantExpr-11">some $x in (1, 2) satisfies fn:count(($x)) = 1</entry>
<entry key="function-literal-419">exists(Q{http://www.w3.org/2005/xpath-functions}function-name#1)</entry>
<entry key="quantExpr-10">some $x in (1, 2) satisfies fn:string-length(xs:string($x)) = 1</entry>
<entry key="function-literal-418">Q{http://www.w3.org/2005/xpath-functions}function-lookup#2(fn:QName('http://www.example.org', 'foo:bar'), 1)</entry>
<entry key="function-literal-417">exists(Q{http://www.w3.org/2005/xpath-functions}function-lookup#2)</entry>
<entry key="function-literal-416">Q{http://www.w3.org/2005/xpath-functions}static-base-uri#0()</entry>
<entry key="function-literal-415">exists(Q{http://www.w3.org/2005/xpath-functions}static-base-uri#0)</entry>
<entry key="function-literal-414">Q{http://www.w3.org/2005/xpath-functions}default-collation#0()</entry>
<entry key="function-literal-413">exists(Q{http://www.w3.org/2005/xpath-functions}default-collation#0)</entry>
<entry key="function-literal-412">Q{http://www.w3.org/2005/xpath-functions}implicit-timezone#0()</entry>
<entry key="function-literal-411">exists(Q{http://www.w3.org/2005/xpath-functions}implicit-timezone#0)</entry>
<entry key="function-literal-410">Q{http://www.w3.org/2005/xpath-functions}current-time#0()</entry>
<entry key="generalexpression309">10000 &lt;= (50000)</entry>
<entry key="generalexpression308">10000 &lt;= ()</entry>
<entry key="generalexpression307">() &lt;= ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression306">() &lt;= (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression305">() &lt;= (/works/employee[1]/hours[1])</entry>
<entry key="generalexpression301">() &lt;= (10000,50000)</entry>
<entry key="generalexpression300">() &lt;= (50000)</entry>
<entry key="function-literal-409">exists(Q{http://www.w3.org/2005/xpath-functions}current-time#0)</entry>
<entry key="function-literal-408">Q{http://www.w3.org/2005/xpath-functions}current-date#0()</entry>
<entry key="function-literal-407">exists(Q{http://www.w3.org/2005/xpath-functions}current-date#0)</entry>
<entry key="function-literal-406">Q{http://www.w3.org/2005/xpath-functions}current-dateTime#0()</entry>
<entry key="function-literal-405">exists(Q{http://www.w3.org/2005/xpath-functions}current-dateTime#0)</entry>
<entry key="function-literal-404">(2, 4, 6)!Q{http://www.w3.org/2005/xpath-functions}last#0()</entry>
<entry key="function-literal-403">exists(Q{http://www.w3.org/2005/xpath-functions}last#0)</entry>
<entry key="function-literal-402">(2, 4, 6)!Q{http://www.w3.org/2005/xpath-functions}position#0()</entry>
<entry key="function-literal-401">exists(Q{http://www.w3.org/2005/xpath-functions}position#0)</entry>
<entry key="function-literal-400">Q{http://www.w3.org/2005/xpath-functions}serialize#2((1, false()), ())</entry>
<entry key="K-CondExpr-12">if(boolean((1, 2, 3, current-time())[1] treat as xs:integer)) then true() else 4</entry>
<entry key="K-CondExpr-11">if(not(count(remove((1, 2, 3, current-time()), 1)))) then 3 else true()</entry>
<entry key="K-CondExpr-10">if(count((1, 2, 3, current-time(), 4))) then true() else 4</entry>
<entry key="Axes082-3">fn:count(//west//attribute::node())</entry>
<entry key="Axes082-2">fn:count(//west//attribute::node())</entry>
<entry key="Axes082-1">fn:count(//west//attribute::node())</entry>
<entry key="cbcl-case-anyUri-001">"http://example.com?query=" cast as xs:anyURI</entry>
<entry key="Axes071-3">fn:count(//@mark)</entry>
<entry key="Axes071-2">fn:count(//@mark)</entry>
<entry key="Axes071-1">fn:count(//@mark)</entry>
<entry key="ForExpr030">for $var in (1,2), $var in (2,2) return $var * $var</entry>
<entry key="Axes018-1">fn:count(/far-north/parent::node())</entry>
<entry key="ForExpr025">for $file in (//Folder)[1]/File, $file in (//Folder)[2]/File return $file/FileName</entry>
<entry key="Axes060-4">fn:count(/descendant-or-self::south)</entry>
<entry key="K-SeqExprInstanceOf-9">false() instance of xs:anyAtomicType</entry>
<entry key="Axes060-3">fn:count(/descendant-or-self::south)</entry>
<entry key="K-SeqExprInstanceOf-8">false() instance of xs:boolean</entry>
<entry key="Axes060-2">fn:count(/descendant-or-self::south)</entry>
<entry key="K-SeqExprInstanceOf-7">1 instance of xs:integer*</entry>
<entry key="Axes060-1">fn:count(/descendant-or-self::south)</entry>
<entry key="K-SeqExprInstanceOf-6">1 instance of xs:integer+</entry>
<entry key="ForExpr021">for $i in (1, 2), $j in (3, 4) return ($i, $j)</entry>
<entry key="K-SeqExprInstanceOf-5">1 instance of xs:integer?</entry>
<entry key="K-SeqExprInstanceOf-4">1 instance of xs:decimal</entry>
<entry key="K-SeqExprInstanceOf-3">1 instance of xs:integer</entry>
<entry key="K-SeqExprInstanceOf-2">1 instance of item()</entry>
<entry key="K-SeqExprInstanceOf-1">1 instance of item()</entry>
<entry key="Axes007-3">fn:count(//west/attribute::*)</entry>
<entry key="Axes007-2">fn:count(//west/attribute::*)</entry>
<entry key="Axes007-1">fn:count(//west/attribute::*)</entry>
<entry key="ForExpr016">for $folder in //Folder, $index in (1, 2, 3) return $folder/File[$index]/FileName</entry>
<entry key="ForExpr015">for $folder in //Folder return for $file in $folder/File return string( $file/FileName[1] )</entry>
<entry key="ForExpr013">
        for $fileName in //File/FileName, 
            $folderName in //Folder[contains(description, 'fren')]/FolderName 
        return ($folderName, $fileName)</entry>
<entry key="ForExpr012">for $fileName in for $file in //Folder/File return $file/FileName return string( $fileName )</entry>
<entry key="ForExpr007">for $AaBbCc.-_Dd in /MyComputer/Drive1/Folder return $AaBbCc.-_Dd/FolderName</entry>
<entry key="ForExpr005">for $f in /MyComputer//File[@creation_date="08/06/00"]/SecurityObject/Denies/Deny[security/right] return $f/../../@name/string()</entry>
<entry key="ForExpr001">for $a in ("test", "test1", "test2") return $a</entry>
<entry key="cbcl-instance-of-001">
        for $x in (xs:integer(1), xs:decimal(1)) return (((($x + 1) * 2) - 1) instance of xs:integer)
      </entry>
<entry key="Literals061a">"&amp;#8364;"</entry>
<entry key="CastAs199">xs:double("1e5") cast as xs:untypedAtomic</entry>
<entry key="CastAs195">xs:float("NaN") cast as xs:boolean</entry>
<entry key="CastAs194">xs:float("-INF") cast as xs:boolean</entry>
<entry key="CastAs193">xs:float("1e5") cast as xs:boolean</entry>
<entry key="CastAs192">xs:float("-0.0E0") cast as xs:boolean</entry>
<entry key="Literals060a">"&amp;gt;"</entry>
<entry key="cbcl-castable-dayTimeDuration-002">"-P11768614336404564651D" castable as xs:duration</entry>
<entry key="cbcl-castable-dayTimeDuration-001">"P11768614336404564651D" castable as xs:dayTimeDuration</entry>
<entry key="eqname-018">(//Q{http://www.example.com/AuctionWatch}Start)[1]/namespace::Q{}*/string()</entry>
<entry key="eqname-015">for $Q{http://example.com/ns}x in 1 to 10 return $Q{http://example.com/ns}x + 1</entry>
<entry key="eqname-014">string((//Q{http://www.example.com/AuctionWatch}Start)[1])</entry>
<entry key="K2-SeqExprCastable-8">("http:\\invalid&gt;URI\someURI") castable as xs:anyURI</entry>
<entry key="K2-SeqExprCastable-7">xs:untypedAtomic("%") castable as xs:anyURI</entry>
<entry key="K2-SeqExprCastable-6">"%" castable as xs:anyURI</entry>
<entry key="K2-SeqExprCastable-5">xs:positiveInteger("52") castable as xs:double</entry>
<entry key="K2-SeqExprCastable-2">(QName("http://example.com/ANamespace", "ncname"), QName("http://example.com/ANamespace", "ncname2"), QName("http://example.com/ANamespace", "ncname3")) castable as xs:QName?</entry>
<entry key="K2-SeqExprCastable-1">(QName("http://example.com/ANamespace", "ncname"), QName("http://example.com/ANamespace", "ncname2"), QName("http://example.com/ANamespace", "ncname3")) castable as xs:QName</entry>
<entry key="CastAs179">xs:float("1e5") cast as xs:integer</entry>
<entry key="CastAs178">xs:float("-0.0E0") cast as xs:integer</entry>
<entry key="CastAs177">round-half-to-even(xs:float("-1.75e-3") cast as xs:decimal,5)</entry>
<entry key="CastAs176">xs:float("1e5") cast as xs:decimal</entry>
<entry key="CastAs175">xs:float("5.4321E-100") cast as xs:decimal</entry>
<entry key="CastAs174">xs:float("-0.0E0") cast as xs:decimal</entry>
<entry key="CastAs173">xs:float("-INF") cast as xs:double</entry>
<entry key="CastAs172">xs:float("-0.0E0") cast as xs:double</entry>
<entry key="CastAs171">xs:float("INF") cast as xs:float</entry>
<entry key="CastAs170">xs:float("-1.75e-3") cast as xs:float</entry>
<entry key="ancestor-20">fn:deep-equal(/works/employee[12]/overtime/ancestor::works,/works/employee[12]/overtime/ancestor::works)</entry>
<entry key="cbcl-castable-nmtoken-002b">"&#13;
	 foobar 
&#13;	" castable as xs:NMTOKEN</entry>
<entry key="CastAs168">xs:float("NaN") cast as xs:string</entry>
<entry key="CastAs167">xs:float("-0.0E0") cast as xs:string</entry>
<entry key="CastAs166">xs:float("-INF") cast as xs:untypedAtomic</entry>
<entry key="CastAs165">xs:float("1e5") cast as xs:untypedAtomic</entry>
<entry key="CastAs164">xs:string("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:anyURI</entry>
<entry key="CastAs163">xs:string("true") cast as xs:anyURI</entry>
<entry key="CastAs162">xs:string("http://www.example.com/~b%C3%A9b%C3%A9") cast as xs:anyURI</entry>
<entry key="CastAs161">xs:string("D74D35D35D35") cast as xs:hexBinary</entry>
<entry key="CastAs160">xs:string("0fb7") cast as xs:hexBinary</entry>
<entry key="ancestor-19">(/works/employee[12]/overtime/day[ancestor::overtime]) or fn:false()</entry>
<entry key="ancestor-18">(/works/employee[12]/overtime/day[ancestor::overtime]) or fn:true()</entry>
<entry key="ancestorself-20">fn:deep-equal(/works/employee[12]/overtime/ancestor-or-self::works,/works/employee[12]/overtime/ancestor-or-self::works)</entry>
<entry key="ancestor-17">(/works/employee[12]/overtime/day[ancestor::overtime]) and fn:false()</entry>
<entry key="ancestor-16">(/works/employee[12]/overtime/day[ancestor::overtime]) and fn:true()</entry>
<entry key="ancestor-15">(/works/employee[12]/overtime/day[ancestor::overtime]) except (/works/employee[12]/overtime/day[1])</entry>
<entry key="ancestor-14">fn:count((/works/employee[12]/overtime/day[ancestor::overtime]) except (/works/employee[12]/overtime/day[ancestor::overtime]))</entry>
<entry key="ancestor-13">(/works/employee[12]/overtime/day/ancestor::employee) intersect (/works/employee[12]/overtime/day/ancestor::employee)</entry>
<entry key="ancestor-12">(/works/employee[12]/*/day[1]/ancestor::overtime) | (/works/employee[12]/*/day[2]/ancestor::overtime)</entry>
<entry key="ancestor-11">(/works/employee[12]/*/day/ancestor::overtime) | (/works/employee[12]/*/day/ancestor::overtime)</entry>
<entry key="ancestor-10">exactly-one(/works/employee[1]/ancestor::works) &gt;&gt; exactly-one(/works/employee[1]/hours)</entry>
<entry key="ancestorself-19">(/works/employee[12]/overtime/day[ancestor-or-self::overtime]) or fn:false()</entry>
<entry key="CastAs157">xs:string("D74D35D35D35") cast as xs:base64Binary</entry>
<entry key="ancestorself-18">(/works/employee[12]/overtime/day[ancestor-or-self::overtime]) or fn:true()</entry>
<entry key="CastAs156">xs:string("00000000") cast as xs:base64Binary</entry>
<entry key="ancestorself-17">(/works/employee[12]/overtime/day[ancestor-or-self::overtime]) and fn:false()</entry>
<entry key="CastAs155">xs:string("true") cast as xs:base64Binary</entry>
<entry key="ancestorself-16">(/works/employee[12]/overtime/day[ancestor-or-self::overtime]) and fn:true()</entry>
<entry key="CastAs154">xs:string("true") cast as xs:boolean</entry>
<entry key="ancestorself-15">(/works/employee[12]/overtime/day[ancestor-or-self::overtime]) except (/works/employee[12]/overtime/day[1])</entry>
<entry key="CastAs153">xs:string("0") cast as xs:boolean</entry>
<entry key="ancestorself-14">fn:count((/works/employee[12]/overtime/day[ancestor-or-self::overtime]) except (/works/employee[12]/overtime/day[ancestor-or-self::overtime]))</entry>
<entry key="ancestorself-13">((/works/employee[12]/overtime/day/ancestor-or-self::employee) intersect (/works/employee[12]/overtime/day/ancestor-or-self::employee))/@name</entry>
<entry key="ancestorself-12">((/works/employee[12]/*/day[1]/ancestor-or-self::overtime) | (/works/employee[12]/*/day[2]/ancestor-or-self::overtime))/count(*)</entry>
<entry key="CastAs150">xs:string("--05Z") cast as xs:gMonth</entry>
<entry key="ancestorself-11">((/works/employee[12]/*/day/ancestor-or-self::overtime) | (/works/employee[12]/*/day/ancestor-or-self::overtime))/count(*)</entry>
<entry key="ancestorself-10">exactly-one(/works/employee[1]/ancestor-or-self::works) &gt;&gt; exactly-one(/works/employee[1]/hours)</entry>
<entry key="CastAs149">xs:string("--12-05:00") cast as xs:gMonth</entry>
<entry key="CastAs148">xs:string("--05") cast as xs:gMonth</entry>
<entry key="CastAs146">xs:string("---31Z") cast as xs:gDay</entry>
<entry key="CastAs145">xs:string("---03-05:00") cast as xs:gDay</entry>
<entry key="CastAs144">xs:string("---31") cast as xs:gDay</entry>
<entry key="CastAs142">xs:string("--05-31Z") cast as xs:gMonthDay</entry>
<entry key="CastAs141">xs:string("--05-31+14:00") cast as xs:gMonthDay</entry>
<entry key="CastAs140">xs:string("--05-31") cast as xs:gMonthDay</entry>
<entry key="K-SeqExprCast-499">xs:double("3.3e3") castable as xs:double</entry>
<entry key="K-SeqExprCast-498">xs:double("3.3e3") cast as xs:double eq xs:double("3.3e3")</entry>
<entry key="K-SeqExprCast-497">xs:double("3.3e3") castable as xs:float</entry>
<entry key="K-SeqExprCast-496">xs:double("3.3e3") cast as xs:float ne xs:float("3.4e5")</entry>
<entry key="abbreviatedSyntax-9">for $h in (/works) return $h/employee//hours/string()</entry>
<entry key="K-SeqExprCast-495">xs:double("3.3e3") castable as xs:string</entry>
<entry key="abbreviatedSyntax-8">/works/employee[5]/hours[2]</entry>
<entry key="K-SeqExprCast-494">xs:double("3.3e3") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="abbreviatedSyntax-7">for $h in (/works) return $h/*/hours/string()</entry>
<entry key="K-SeqExprCast-493">xs:double("3.3e3") castable as xs:untypedAtomic</entry>
<entry key="abbreviatedSyntax-6">for $h in (/works) return $h/employee[fn:last()]/@name</entry>
<entry key="K-SeqExprCast-492">xs:double("3.3e3") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="abbreviatedSyntax-5">for $h in (/works) return $h/employee[1]/@name</entry>
<entry key="K-SeqExprCast-491">boolean(xs:double("3.3e3"))</entry>
<entry key="K-SeqExprCast-490">xs:double(xs:untypedAtomic( "3.3e3" )) eq xs:double("3.3e3")</entry>
<entry key="abbreviatedSyntax-3">for $h in (/works/employee[10]) return $h/@name</entry>
<entry key="abbreviatedSyntax-2">for $h in (/works/employee[2]) return $h/text()</entry>
<entry key="abbreviatedSyntax-1">for $h in (/works/employee[4]) return $h/hours/string()</entry>
<entry key="CastAs138">xs:string("1999Z") cast as xs:gYear</entry>
<entry key="CastAs137">xs:string("-0012-05:00") cast as xs:gYear</entry>
<entry key="CastAs136">xs:string("1999") cast as xs:gYear</entry>
<entry key="CastAs134">xs:string("1999-05Z") cast as xs:gYearMonth</entry>
<entry key="CastAs133">xs:string("-0012-12-05:00") cast as xs:gYearMonth</entry>
<entry key="CastAs132">xs:string("1999-05") cast as xs:gYearMonth</entry>
<entry key="CastAs130">xs:string("1999-05-31Z") cast as xs:date</entry>
<entry key="K-SeqExprCast-488">xs:double(" 3.3e3 ") eq xs:double(" 3.3e3 ")</entry>
<entry key="K-SeqExprCast-487">subsequence(("dummy", 1.1, xs:double("3.3e3")), 3, 1) instance of xs:double</entry>
<entry key="K-SeqExprCast-483">not(xs:float("3.4e5") castable as xs:QName)</entry>
<entry key="K-SeqExprCast-481">not(xs:float("3.4e5") castable as xs:anyURI)</entry>
<entry key="CastAs129">xs:string("-0012-12-03-05:00") cast as xs:date</entry>
<entry key="CastAs128">xs:string("1999-05-31") cast as xs:date</entry>
<entry key="CastAs126">xs:string("13:20:00Z") cast as xs:time</entry>
<entry key="CastAs125">xs:string("13:20:02.123") cast as xs:time</entry>
<entry key="CastAs124">xs:string("13:20:00-05:00") cast as xs:time</entry>
<entry key="CastAs122">xs:string("2000-01-16T00:00:00Z") cast as xs:dateTime</entry>
<entry key="CastAs121">xs:string("-1999-05-31T13:20:00+14:00") cast as xs:dateTime</entry>
<entry key="CastAs120">xs:string("1999-05-31T13:20:00") cast as xs:dateTime</entry>
<entry key="K-SeqExprCast-479">not(xs:float("3.4e5") castable as xs:hexBinary)</entry>
<entry key="K-SeqExprCast-477">not(xs:float("3.4e5") castable as xs:base64Binary)</entry>
<entry key="K-SeqExprCast-475">xs:float("3.4e5") castable as xs:boolean</entry>
<entry key="K-SeqExprCast-474">xs:float("3.4e5") cast as xs:boolean eq xs:boolean("true")</entry>
<entry key="K-SeqExprCast-473">not(xs:float("3.4e5") castable as xs:gMonth)</entry>
<entry key="K-SeqExprCast-471">not(xs:float("3.4e5") castable as xs:gDay)</entry>
<entry key="CastAs118">xs:string("-PT100M") cast as xs:dayTimeDuration</entry>
<entry key="CastAs117">xs:string("P3DT10H30M") cast as xs:dayTimeDuration</entry>
<entry key="CastAs114">xs:string("-P21M") cast as xs:yearMonthDuration</entry>
<entry key="CastAs113">xs:string("P24M") cast as xs:yearMonthDuration</entry>
<entry key="CastAs110">xs:string("-P1Y1M1DT1H1M1.123S") cast as xs:duration</entry>
<entry key="Axes077-3">fn:count(//center//*)</entry>
<entry key="Axes077-2">fn:count(//center//*)</entry>
<entry key="Axes077-1">fn:count(//center//*)</entry>
<entry key="K-SeqExprCast-469">not(xs:float("3.4e5") castable as xs:gMonthDay)</entry>
<entry key="K-SeqExprCast-467">not(xs:float("3.4e5") castable as xs:gYear)</entry>
<entry key="K-SeqExprCast-465">not(xs:float("3.4e5") castable as xs:gYearMonth)</entry>
<entry key="K-SeqExprCast-463">not(xs:float("3.4e5") castable as xs:date)</entry>
<entry key="K-FilterExpr-90">(1, 2, 3)[(last(), last())[2]]</entry>
<entry key="K-SeqExprCast-461">not(xs:float("3.4e5") castable as xs:time)</entry>
<entry key="K-CondExpr-9">0 eq (if(xs:anyURI("")) then 1 else 0)</entry>
<entry key="K-CondExpr-8">1 eq (if(xs:anyURI("example.com/")) then 1 else 0)</entry>
<entry key="CastAs109">xs:string("P1Y2M3DT10H30M23S") cast as xs:duration</entry>
<entry key="K-CondExpr-6">string(if(boolean((1, current-time())[1] treat as xs:integer)) then true() else false()) eq "true"</entry>
<entry key="K-CondExpr-5">if((1, 2, 3, hours-from-time(current-time()))[1]) then true() else false()</entry>
<entry key="K-CondExpr-4">(if(boolean((1, current-time())[1] treat as xs:integer)) then true() else false()) eq true()</entry>
<entry key="K-CondExpr-3">(if((1, current-time())[1] treat as xs:integer) then true() else false()) eq true()</entry>
<entry key="K-CondExpr-2">if(()) then false() else true()</entry>
<entry key="K-CondExpr-1">(if(2) then 1 else 0) eq 1</entry>
<entry key="CastAs102">xs:string("5.5432") cast as xs:decimal</entry>
<entry key="Axes066-4">fn:count(//south)</entry>
<entry key="K-FilterExpr-89">deep-equal(remove((1, 2, 3, current-time()), 4)[true()], (1, 2, 3))</entry>
<entry key="Axes066-3">fn:count(//south)</entry>
<entry key="Axes066-2">fn:count(//south)</entry>
<entry key="K-FilterExpr-87">empty((1, 2, 3, current-time())[0])</entry>
<entry key="K-SeqExprCast-459">not(xs:float("3.4e5") castable as xs:dateTime)</entry>
<entry key="Axes066-1">fn:count(//south)</entry>
<entry key="K-FilterExpr-86">empty(current-time()[2])</entry>
<entry key="K-SeqExprCast-457">not(xs:float("3.4e5") castable as xs:dayTimeDuration)</entry>
<entry key="K-SeqExprCast-455">not(xs:float("3.4e5") castable as xs:yearMonthDuration)</entry>
<entry key="K-FilterExpr-81">deep-equal((0, 1, 2), (0, 1, 2)[. eq 0 or . eq 1 or . eq 2])</entry>
<entry key="K-SeqExprCast-453">not(xs:float("3.4e5") castable as xs:duration)</entry>
<entry key="K-FilterExpr-80">(0, 1, 2)[. eq 2]</entry>
<entry key="K-SeqExprCast-451">xs:float("3.4e5") castable as xs:double</entry>
<entry key="K-SeqExprCast-450">xs:float("3.4e5") cast as xs:double ne xs:double("3.3e3")</entry>
<entry key="K-FilterExpr-79">(0, 1, 2)[. eq 1]</entry>
<entry key="K-FilterExpr-78">(0, 1, 2)[. eq 0]</entry>
<entry key="K2-SeqExprCast-193">xs:token("")</entry>
<entry key="K2-SeqExprCast-192">xs:normalizedString("")</entry>
<entry key="K-SeqExprCast-449">xs:float("3.4e5") castable as xs:float</entry>
<entry key="K2-SeqExprCast-191">xs:Name("a1123-_--__-__--....-.--.-..12309asd")</entry>
<entry key="K-SeqExprCast-448">xs:float("3.4e5") cast as xs:float eq xs:float("3.4e5")</entry>
<entry key="K2-SeqExprCast-190">xs:Name(" a ")</entry>
<entry key="K-SeqExprCast-447">xs:float("3.4e5") castable as xs:string</entry>
<entry key="K-FilterExpr-74">(0, 1, "2")[last()]</entry>
<entry key="K-SeqExprCast-446">xs:float("3.4e5") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="K-FilterExpr-73">(0, 1, 2)[last()]</entry>
<entry key="K-SeqExprCast-445">xs:float("3.4e5") castable as xs:untypedAtomic</entry>
<entry key="K-FilterExpr-72">deep-equal((0, 1, 2), (0, 1, 2)[if(. eq 8) then 0 else position()])</entry>
<entry key="K-SeqExprCast-444">xs:float("3.4e5") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="K-FilterExpr-71">deep-equal((0, 1, 2), (0, 1, 2)[if(. eq 8) then "str" else position()])</entry>
<entry key="K-SeqExprCast-443">boolean(xs:float("3.4e5"))</entry>
<entry key="Axes055-1">fn:count(/self::node())</entry>
<entry key="K-FilterExpr-70">deep-equal((1, 2), (0, 1, 2)[if(. eq 1) then 2 else 3])</entry>
<entry key="K-SeqExprCast-442">xs:float(xs:untypedAtomic( "3.4e5" )) eq xs:float("3.4e5")</entry>
<entry key="K-SeqExprCast-440">xs:float(" 3.4e5 ") eq xs:float(" 3.4e5 ")</entry>
<entry key="cbcl-promotion-001">
        string-join( (xs:anyURI('http://www.microsoft.com'), xs:anyURI('http://www.google.com/')), ' ')
      </entry>
<entry key="K2-SeqExprCast-189">xs:Name("a")</entry>
<entry key="K2-SeqExprCast-188">xs:Name(":")</entry>
<entry key="K2-SeqExprCast-187">xs:Name("_")</entry>
<entry key="K2-SeqExprCast-186">xs:Name("::::")</entry>
<entry key="K-FilterExpr-69">deep-equal((1, 2, 3), (1, 2, 3)[number(.)])</entry>
<entry key="K-FilterExpr-68">(0, 1, 2)[position() eq 3]</entry>
<entry key="K-FilterExpr-67">(0, 1, 2)[3 eq position()]</entry>
<entry key="K-SeqExprCast-439">subsequence(("dummy", 1.1, xs:float("3.4e5")), 3, 1) instance of xs:float</entry>
<entry key="K-FilterExpr-66">(0, 1, 2)[1 eq position()]</entry>
<entry key="K-FilterExpr-65">deep-equal((0, 1, 2), (0, 1, 2)[position() = position()])</entry>
<entry key="K-FilterExpr-64">deep-equal((0, 1, 2), (0, 1, 2)[position() eq position()])</entry>
<entry key="K-FilterExpr-63">deep-equal((1, 2, 3), (1, 2, 3)[3 ge position()])</entry>
<entry key="K-SeqExprCast-435">xs:string("an arbitrary string") castable as xs:string</entry>
<entry key="K-FilterExpr-62">deep-equal((1, 2, 3), (1, 2, 3)[position() ge 1])</entry>
<entry key="K-SeqExprCast-434">xs:string("an arbitrary string") cast as xs:string eq xs:string("an arbitrary string")</entry>
<entry key="K-FilterExpr-61">deep-equal((1, 2, 3), (1, 2, 3)[3 &gt;= position()])</entry>
<entry key="K-SeqExprCast-433">xs:string("an arbitrary string") castable as xs:untypedAtomic</entry>
<entry key="K-FilterExpr-60">deep-equal((1, 2, 3), (1, 2, 3)[position() &gt;= 1])</entry>
<entry key="K-SeqExprCast-432">xs:string("an arbitrary string") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="K-SeqExprCast-431">boolean(xs:string("an arbitrary string"))</entry>
<entry key="K-SeqExprCast-430">xs:string(xs:untypedAtomic( "an arbitrary string" )) eq xs:string("an arbitrary string")</entry>
<entry key="Axes044-2">fn:count(/child::*)</entry>
<entry key="Axes044-1">fn:count(/child::*)</entry>
<entry key="K2-SeqExprCast-174">xs:language("abc-a-1-1b01efil")</entry>
<entry key="K2-SeqExprCast-173">xs:language("abc-a-1-1b1efil")</entry>
<entry key="K2-SeqExprCast-172">xs:language("abc-a-1b1efikl")</entry>
<entry key="K-SeqExprCast-429">xs:string("") eq xs:string("")</entry>
<entry key="K2-SeqExprCast-171">xs:language("abc-ab1efikl")</entry>
<entry key="K-SeqExprCast-428">xs:string(" an arbitrary string ") eq xs:string(" an arbitrary string ")</entry>
<entry key="K-SeqExprCast-427">subsequence(("dummy", 1.1, xs:string("an arbitrary string")), 3, 1) instance of xs:string</entry>
<entry key="CastableAs199">xs:double("1e5") castable as xs:untypedAtomic</entry>
<entry key="CastableAs198">xs:float("5.4321E-100") castable as xs:anyURI</entry>
<entry key="K-SeqExprCast-423">not(xs:untypedAtomic("an arbitrary string(untypedAtomic source)") castable as xs:QName)</entry>
<entry key="K-FilterExpr-50">deep-equal(("a", "b", "c"), (0, 1, 2, "a", "b", "c")[. instance of xs:string])</entry>
<entry key="CastableAs197">xs:float("5.4321E-100") castable as xs:hexBinary</entry>
<entry key="CastableAs196">xs:float("5.4321E-100") castable as xs:base64Binary</entry>
<entry key="K-SeqExprCast-421">xs:untypedAtomic("an arbitrary string(untypedAtomic source)") castable as xs:string</entry>
<entry key="CastableAs195">xs:float("NaN") castable as xs:boolean</entry>
<entry key="K-SeqExprCast-420">xs:untypedAtomic("an arbitrary string(untypedAtomic source)") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="CastableAs194">xs:float("-INF") castable as xs:boolean</entry>
<entry key="CastableAs193">xs:float("1e5") castable as xs:boolean</entry>
<entry key="CastableAs192">xs:float("-0.0E0") castable as xs:boolean</entry>
<entry key="CastableAs191">xs:float("5.4321E-100") castable as xs:gMonth</entry>
<entry key="CastableAs190">xs:float("5.4321E-100") castable as xs:gDay</entry>
<entry key="Axes033-4">fn:count(//center/descendant::node())</entry>
<entry key="Axes033-3">fn:count(//center/descendant::node())</entry>
<entry key="Axes033-2">fn:count(//center/descendant::node())</entry>
<entry key="Axes033-1">fn:count(//center/descendant::node())</entry>
<entry key="K-FilterExpr-48">empty((1, 2, 3)[3e8])</entry>
<entry key="K-FilterExpr-47">(0, 2, 4, 5)[1][1][1][true()][1][true()][1] eq 0</entry>
<entry key="K-SeqExprCast-419">xs:untypedAtomic("an arbitrary string(untypedAtomic source)") castable as xs:untypedAtomic</entry>
<entry key="K-FilterExpr-46">empty((1, 2, 3)[3][0])</entry>
<entry key="K-SeqExprCast-418">xs:untypedAtomic("an arbitrary string(untypedAtomic source)") cast as xs:untypedAtomic eq xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="K-FilterExpr-45">empty((1, 2, 3)[3][2])</entry>
<entry key="K-SeqExprCast-417">boolean(xs:untypedAtomic("an arbitrary string(untypedAtomic source)"))</entry>
<entry key="K-FilterExpr-44">deep-equal((1, 2, 3), (1, 2, 3)[2 or 3])</entry>
<entry key="K-SeqExprCast-416">xs:untypedAtomic(xs:untypedAtomic( "an arbitrary string(untypedAtomic source)" )) eq xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="K-FilterExpr-43">empty((1, 2, 3)[position() eq 2 or position() eq 3][3])</entry>
<entry key="K-SeqExprCast-415">xs:untypedAtomic("") eq xs:untypedAtomic("")</entry>
<entry key="K-FilterExpr-42">(1, 2, 3)[position() eq 2 or position() eq 3][2] eq 3</entry>
<entry key="CastableAs189">xs:float("5.4321E-100") castable as xs:gMonthDay</entry>
<entry key="K-SeqExprCast-414">xs:untypedAtomic(" an arbitrary string(untypedAtomic source) ") eq xs:untypedAtomic(" an arbitrary string(untypedAtomic source) ")</entry>
<entry key="K-FilterExpr-41">(0, 1, 2)[true()][1] eq 0</entry>
<entry key="CastableAs188">xs:float("5.4321E-100") castable as xs:gYear</entry>
<entry key="K-SeqExprCast-413">subsequence(("dummy", 1.1, xs:untypedAtomic("an arbitrary string(untypedAtomic source)")), 3, 1) instance of xs:untypedAtomic</entry>
<entry key="CastableAs187">xs:float("5.4321E-100") castable as xs:gYearMonth</entry>
<entry key="CastableAs186">xs:float("5.4321E-100") castable as xs:date</entry>
<entry key="CastableAs185">xs:float("5.4321E-100") castable as xs:time</entry>
<entry key="CastableAs184">xs:float("5.4321E-100") castable as xs:dateTime</entry>
<entry key="K-SeqExprCast-99">exists(xs:hexBinary("FF"))</entry>
<entry key="CastableAs183">xs:float("5.4321E-100") castable as xs:dayTimeDuration</entry>
<entry key="K-SeqExprCast-98">exists(xs:hexBinary("Ab08bcFFAA08b6"))</entry>
<entry key="CastableAs182">xs:float("5.4321E-100") castable as xs:yearMonthDuration</entry>
<entry key="CastableAs181">xs:float("-1.75e-3") castable as xs:duration</entry>
<entry key="CastableAs180">xs:float("INF") castable as xs:integer</entry>
<entry key="K-SeqExprCast-92">xs:integer(6) instance of xs:decimal</entry>
<entry key="generalexpression99">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="K-SeqExprCast-91">xs:integer(6) instance of xs:integer</entry>
<entry key="generalexpression98">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = ($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1])</entry>
<entry key="K-SeqExprCast-90">xs:integer(3.1) eq 3</entry>
<entry key="generalexpression97">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) =
         ($works/works/employee[1]/hours[1])</entry>
<entry key="generalexpression93">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = (10000,50000)</entry>
<entry key="cbcl-every-002">every $x in (1 to 10)[. mod 2 = 0] satisfies true()</entry>
<entry key="generalexpression92">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = (50000)</entry>
<entry key="K2-SeqExprCast-158">xs:language(true())</entry>
<entry key="cbcl-every-001">every $x in (1 to 10)[. div 2 = 11] satisfies false()</entry>
<entry key="generalexpression91">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = 10000</entry>
<entry key="K2-SeqExprCast-157">xs:language(false())</entry>
<entry key="generalexpression90">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = ()</entry>
<entry key="K-FilterExpr-39">deep-equal((1, 2, 3), (1, 2, 3)[xs:untypedAtomic("content")])</entry>
<entry key="K-FilterExpr-37">deep-equal((1, 2, 3), (1, 2, 3)[xs:anyURI("example.com/")])</entry>
<entry key="K-SeqExprCast-409">xs:string(xs:date("2002-02-15")) eq "2002-02-15"</entry>
<entry key="K-FilterExpr-36">(1, current-time())[1]</entry>
<entry key="K-SeqExprCast-408">xs:string(xs:date("2002-02-15")) eq "2002-02-15"</entry>
<entry key="K-FilterExpr-35">1[true()] eq 1</entry>
<entry key="K-SeqExprCast-407">xs:string(xs:date("2002-02-15")) eq "2002-02-15"</entry>
<entry key="K-FilterExpr-34">deep-equal((2, 3, 4, 5, 7, 8, 9), (0, 2, 3, 4, 5, 5, 7, 8, 10 - 1)[.])</entry>
<entry key="K-SeqExprCast-406">xs:string(xs:date("2002-02-15")) eq "2002-02-15"</entry>
<entry key="K-FilterExpr-33">deep-equal((true(), true(), true()), (false(), true(), true(), false(), true(), false())[.])</entry>
<entry key="K-SeqExprCast-405">xs:string(xs:date("2002-02-15")) eq "2002-02-15"</entry>
<entry key="K-FilterExpr-32">deep-equal((1, 2, 3), (1, 2, 3)[. instance of xs:integer])</entry>
<entry key="CastableAs179">xs:float("1e5") castable as xs:integer</entry>
<entry key="K-SeqExprCast-404">xs:string(xs:date("2002-02-15")) eq "2002-02-15"</entry>
<entry key="K-FilterExpr-31">deep-equal((1, 2, 3), (1, 2, 3)[true()])</entry>
<entry key="CastableAs178">xs:float("-0.0E0") castable as xs:integer</entry>
<entry key="K-SeqExprCast-403">xs:string(xs:date("2002-02-15")) eq "2002-02-15"</entry>
<entry key="CastableAs177">xs:float("-1.75e-3") castable as xs:decimal</entry>
<entry key="K-SeqExprCast-402">xs:string(xs:date("1999-12-01+00:00")) eq "1999-12-01Z"</entry>
<entry key="CastableAs176">xs:float("1e5") castable as xs:decimal</entry>
<entry key="K-SeqExprCast-401">xs:string(xs:date("1999-12-01-00:00")) eq "1999-12-01Z"</entry>
<entry key="CastableAs175">xs:float("5.4321E-100") castable as xs:decimal</entry>
<entry key="K-SeqExprCast-400">xs:dateTime(xs:date("2002-11-23-13:37")) eq xs:dateTime("2002-11-23T00:00:00.000-13:37")</entry>
<entry key="CastableAs174">xs:float("-0.0E0") castable as xs:decimal</entry>
<entry key="K-SeqExprCast-89">xs:integer(3.1) eq 3</entry>
<entry key="CastableAs173">xs:float("-INF") castable as xs:double</entry>
<entry key="K-SeqExprCast-88">xs:integer(3) eq 3</entry>
<entry key="CastableAs172">xs:float("-0.0E0") castable as xs:double</entry>
<entry key="K-SeqExprCast-87">xs:decimal(6) instance of xs:decimal</entry>
<entry key="CastableAs171">xs:float("INF") castable as xs:float</entry>
<entry key="K-SeqExprCast-86">xs:decimal(3.1) eq 3.1</entry>
<entry key="generalexpression299">() &lt;= 10000</entry>
<entry key="CastableAs170">xs:float("-1.75e-3") castable as xs:float</entry>
<entry key="K-SeqExprCast-85">xs:decimal(3) eq 3</entry>
<entry key="generalexpression298">() &lt;= ()</entry>
<entry key="K-SeqExprCast-84">xs:string(xs:float("-INF")) eq "-INF"</entry>
<entry key="generalexpression297">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &lt; ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="K-SeqExprCast-83">xs:string(xs:float("INF")) eq "INF"</entry>
<entry key="generalexpression296">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &lt; ($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1])</entry>
<entry key="cbcl-castable-name-004">'N A M E' castable as xs:Name</entry>
<entry key="K-SeqExprCast-82">xs:float(6) instance of xs:float</entry>
<entry key="generalexpression295">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &lt; ($works/works/employee[1]/hours[1])</entry>
<entry key="generalexpression89">($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1]) = 
         ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="cbcl-castable-name-003">'NCName' castable as xs:Name</entry>
<entry key="K-SeqExprCast-81">xs:float(3.1) eq 3.1</entry>
<entry key="generalexpression88">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="cbcl-castable-name-002">fn:current-time() castable as xs:Name</entry>
<entry key="K-SeqExprCast-80">xs:float(3) eq 3</entry>
<entry key="generalexpression87">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = (/works/employee[1]/hours[1])</entry>
<entry key="cbcl-castable-name-001">xs:NCName('NCName') castable as xs:Name</entry>
<entry key="generalexpression291">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &lt; (10000,50000)</entry>
<entry key="generalexpression290">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &lt; (50000)</entry>
<entry key="generalexpression83">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = (10000,50000)</entry>
<entry key="generalexpression82">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = (50000)</entry>
<entry key="generalexpression81">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = 10000</entry>
<entry key="generalexpression80">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = ()</entry>
<entry key="Axes011-3">fn:count(//west/@west-attr-2)</entry>
<entry key="K-FilterExpr-29">(0, 1)[1] eq 0</entry>
<entry key="K2-SeqExprCast-144">xs:positiveInteger("000000001")</entry>
<entry key="Axes011-2">fn:count(//west/@west-attr-2)</entry>
<entry key="K-FilterExpr-28">0[1] eq 0</entry>
<entry key="function-literal-399">exists(Q{http://www.w3.org/2005/xpath-functions}serialize#2)</entry>
<entry key="K2-SeqExprCast-143">xs:unsignedShort("000000001")</entry>
<entry key="Axes011-1">fn:count(//west/@west-attr-2)</entry>
<entry key="K-FilterExpr-27">(0)[1] eq 0</entry>
<entry key="function-literal-398">Q{http://www.w3.org/2005/xpath-functions}serialize#1((1, true()))</entry>
<entry key="K2-SeqExprCast-142">xs:unsignedByte("000000001")</entry>
<entry key="K-FilterExpr-26">(0, 1, 2)[3] eq 2</entry>
<entry key="function-literal-397">exists(Q{http://www.w3.org/2005/xpath-functions}serialize#1)</entry>
<entry key="K2-SeqExprCast-141">xs:unsignedInt("000000001")</entry>
<entry key="K-FilterExpr-25">(0, 1, 2)[2] eq 1</entry>
<entry key="function-literal-396">Q{http://www.w3.org/2005/xpath-functions}parse-xml-fragment#1('&lt;doc /&gt;')</entry>
<entry key="K2-SeqExprCast-140">xs:unsignedLong("000000001")</entry>
<entry key="K-FilterExpr-24">(0, 1, 2)[1] eq 0</entry>
<entry key="function-literal-395">exists(Q{http://www.w3.org/2005/xpath-functions}parse-xml-fragment#1)</entry>
<entry key="K-FilterExpr-23">(1, 2, 3)[3.0e0] eq 3</entry>
<entry key="function-literal-394">Q{http://www.w3.org/2005/xpath-functions}parse-xml#1('&lt;doc /&gt;')</entry>
<entry key="K-FilterExpr-22">(1, 2, 3)[3.0] eq 3</entry>
<entry key="function-literal-393">exists(Q{http://www.w3.org/2005/xpath-functions}parse-xml#1)</entry>
<entry key="CastableAs169">xs:float("5.4321E-100") castable as xs:float</entry>
<entry key="K-FilterExpr-21">(1, 2, 3)[3] eq 3</entry>
<entry key="function-literal-392">Q{http://www.w3.org/2005/xpath-functions}available-environment-variables#0()</entry>
<entry key="CastableAs168">xs:float("NaN") castable as xs:string</entry>
<entry key="K-FilterExpr-20">(1, 2, 3)[1.0e0] eq 1</entry>
<entry key="function-literal-391">exists(Q{http://www.w3.org/2005/xpath-functions}available-environment-variables#0)</entry>
<entry key="CastableAs167">xs:float("-0.0E0") castable as xs:string</entry>
<entry key="function-literal-390">Q{http://www.w3.org/2005/xpath-functions}environment-variable#1('should-not-exist')</entry>
<entry key="CastableAs166">xs:float("-INF") castable as xs:untypedAtomic</entry>
<entry key="CastableAs165">xs:float("1e5") castable as xs:untypedAtomic</entry>
<entry key="CastableAs164">xs:string("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:anyURI</entry>
<entry key="K-SeqExprCast-79">xs:string(xs:double("-INF")) eq "-INF"</entry>
<entry key="CastableAs163">xs:string("true") castable as xs:anyURI</entry>
<entry key="K-SeqExprCast-78">xs:string(xs:double("INF")) eq "INF"</entry>
<entry key="CastableAs162">xs:string("http://www.example.com/~b%C3%A9b%C3%A9") castable as xs:anyURI</entry>
<entry key="K-SeqExprCast-77">xs:double(6) instance of xs:double</entry>
<entry key="CastableAs161">xs:string("D74D35D35D35") castable as xs:hexBinary</entry>
<entry key="K-SeqExprCast-76">xs:double(3.1) eq 3.1</entry>
<entry key="generalexpression289">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &lt; 10000</entry>
<entry key="CastableAs160">xs:string("0fb7") castable as xs:hexBinary</entry>
<entry key="K-SeqExprCast-75">xs:double(3) eq 3</entry>
<entry key="generalexpression288">
         ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) &lt; ()</entry>
<entry key="K-SeqExprCast-74">xs:anyURI("example.com/") cast as xs:anyURI eq xs:anyURI('example.com/')</entry>
<entry key="generalexpression287">
         ($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1]) &lt; ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="K-SeqExprCast-73">xs:untypedAtomic("example.com/") cast as xs:anyURI eq xs:anyURI('example.com/')</entry>
<entry key="generalexpression286">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &lt; (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="K-SeqExprCast-72">"example.com/" cast as xs:anyURI eq xs:anyURI('example.com/')</entry>
<entry key="generalexpression285">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &lt; (/works/employee[1]/hours[1])</entry>
<entry key="generalexpression79">($works/works/employee[1]/hours[1]) = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression78">(/works/employee[1]/hours[1]) = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="K-SeqExprCast-70">(xs:QName("local-name") cast as xs:QName) eq xs:QName("local-name")</entry>
<entry key="generalexpression77">(/works/employee[1]/hours[1]) = (/works/employee[1]/hours[1])</entry>
<entry key="generalexpression281">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &lt; (10000,50000)</entry>
<entry key="quantExpr-9">some $x in (1, 2) satisfies fn:string($x) = "1"</entry>
<entry key="generalexpression280">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &lt; (50000)</entry>
<entry key="quantExpr-8">some $x in (1, 2) satisfies fn:avg(($x, 1)) = 1</entry>
<entry key="generalexpression73">(/works/employee[1]/hours[1]) = (10000,50000)</entry>
<entry key="K2-SeqExprCast-139">xs:nonNegativeInteger("000000001")</entry>
<entry key="quantExpr-7">some $x in (1, 2) satisfies $x idiv 2 = 1</entry>
<entry key="generalexpression72">(/works/employee[1]/hours[1]) = (50000)</entry>
<entry key="K2-SeqExprCast-138">xs:byte("000000001")</entry>
<entry key="quantExpr-6">some $x in (1, 2) satisfies $x div 2 = 1</entry>
<entry key="generalexpression71">(/works/employee[1]/hours[1]) = 10000</entry>
<entry key="K2-SeqExprCast-137">xs:short("000000001")</entry>
<entry key="quantExpr-5">some $x in (1, 2) satisfies $x * 2 = 4</entry>
<entry key="generalexpression70">(/works/employee[1]/hours[1]) = ()</entry>
<entry key="K2-SeqExprCast-136">xs:int("000000001")</entry>
<entry key="quantExpr-4">some $x in (1, 2) satisfies $x - 2 = 0</entry>
<entry key="K2-SeqExprCast-135">xs:long("000000001")</entry>
<entry key="quantExpr-3">some $x in (1, 2) satisfies $x - 2 = 2</entry>
<entry key="K-FilterExpr-19">(1, 2, 3)[1.0] eq 1</entry>
<entry key="K2-SeqExprCast-134">xs:negativeInteger("-000000001")</entry>
<entry key="quantExpr-2">some $x in (1, 2) satisfies $x + $x = 2</entry>
<entry key="K-FilterExpr-18">(1, 2, 3)[1] eq 1</entry>
<entry key="function-literal-389">exists(Q{http://www.w3.org/2005/xpath-functions}environment-variable#1)</entry>
<entry key="K2-SeqExprCast-133">xs:nonPositiveInteger("-000000000")</entry>
<entry key="quantExpr-1">some $x in (1, 2) satisfies $x + $x = 3</entry>
<entry key="K-FilterExpr-17">not(empty((1, 2, 3)[3]))</entry>
<entry key="function-literal-388">Q{http://www.w3.org/2005/xpath-functions}unparsed-text-available#2('http://www.w3.org/fots/unparsed-text/text-plain-utf-8.txt', 'utf-8')</entry>
<entry key="K2-SeqExprCast-132">xs:nonPositiveInteger("-000000001")</entry>
<entry key="K-FilterExpr-16">not(empty((1, 2, 3)[1]))</entry>
<entry key="function-literal-387">exists(Q{http://www.w3.org/2005/xpath-functions}unparsed-text-available#2)</entry>
<entry key="K-FilterExpr-15">empty((1, 2, 3)[4.01])</entry>
<entry key="function-literal-386">Q{http://www.w3.org/2005/xpath-functions}unparsed-text-available#1('http://www.w3.org/fots/unparsed-text/text-plain-utf-8.txt')</entry>
<entry key="K-GenCompLTEQ-8">true() &lt;= xs:untypedAtomic("true")</entry>
<entry key="K-FilterExpr-14">empty((1, 2, 3)[4.1])</entry>
<entry key="function-literal-385">exists(Q{http://www.w3.org/2005/xpath-functions}unparsed-text-available#1)</entry>
<entry key="K-GenCompLTEQ-7">xs:untypedAtomic("false") &lt;= false()</entry>
<entry key="K-FilterExpr-13">empty((1, 2, 3)[4])</entry>
<entry key="function-literal-384">Q{http://www.w3.org/2005/xpath-functions}unparsed-text-lines#2('http://www.w3.org/fots/unparsed-text/text-plain-utf-8.txt', 'utf-8')</entry>
<entry key="K-GenCompLTEQ-6">false() &lt;= xs:untypedAtomic("false")</entry>
<entry key="K-FilterExpr-12">empty((1, 2, 3)[1.01])</entry>
<entry key="function-literal-383">exists(Q{http://www.w3.org/2005/xpath-functions}unparsed-text-lines#2)</entry>
<entry key="K-GenCompLTEQ-5">xs:untypedAtomic("false") &lt;= false()</entry>
<entry key="CastableAs159">xs:string("010010101") castable as xs:hexBinary</entry>
<entry key="K-FilterExpr-11">empty((1, 2, 3)[1.1])</entry>
<entry key="function-literal-382">Q{http://www.w3.org/2005/xpath-functions}unparsed-text-lines#1('http://www.w3.org/fots/unparsed-text/text-plain-utf-8.txt')</entry>
<entry key="K-GenCompLTEQ-4">1 &lt;= 1</entry>
<entry key="CastableAs158">xs:string("true") castable as xs:hexBinary</entry>
<entry key="K-FilterExpr-10">empty((1, 2, 3)[0.1])</entry>
<entry key="function-literal-381">exists(Q{http://www.w3.org/2005/xpath-functions}unparsed-text-lines#1)</entry>
<entry key="K-GenCompLTEQ-3">not(() &lt;= 1 )</entry>
<entry key="CastableAs157">xs:string("D74D35D35D35") castable as xs:base64Binary</entry>
<entry key="function-literal-380">Q{http://www.w3.org/2005/xpath-functions}unparsed-text#2('http://www.w3.org/fots/unparsed-text/text-plain-utf-8.txt', 'utf-8')</entry>
<entry key="K-GenCompLTEQ-2">not(1 &lt;= () )</entry>
<entry key="CastableAs156">xs:string("00000000") castable as xs:base64Binary</entry>
<entry key="K-GenCompLTEQ-1">not(() &lt;= () )</entry>
<entry key="CastableAs155">xs:string("true") castable as xs:base64Binary</entry>
<entry key="CastableAs154">xs:string("true") castable as xs:boolean</entry>
<entry key="CastableAs153">xs:string("0") castable as xs:boolean</entry>
<entry key="CastableAs152">xs:string("0.0") castable as xs:boolean</entry>
<entry key="CastableAs151">xs:string("true") castable as xs:gMonth</entry>
<entry key="generalexpression279">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &lt; 10000</entry>
<entry key="CastableAs150">xs:string("--05Z") castable as xs:gMonth</entry>
<entry key="generalexpression278">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) &lt; ()</entry>
<entry key="generalexpression277">
          ($works/works/employee[1]/hours[1]) &lt; ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression276">(/works/employee[1]/hours[1]) &lt; (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression275">(/works/employee[1]/hours[1]) &lt; (/works/employee[1]/hours[1])</entry>
<entry key="K-SeqExprCast-60">xs:untypedAtomic(xs:decimal(3)) eq '3'</entry>
<entry key="instanceof99">12678967.543233 instance of xs:int</entry>
<entry key="generalexpression271">(/works/employee[1]/hours[1]) &lt; (10000,50000)</entry>
<entry key="instanceof98">12678967.543233 instance of xs:integer</entry>
<entry key="generalexpression270">(/works/employee[1]/hours[1]) &lt; (50000)</entry>
<entry key="instanceof97">12678967.543233 instance of xs:decimal</entry>
<entry key="instanceof96">12678967.543233 instance of xs:string</entry>
<entry key="instanceof95">12678967.543233 instance of xs:anyURI</entry>
<entry key="instanceof94">12678967.543233 instance of xs:double</entry>
<entry key="instanceof93">12678967.543233 instance of xs:float</entry>
<entry key="instanceof92">12678967.543233 instance of xs:boolean</entry>
<entry key="function-literal-379">exists(Q{http://www.w3.org/2005/xpath-functions}unparsed-text#2)</entry>
<entry key="instanceof91">12678967.543233 instance of xs:date</entry>
<entry key="function-literal-378">Q{http://www.w3.org/2005/xpath-functions}unparsed-text#1('http://www.w3.org/fots/unparsed-text/text-plain-utf-8.txt')</entry>
<entry key="instanceof90">12678967.543233 instance of xs:time</entry>
<entry key="function-literal-377">exists(Q{http://www.w3.org/2005/xpath-functions}unparsed-text#1)</entry>
<entry key="function-literal-376">Q{http://www.w3.org/2005/xpath-functions}uri-collection#1(())</entry>
<entry key="function-literal-375">exists(Q{http://www.w3.org/2005/xpath-functions}uri-collection#1)</entry>
<entry key="function-literal-374">Q{http://www.w3.org/2005/xpath-functions}uri-collection#0()</entry>
<entry key="function-literal-373">exists(Q{http://www.w3.org/2005/xpath-functions}uri-collection#0)</entry>
<entry key="CastableAs149">xs:string("--12-05:00") castable as xs:gMonth</entry>
<entry key="function-literal-372">Q{http://www.w3.org/2005/xpath-functions}collection#1(())</entry>
<entry key="CastableAs148">xs:string("--05") castable as xs:gMonth</entry>
<entry key="function-literal-371">exists(Q{http://www.w3.org/2005/xpath-functions}collection#1)</entry>
<entry key="CastableAs147">xs:string("true") castable as xs:gDay</entry>
<entry key="function-literal-370">Q{http://www.w3.org/2005/xpath-functions}collection#0()</entry>
<entry key="CastableAs146">xs:string("---31Z") castable as xs:gDay</entry>
<entry key="CastableAs145">xs:string("---03-05:00") castable as xs:gDay</entry>
<entry key="CastableAs144">xs:string("---31") castable as xs:gDay</entry>
<entry key="Axes126">/*/*/*/namespace::*[not(name())]</entry>
<entry key="K-SeqExprCast-59">xs:untypedAtomic(xs:integer(3)) eq '3'</entry>
<entry key="CastableAs143">xs:string("true") castable as xs:gMonthDay</entry>
<entry key="Axes125">/*/*/namespace::*[not(name())]</entry>
<entry key="K-SeqExprCast-58">xs:untypedAtomic(xs:string(3)) eq '3'</entry>
<entry key="CastableAs142">xs:string("--05-31Z") castable as xs:gMonthDay</entry>
<entry key="Axes124">/*/namespace::*[not(name())]</entry>
<entry key="K-SeqExprCast-57">xs:untypedAtomic(xs:double(3)) eq '3'</entry>
<entry key="CastableAs141">xs:string("--05-31+14:00") castable as xs:gMonthDay</entry>
<entry key="Axes123">/*/namespace::xlink is /*/namespace::*[. = 'http://www.w3.org/1999/xlink']</entry>
<entry key="K-SeqExprCast-56">xs:untypedAtomic(xs:anyURI('example.com/')) eq 'example.com/'</entry>
<entry key="generalexpression269">(/works/employee[1]/hours[1]) &lt; 10000</entry>
<entry key="CastableAs140">xs:string("--05-31") castable as xs:gMonthDay</entry>
<entry key="Axes122">/*/namespace::xlink is /*/*[1]/namespace::xlink</entry>
<entry key="K-SeqExprCast-55">(xs:QName("fn:local-name") cast as xs:untypedAtomic) eq xs:untypedAtomic("fn:local-name")</entry>
<entry key="generalexpression268">(/works/employee[1]/hours[1]) &lt; ()</entry>
<entry key="Axes121">string(/*/namespace::xlink)</entry>
<entry key="K-SeqExprCast-54">(xs:QName("local-name") cast as xs:untypedAtomic) eq xs:untypedAtomic("local-name")</entry>
<entry key="Axes120">/*/namespace::*/name()</entry>
<entry key="K-SeqExprCast-53">true() cast as xs:untypedAtomic instance of xs:untypedAtomic</entry>
<entry key="K-SeqExprCast-52">false() cast as xs:untypedAtomic instance of xs:untypedAtomic</entry>
<entry key="K-SeqExprCast-51">true() cast as xs:untypedAtomic eq xs:untypedAtomic("true")</entry>
<entry key="K-SeqExprCast-50">false() cast as xs:untypedAtomic eq xs:untypedAtomic("false")</entry>
<entry key="instanceof89">12678967.543233 instance of xs:dateTime</entry>
<entry key="instanceof88">"A String Function" instance of xs:int</entry>
<entry key="instanceof87">"A String Function" instance of xs:integer</entry>
<entry key="instanceof86">"A String Function" instance of xs:decimal</entry>
<entry key="instanceof85">"A String Function" instance of xs:string</entry>
<entry key="instanceof84">"A String Function" instance of xs:anyURI</entry>
<entry key="instanceof83">"A String Function" instance of xs:double</entry>
<entry key="instanceof82">"A String Function" instance of xs:float</entry>
<entry key="function-literal-369">exists(Q{http://www.w3.org/2005/xpath-functions}collection#0)</entry>
<entry key="instanceof81">"A String Function" instance of xs:boolean</entry>
<entry key="function-literal-368">Q{http://www.w3.org/2005/xpath-functions}doc-available#1('http://www.example.org/unknown-document')</entry>
<entry key="instanceof80">"A String Function" instance of xs:date</entry>
<entry key="function-literal-367">exists(Q{http://www.w3.org/2005/xpath-functions}doc-available#1)</entry>
<entry key="function-literal-366">Q{http://www.w3.org/2005/xpath-functions}doc#1('http://www.w3.org/fots/fn/function-lookup/function-lookup.xml')</entry>
<entry key="function-literal-365">exists(Q{http://www.w3.org/2005/xpath-functions}doc#1)</entry>
<entry key="function-literal-364">Q{http://www.w3.org/2005/xpath-functions}generate-id#1(())</entry>
<entry key="function-literal-363">exists(Q{http://www.w3.org/2005/xpath-functions}generate-id#1)</entry>
<entry key="CastableAs139">xs:string("true") castable as xs:gYear</entry>
<entry key="function-literal-362">/Q{http://www.w3.org/2005/xpath-functions}generate-id#0()</entry>
<entry key="CastableAs138">xs:string("1999Z") castable as xs:gYear</entry>
<entry key="function-literal-361">exists(Q{http://www.w3.org/2005/xpath-functions}generate-id#0)</entry>
<entry key="CastableAs137">xs:string("-0012-05:00") castable as xs:gYear</entry>
<entry key="Axes119">/*/namespace::*/..</entry>
<entry key="function-literal-360">Q{http://www.w3.org/2005/xpath-functions}idref#2(('id1', 'id2'), /)</entry>
<entry key="CastableAs136">xs:string("1999") castable as xs:gYear</entry>
<entry key="Axes118">/*/namespace::*</entry>
<entry key="CastableAs135">xs:string("true") castable as xs:gYearMonth</entry>
<entry key="CastableAs134">xs:string("1999-05Z") castable as xs:gYearMonth</entry>
<entry key="Axes116">/*/namespace::*[self::namespace-node()]</entry>
<entry key="K-SeqExprCast-49">"untyped a " cast as xs:untypedAtomic eq xs:untypedAtomic("untyped a ")</entry>
<entry key="CastableAs133">xs:string("-0012-12-05:00") castable as xs:gYearMonth</entry>
<entry key="K-SeqExprCast-48">xs:string(xs:decimal(3)) eq '3'</entry>
<entry key="CastableAs132">xs:string("1999-05") castable as xs:gYearMonth</entry>
<entry key="Axes114">/*/namespace::namespace-node()</entry>
<entry key="K-SeqExprCast-47">xs:string(xs:integer(3)) eq '3'</entry>
<entry key="CastableAs131">xs:string("true") castable as xs:date</entry>
<entry key="Axes113">/*/namespace-node()</entry>
<entry key="K-SeqExprCast-46">xs:string(xs:string(3)) eq '3'</entry>
<entry key="CastableAs130">xs:string("1999-05-31Z") castable as xs:date</entry>
<entry key="K-SeqExprCast-45">xs:string(xs:double(3)) eq '3'</entry>
<entry key="K-SeqExprCast-44">xs:string(xs:anyURI('example.com/')) eq 'example.com/'</entry>
<entry key="K-SeqExprCast-43">(xs:QName("local-name") cast as xs:string) eq "local-name"</entry>
<entry key="K-SeqExprCast-42">(xs:QName("fn:local-name") cast as xs:string) eq "fn:local-name"</entry>
<entry key="K-SeqExprCast-41">" white space left alone" cast as xs:string eq xs:string(" white space left alone")</entry>
<entry key="K-SeqExprCast-40">xs:boolean('0') cast as xs:string eq 'false'</entry>
<entry key="instanceof79">"A String Function" instance of xs:time</entry>
<entry key="instanceof78">"A String Function" instance of xs:dateTime</entry>
<entry key="instanceof77">xs:anyURI("http://www.example.com") instance of xs:int</entry>
<entry key="instanceof76">xs:anyURI("http://www.example.com") instance of xs:integer</entry>
<entry key="instanceof75">xs:anyURI("http://www.example.com") instance of xs:decimal</entry>
<entry key="instanceof74">xs:anyURI("http://www.example.com") instance of xs:string</entry>
<entry key="instanceof73">xs:anyURI("http://www.example.com") instance of xs:anyURI</entry>
<entry key="instanceof72">xs:anyURI("http://www.example.com") instance of xs:double</entry>
<entry key="function-literal-359">exists(Q{http://www.w3.org/2005/xpath-functions}idref#2)</entry>
<entry key="instanceof71">xs:anyURI("http://www.example.com") instance of xs:float</entry>
<entry key="function-literal-358">/Q{http://www.w3.org/2005/xpath-functions}idref#1(('id1', 'id2'))</entry>
<entry key="instanceof70">xs:anyURI("http://www.example.com") instance of xs:boolean</entry>
<entry key="function-literal-357">exists(Q{http://www.w3.org/2005/xpath-functions}idref#1)</entry>
<entry key="function-literal-356">Q{http://www.w3.org/2005/xpath-functions}element-with-id#2(('id1', 'id2'), /)</entry>
<entry key="function-literal-355">exists(Q{http://www.w3.org/2005/xpath-functions}element-with-id#2)</entry>
<entry key="function-literal-354">/Q{http://www.w3.org/2005/xpath-functions}element-with-id#1(('id1', 'id2'))</entry>
<entry key="function-literal-353">exists(Q{http://www.w3.org/2005/xpath-functions}element-with-id#1)</entry>
<entry key="CastableAs129">xs:string("-0012-12-03-05:00") castable as xs:date</entry>
<entry key="function-literal-352">Q{http://www.w3.org/2005/xpath-functions}id#2(('id1', 'id2'), /)</entry>
<entry key="CastableAs128">xs:string("1999-05-31") castable as xs:date</entry>
<entry key="function-literal-351">exists(Q{http://www.w3.org/2005/xpath-functions}id#2)</entry>
<entry key="CastableAs127">xs:string("true") castable as xs:time</entry>
<entry key="function-literal-350">/Q{http://www.w3.org/2005/xpath-functions}id#1(('id1', 'id2'))</entry>
<entry key="CastableAs126">xs:string("13:20:00Z") castable as xs:time</entry>
<entry key="CastableAs125">xs:string("13:20:02.123") castable as xs:time</entry>
<entry key="CastableAs124">xs:string("13:20:00-05:00") castable as xs:time</entry>
<entry key="K-SeqExprCast-39">('1' cast as xs:boolean) cast as xs:string eq 'true'</entry>
<entry key="CastableAs123">xs:string("true") castable as xs:dateTime</entry>
<entry key="K-SeqExprCast-38">true() cast as xs:string eq "true"</entry>
<entry key="CastableAs122">xs:string("2000-01-16T00:00:00Z") castable as xs:dateTime</entry>
<entry key="K-SeqExprCast-37">false() cast as xs:string eq "false"</entry>
<entry key="CastableAs121">xs:string("-1999-05-31T13:20:00+14:00") castable as xs:dateTime</entry>
<entry key="CastableAs120">xs:string("1999-05-31T13:20:00") castable as xs:dateTime</entry>
<entry key="K-SeqExprCast-35">xs:boolean(xs:float("NaN")) eq false()</entry>
<entry key="K-SeqExprCast-34">xs:boolean(xs:double("NaN")) eq false()</entry>
<entry key="K-SeqExprCast-33">xs:boolean(0.0E0) eq false()</entry>
<entry key="K-SeqExprCast-32">xs:boolean(xs:double(-0)) eq false()</entry>
<entry key="generalexpression39">(10000,50000) = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="K-SeqExprCast-31">xs:boolean(xs:double(+0)) eq false()</entry>
<entry key="generalexpression38">(10000,50000) = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="K-SeqExprCast-30">xs:boolean(-0) eq false()</entry>
<entry key="generalexpression37">(10000,50000) = (/works/employee[1]/hours[1])</entry>
<entry key="instanceof69">xs:anyURI("http://www.example.com") instance of xs:date</entry>
<entry key="instanceof68">xs:anyURI("http://www.example.com") instance of xs:time</entry>
<entry key="instanceof67">xs:anyURI("http://www.example.com") instance of xs:dateTime</entry>
<entry key="generalexpression33">(10000,50000) = (10000,50000)</entry>
<entry key="instanceof66">1267.43233E12 instance of xs:int</entry>
<entry key="generalexpression32">(10000,50000) = (50000)</entry>
<entry key="instanceof65">1267.43233E12 instance of xs:integer</entry>
<entry key="generalexpression31">(10000,50000) = 10000</entry>
<entry key="instanceof64">1267.43233E12 instance of xs:decimal</entry>
<entry key="generalexpression30">(10000,50000) = ()</entry>
<entry key="instanceof63">1267.43233E12 instance of xs:string</entry>
<entry key="instanceof62">1267.43233E12 instance of xs:anyURI</entry>
<entry key="function-literal-349">exists(Q{http://www.w3.org/2005/xpath-functions}id#1)</entry>
<entry key="instanceof61">1267.43233E12 instance of xs:double</entry>
<entry key="function-literal-348">Q{http://www.w3.org/2005/xpath-functions}sum#2((1, 2), 0)</entry>
<entry key="instanceof60">1267.43233E12 instance of xs:float</entry>
<entry key="function-literal-347">exists(Q{http://www.w3.org/2005/xpath-functions}sum#2)</entry>
<entry key="function-literal-346">Q{http://www.w3.org/2005/xpath-functions}sum#1((1, 2))</entry>
<entry key="function-literal-345">exists(Q{http://www.w3.org/2005/xpath-functions}sum#1)</entry>
<entry key="function-literal-344">Q{http://www.w3.org/2005/xpath-functions}min#2((1, 3), 'http://www.w3.org/2005/xpath-functions/collation/codepoint')</entry>
<entry key="function-literal-343">exists(Q{http://www.w3.org/2005/xpath-functions}min#2)</entry>
<entry key="CastableAs119">xs:string("true") castable as xs:dayTimeDuration</entry>
<entry key="function-literal-342">Q{http://www.w3.org/2005/xpath-functions}min#1((1, 3))</entry>
<entry key="CastableAs118">xs:string("-PT100M") castable as xs:dayTimeDuration</entry>
<entry key="function-literal-341">exists(Q{http://www.w3.org/2005/xpath-functions}min#1)</entry>
<entry key="CastableAs117">xs:string("P3DT10H30M") castable as xs:dayTimeDuration</entry>
<entry key="function-literal-340">Q{http://www.w3.org/2005/xpath-functions}max#2((1, 3), 'http://www.w3.org/2005/xpath-functions/collation/codepoint')</entry>
<entry key="CastableAs116">xs:string("-P1Y1M1DT1H1M1.123S") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs115">xs:string("true") castable as xs:yearMonthDuration</entry>
<entry key="CastableAs114">xs:string("-P21M") castable as xs:yearMonthDuration</entry>
<entry key="K-SeqExprCast-29">xs:boolean(+0) eq false()</entry>
<entry key="cbcl-castable-nmtoken-001">xs:NMTOKEN('NMTOKEN') castable as xs:NMTOKEN</entry>
<entry key="CastableAs113">xs:string("P24M") castable as xs:yearMonthDuration</entry>
<entry key="K-SeqExprCast-28">xs:boolean(xs:decimal(0.0)) eq false()</entry>
<entry key="CastableAs112">xs:string("-P1Y1M1DT1H1M1.123S") castable as xs:yearMonthDuration</entry>
<entry key="K-SeqExprCast-27">xs:boolean(xs:decimal(0)) eq false()</entry>
<entry key="CastableAs111">xs:string("true") castable as xs:duration</entry>
<entry key="K-SeqExprCast-26">xs:boolean(xs:integer(0)) eq false()</entry>
<entry key="CastableAs110">xs:string("-P1Y1M1DT1H1M1.123S") castable as xs:duration</entry>
<entry key="K-SeqExprCast-25">xs:boolean(xs:string(0)) eq false()</entry>
<entry key="K-SeqExprCast-24">xs:boolean(xs:double(0)) eq false()</entry>
<entry key="generalexpression237">
         (10000,50000) &lt; ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="K-SeqExprCast-23">xs:boolean(xs:decimal(3)) eq true()</entry>
<entry key="generalexpression236">(10000,50000) &lt; (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="K-SeqExprCast-22">xs:boolean(xs:integer(3)) eq true()</entry>
<entry key="generalexpression235">(10000,50000) &lt; (/works/employee[1]/hours[1])</entry>
<entry key="generalexpression29">(50000) = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="K-SeqExprCast-21">xs:boolean(xs:string(1)) eq true()</entry>
<entry key="generalexpression28">(50000) = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="K-SeqExprCast-20">xs:boolean(xs:double(3)) eq true()</entry>
<entry key="generalexpression27">(50000) = (/works/employee[1]/hours[1])</entry>
<entry key="instanceof59">1267.43233E12 instance of xs:boolean</entry>
<entry key="generalexpression231">(10000,50000) &lt; (10000,50000)</entry>
<entry key="instanceof58">1267.43233E12 instance of xs:date</entry>
<entry key="generalexpression230">(10000,50000) &lt; (50000)</entry>
<entry key="instanceof57">1267.43233E12 instance of xs:time</entry>
<entry key="generalexpression23">(50000) = (10000,50000)</entry>
<entry key="instanceof56">1267.43233E12 instance of xs:dateTime</entry>
<entry key="generalexpression22">(50000) = (50000)</entry>
<entry key="instanceof55">1267.43233E12 instance of xs:int</entry>
<entry key="generalexpression21">(50000) = 10000</entry>
<entry key="instanceof54">1267.43233E12 instance of xs:integer</entry>
<entry key="generalexpression20">(50000) = ()</entry>
<entry key="instanceof53">1267.43233E12 instance of xs:decimal</entry>
<entry key="instanceof52">1267.43233E12 instance of xs:string</entry>
<entry key="function-literal-339">exists(Q{http://www.w3.org/2005/xpath-functions}max#2)</entry>
<entry key="instanceof51">1267.43233E12 instance of xs:anyURI</entry>
<entry key="function-literal-338">Q{http://www.w3.org/2005/xpath-functions}max#1((1, 3))</entry>
<entry key="instanceof50">1267.43233E12 instance of xs:double</entry>
<entry key="function-literal-337">exists(Q{http://www.w3.org/2005/xpath-functions}max#1)</entry>
<entry key="function-literal-336">Q{http://www.w3.org/2005/xpath-functions}avg#1((1, 3))</entry>
<entry key="function-literal-335">exists(Q{http://www.w3.org/2005/xpath-functions}avg#1)</entry>
<entry key="function-literal-334">Q{http://www.w3.org/2005/xpath-functions}count#1((1, true()))</entry>
<entry key="function-literal-333">exists(Q{http://www.w3.org/2005/xpath-functions}count#1)</entry>
<entry key="CastableAs109">xs:string("P1Y2M3DT10H30M23S") castable as xs:duration</entry>
<entry key="function-literal-332">Q{http://www.w3.org/2005/xpath-functions}exactly-one#1(1)</entry>
<entry key="CastableAs108">xs:string("true") castable as xs:integer</entry>
<entry key="function-literal-331">exists(Q{http://www.w3.org/2005/xpath-functions}exactly-one#1)</entry>
<entry key="CastableAs107">xs:string("-1.1234") castable as xs:integer</entry>
<entry key="function-literal-330">Q{http://www.w3.org/2005/xpath-functions}one-or-more#1(1)</entry>
<entry key="CastableAs106">xs:string("1e-5") castable as xs:integer</entry>
<entry key="CastableAs105">xs:string("NaN") castable as xs:integer</entry>
<entry key="CastableAs104">xs:string("-0.0E0") castable as xs:integer</entry>
<entry key="K-SeqExprCast-19">not(true() cast as xs:boolean eq false())</entry>
<entry key="CastableAs103">xs:string("true") castable as xs:decimal</entry>
<entry key="K-SeqExprCast-18">false() cast as xs:boolean eq false()</entry>
<entry key="CastableAs102">xs:string("5.5432") castable as xs:decimal</entry>
<entry key="K-SeqExprCast-17">'0' cast as xs:boolean eq false()</entry>
<entry key="CastableAs101">xs:string("1e-5") castable as xs:decimal</entry>
<entry key="K-SeqExprCast-16">'false' cast as xs:boolean eq false()</entry>
<entry key="generalexpression229">(10000,50000) &lt; 10000</entry>
<entry key="cbcl-cast-idref-001">xs:NCName('idref') cast as xs:IDREF</entry>
<entry key="CastableAs100">xs:string("NaN") castable as xs:decimal</entry>
<entry key="K-SeqExprCast-15">'true' cast as xs:boolean eq true()</entry>
<entry key="generalexpression228">(10000,50000) &lt; ()</entry>
<entry key="K-SeqExprCast-14">'1' cast as xs:boolean eq true()</entry>
<entry key="generalexpression227">
         (50000) &lt; ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression226">(50000) &lt; (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression225">(50000) &lt; (/works/employee[1]/hours[1])</entry>
<entry key="generalexpression19">10000 = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="greaterthaneqonanyuri-1">(xs:anyURI("http://www.example/com")) &gt;= (xs:anyURI("http://www.example/com"))</entry>
<entry key="generalexpression18">10000 = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression17">10000 = (/works/employee[1]/hours[1])</entry>
<entry key="instanceof49">1267.43233E12 instance of xs:float</entry>
<entry key="generalexpression221">(50000) &lt; (10000,50000)</entry>
<entry key="instanceof48">1267.43233E12 instance of xs:boolean</entry>
<entry key="generalexpression220">(50000) &lt; (50000)</entry>
<entry key="instanceof47">1267.43233E12 instance of xs:date</entry>
<entry key="generalexpression13">10000 = (10000,50000)</entry>
<entry key="instanceof46">1267.43233E12 instance of xs:time</entry>
<entry key="generalexpression12">10000 = ()</entry>
<entry key="instanceof45">1267.43233E12 instance of xs:dateTime</entry>
<entry key="generalexpression11">10000 = ()</entry>
<entry key="instanceof44">xs:boolean("true") instance of xs:int</entry>
<entry key="generalexpression10">() = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="instanceof43">xs:boolean("true") instance of xs:integer</entry>
<entry key="instanceof42">xs:boolean("true") instance of xs:decimal</entry>
<entry key="function-literal-329">exists(Q{http://www.w3.org/2005/xpath-functions}one-or-more#1)</entry>
<entry key="instanceof41">xs:boolean("true") instance of xs:string</entry>
<entry key="function-literal-328">Q{http://www.w3.org/2005/xpath-functions}zero-or-one#1(1)</entry>
<entry key="instanceof40">xs:boolean("true") instance of xs:anyURI</entry>
<entry key="function-literal-327">exists(Q{http://www.w3.org/2005/xpath-functions}zero-or-one#1)</entry>
<entry key="function-literal-326">Q{http://www.w3.org/2005/xpath-functions}deep-equal#3((1, true()), (1, true()), 'http://www.w3.org/2005/xpath-functions/collation/codepoint')</entry>
<entry key="function-literal-325">exists(Q{http://www.w3.org/2005/xpath-functions}deep-equal#3)</entry>
<entry key="function-literal-324">Q{http://www.w3.org/2005/xpath-functions}deep-equal#2((1, true()), (1, true()))</entry>
<entry key="function-literal-323">exists(Q{http://www.w3.org/2005/xpath-functions}deep-equal#2)</entry>
<entry key="Literals059a">"&amp;lt;"</entry>
<entry key="function-literal-322">Q{http://www.w3.org/2005/xpath-functions}index-of#3((1, 'string'), 'string', 'http://www.w3.org/2005/xpath-functions/collation/codepoint')</entry>
<entry key="function-literal-321">exists(Q{http://www.w3.org/2005/xpath-functions}index-of#3)</entry>
<entry key="function-literal-320">Q{http://www.w3.org/2005/xpath-functions}index-of#2((1, 'string'), 'string')</entry>
<entry key="generalexpression219">(50000) &lt; 10000</entry>
<entry key="generalexpression218">(50000) &lt; ()</entry>
<entry key="generalexpression217">
         10000 &lt; ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression216">10000 &lt; (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression215">10000 &lt; (/works/employee[1]/hours[1])</entry>
<entry key="instanceof39">xs:boolean("true") instance of xs:double</entry>
<entry key="generalexpression211">10000 &lt; (10000,50000)</entry>
<entry key="instanceof38">xs:boolean("true") instance of xs:float</entry>
<entry key="generalexpression210">10000 &lt; (50000)</entry>
<entry key="instanceof37">xs:boolean("true") instance of xs:boolean</entry>
<entry key="instanceof36">xs:boolean("true") instance of xs:date</entry>
<entry key="instanceof35">xs:boolean("true") instance of xs:time</entry>
<entry key="instanceof34">xs:boolean("true") instance of xs:dateTime</entry>
<entry key="instanceof33">xs:date("2000-01-01+05:00") instance of xs:int</entry>
<entry key="instanceof32">xs:date("2000-01-01+05:00") instance of xs:integer</entry>
<entry key="function-literal-319">exists(Q{http://www.w3.org/2005/xpath-functions}index-of#2)</entry>
<entry key="instanceof31">xs:date("2000-01-01+05:00") instance of xs:decimal</entry>
<entry key="function-literal-318">Q{http://www.w3.org/2005/xpath-functions}distinct-values#2((1, 1, 1), 'http://www.w3.org/2005/xpath-functions/collation/codepoint')</entry>
<entry key="instanceof30">xs:date("2000-01-01+05:00") instance of xs:string</entry>
<entry key="function-literal-317">exists(Q{http://www.w3.org/2005/xpath-functions}distinct-values#2)</entry>
<entry key="function-literal-316">Q{http://www.w3.org/2005/xpath-functions}distinct-values#1((1, 1, 1))</entry>
<entry key="function-literal-315">exists(Q{http://www.w3.org/2005/xpath-functions}distinct-values#1)</entry>
<entry key="function-literal-314">Q{http://www.w3.org/2005/xpath-functions}unordered#1(1)</entry>
<entry key="function-literal-313">exists(Q{http://www.w3.org/2005/xpath-functions}unordered#1)</entry>
<entry key="Literals058a">"&amp;apos;"</entry>
<entry key="function-literal-312">Q{http://www.w3.org/2005/xpath-functions}subsequence#3((1, true()), 1e0, 1e0)</entry>
<entry key="function-literal-311">exists(Q{http://www.w3.org/2005/xpath-functions}subsequence#3)</entry>
<entry key="function-literal-310">Q{http://www.w3.org/2005/xpath-functions}subsequence#2((1, true()), 2e0)</entry>
<entry key="generalexpression209">10000 &lt; ()</entry>
<entry key="generalexpression208">
         () &lt; ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression207">() &lt; (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression206">() &lt; (/works/employee[1]/hours[1])</entry>
<entry key="generalexpression202">() &lt; (10000,50000)</entry>
<entry key="instanceof29">xs:date("2000-01-01+05:00") instance of xs:anyURI</entry>
<entry key="generalexpression201">() &lt; (50000)</entry>
<entry key="instanceof28">xs:date("2000-01-01+05:00") instance of xs:double</entry>
<entry key="generalexpression200">() &lt; 10000</entry>
<entry key="instanceof27">xs:date("2000-01-01+05:00") instance of xs:float</entry>
<entry key="instanceof26">xs:date("2000-01-01+05:00") instance of xs:boolean</entry>
<entry key="instanceof25">xs:date("2000-01-01+05:00") instance of xs:date</entry>
<entry key="instanceof24">xs:date("2000-01-01+05:00") instance of xs:time</entry>
<entry key="instanceof23">xs:date("2000-01-01+05:00") instance of xs:dateTime</entry>
<entry key="instanceof22">xs:time("13:20:10.5Z") instance of xs:int</entry>
<entry key="function-literal-309">exists(Q{http://www.w3.org/2005/xpath-functions}subsequence#2)</entry>
<entry key="instanceof21">xs:time("13:20:10.5Z") instance of xs:integer</entry>
<entry key="function-literal-308">Q{http://www.w3.org/2005/xpath-functions}reverse#1(1 to 3)</entry>
<entry key="instanceof20">xs:time("13:20:10.5Z") instance of xs:decimal</entry>
<entry key="K-SeqExprCast-1465">xs:QName("ncname") castable as xs:QName</entry>
<entry key="function-literal-307">exists(Q{http://www.w3.org/2005/xpath-functions}reverse#1)</entry>
<entry key="K-SeqExprCast-1464">not(xs:QName("ncname") castable as xs:anyURI)</entry>
<entry key="function-literal-306">Q{http://www.w3.org/2005/xpath-functions}remove#2(('a', 'b', 'c'), 2)</entry>
<entry key="function-literal-305">exists(Q{http://www.w3.org/2005/xpath-functions}remove#2)</entry>
<entry key="K-SeqExprCast-1462">not(xs:QName("ncname") castable as xs:hexBinary)</entry>
<entry key="function-literal-304">Q{http://www.w3.org/2005/xpath-functions}insert-before#3((1, 2, 3), 2, ('a', 'b', 'c'))</entry>
<entry key="function-literal-303">exists(Q{http://www.w3.org/2005/xpath-functions}insert-before#3)</entry>
<entry key="Literals057a">"&amp;quot;"</entry>
<entry key="K-SeqExprCast-1460">not(xs:QName("ncname") castable as xs:base64Binary)</entry>
<entry key="function-literal-302">Q{http://www.w3.org/2005/xpath-functions}tail#1((1, true()))</entry>
<entry key="function-literal-301">exists(Q{http://www.w3.org/2005/xpath-functions}tail#1)</entry>
<entry key="function-literal-300">Q{http://www.w3.org/2005/xpath-functions}head#1((1, true()))</entry>
<entry key="K-QuantExprWithout-9">every $i in () satisfies $i</entry>
<entry key="K-QuantExprWithout-8">every $i in subsequence((1, 2, 3, current-time()), 1, 3) satisfies boolean($i treat as xs:integer)</entry>
<entry key="K-QuantExprWithout-7">some $i in subsequence((0, 1, 2, current-time()), 1, 3) satisfies boolean($i treat as xs:integer)</entry>
<entry key="K-QuantExprWithout-6">every $i in (1, 2, 3) satisfies count($i)</entry>
<entry key="K-QuantExprWithout-5">some $i in (0, 2, 3) satisfies count($i)</entry>
<entry key="K-SeqExprCastable-38">not(("one", "two") castable as xs:string?)</entry>
<entry key="K-SeqExprCastable-37">(1) castable as xs:integer?</entry>
<entry key="K-SeqExprCastable-36">() castable as xs:integer?</entry>
<entry key="K-SeqExprCastable-35">not(() castable as xs:integer)</entry>
<entry key="K-SeqExprCastable-34">not((1, 2, 3) castable as xs:integer)</entry>
<entry key="K-SeqExprCastable-33">not("three" castable as xs:double)</entry>
<entry key="K-SeqExprCastable-32">not("three" castable as xs:decimal)</entry>
<entry key="K-SeqExprCastable-31">not("three" castable as xs:integer)</entry>
<entry key="K-SeqExprCastable-30">not("three" castable as xs:float)</entry>
<entry key="instanceof19">xs:time("13:20:10.5Z") instance of xs:string</entry>
<entry key="instanceof18">xs:time("13:20:10.5Z") instance of xs:anyURI</entry>
<entry key="instanceof17">xs:time("13:20:10.5Z") instance of xs:double</entry>
<entry key="instanceof16">xs:time("13:20:10.5Z") instance of xs:float</entry>
<entry key="instanceof15">xs:time("13:20:10.5Z") instance of xs:boolean</entry>
<entry key="instanceof14">xs:time("13:20:10.5Z") instance of xs:date</entry>
<entry key="instanceof13">xs:time("13:20:10.5Z") instance of xs:time</entry>
<entry key="K-SeqExprCast-1458">not(xs:QName("ncname") castable as xs:boolean)</entry>
<entry key="instanceof12">xs:time("13:20:10.5Z") instance of xs:dateTime</entry>
<entry key="instanceof11">xs:dateTime("2002-04-02T12:00:00Z") instance of xs:int</entry>
<entry key="K-SeqExprCast-1456">not(xs:QName("ncname") castable as xs:gMonth)</entry>
<entry key="instanceof10">xs:dateTime("2002-04-02T12:00:00Z") instance of xs:integer</entry>
<entry key="K-SeqExprCast-1454">not(xs:QName("ncname") castable as xs:gDay)</entry>
<entry key="K-SeqExprCast-1452">not(xs:QName("ncname") castable as xs:gMonthDay)</entry>
<entry key="cbcl-castable-nonNegativeInteger-003">"-00" castable as xs:nonNegativeInteger</entry>
<entry key="cbcl-castable-nonNegativeInteger-002">"-1" castable as xs:nonNegativeInteger</entry>
<entry key="Literals056a">"&amp;amp;"</entry>
<entry key="cbcl-castable-nonNegativeInteger-001">-1 castable as xs:nonNegativeInteger</entry>
<entry key="K-SeqExprCast-1450">not(xs:QName("ncname") castable as xs:gYear)</entry>
<entry key="Axes081-4">fn:count(//center//attribute::center-attr-2)</entry>
<entry key="Axes081-3">fn:count(//center//attribute::center-attr-2)</entry>
<entry key="K-SeqExprCastable-29">not(xs:anyURI("example.com/") castable as xs:integer)</entry>
<entry key="Axes081-2">fn:count(//center//attribute::center-attr-2)</entry>
<entry key="K-SeqExprCastable-28">xs:float(1) castable as xs:string</entry>
<entry key="Axes081-1">fn:count(//center//attribute::center-attr-2)</entry>
<entry key="K-SeqExprCastable-27">xs:float(1) castable as xs:untypedAtomic</entry>
<entry key="K-SeqExprCastable-26">xs:float(1) castable as xs:float</entry>
<entry key="K-SeqExprCastable-25">'true' castable as xs:boolean</entry>
<entry key="K-SeqExprCastable-24">not('string' castable as xs:boolean)</entry>
<entry key="K-SeqExprCastable-23">not(("one", "two") castable as xs:string?)</entry>
<entry key="K-SeqExprCastable-22">not(xs:untypedAtomic("ncname") castable as xs:QName)</entry>
<entry key="K-SeqExprCastable-21">() castable as xs:QName?</entry>
<entry key="instanceof134">
         filter#2 instance of function(function(*), item()*) as item()*
       </entry>
<entry key="K-SeqExprCastable-20">not(() castable as xs:QName)</entry>
<entry key="instanceof133">
         filter#2 instance of function(item()*, function(item()*) as xs:boolean) as item()*
       </entry>
<entry key="instanceof132">
         filter#2 instance of function(item()*, function(item()) as xs:boolean) as item()*
       </entry>
<entry key="instanceof131">
         name#0 instance of function(item()) as xs:string
       </entry>
<entry key="instanceof130">
         name#1 instance of function(item()) as xs:string
       </entry>
<entry key="K-SeqExprCast-1448">not(xs:QName("ncname") castable as xs:gYearMonth)</entry>
<entry key="K-SeqExprCast-1446">not(xs:QName("ncname") castable as xs:date)</entry>
<entry key="CastableAs648a">let $var := "ABC" return $var castable as xs:QName</entry>
<entry key="K-SeqExprCast-1444">not(xs:QName("ncname") castable as xs:time)</entry>
<entry key="K-SeqExprCast-1442">not(xs:QName("ncname") castable as xs:dateTime)</entry>
<entry key="K-SeqExprCast-1440">not(xs:QName("ncname") castable as xs:dayTimeDuration)</entry>
<entry key="K-SeqExprCastable-19">"ncname" castable as xs:QName</entry>
<entry key="K-SeqExprCastable-18">QName("", "lname") castable as xs:QName</entry>
<entry key="K-SeqExprCastable-17">not(QName("", "lname") castable as xs:integer)</entry>
<entry key="instanceof129">
         name#1 instance of function(node()*) as xs:string
       </entry>
<entry key="instanceof128">
         name#1 instance of function(element(A)) as xs:NCName
       </entry>
<entry key="instanceof127">
         name#1 instance of function(element(A)) as xs:string+
       </entry>
<entry key="Axes070-3">fn:count(//@*)</entry>
<entry key="instanceof126">
         name#1 instance of function(element(A)) as xs:anyAtomicType
       </entry>
<entry key="Axes070-2">fn:count(//@*)</entry>
<entry key="instanceof125">
         name#1 instance of function(element(A)) as xs:string
       </entry>
<entry key="Axes070-1">fn:count(//@*)</entry>
<entry key="instanceof124">
         name#1 instance of function(element(A)?) as xs:string
       </entry>
<entry key="instanceof123">
         name#1 instance of function(node()) as xs:string
       </entry>
<entry key="instanceof122">
         name#1 instance of function(node()?) as xs:string
       </entry>
<entry key="instanceof121">
         name#1 instance of function(*)
       </entry>
<entry key="K-SeqExprCast-1438">not(xs:QName("ncname") castable as xs:yearMonthDuration)</entry>
<entry key="K-SeqExprCast-1436">not(xs:QName("ncname") castable as xs:duration)</entry>
<entry key="K-SeqExprCast-1434">not(xs:QName("ncname") castable as xs:integer)</entry>
<entry key="K-SeqExprCast-1432">not(xs:QName("ncname") castable as xs:decimal)</entry>
<entry key="Axes017-1">fn:count(//center/parent::node())</entry>
<entry key="K-SeqExprCast-1430">not(xs:QName("ncname") castable as xs:double)</entry>
<entry key="following-9">exactly-one(/works[1]/employee[12]/following::employee) &gt;&gt; exactly-one(/works[1]/employee[12]/following::employee)</entry>
<entry key="following-8">exactly-one(/works[1]/employee[13]) &gt;&gt; exactly-one(/works[1]/employee[12]/overtime[1]/day[1]/following::day)</entry>
<entry key="following-7">exactly-one(/works[1]/employee[12]/following::employee) &lt;&lt; exactly-one(/works[1]/employee[12]/overtime[1])</entry>
<entry key="following-6">exactly-one(/works[1]/employee[12]/following::employee) &lt;&lt; exactly-one(/works[1]/employee[12]/following::employee)</entry>
<entry key="following-5">(/works[1]/employee[11]/following::employee[1]) &lt;&lt; (/works[1]/employee[13])</entry>
<entry key="following-4">exactly-one(/works[1]/employee[12]/following::employee) is exactly-one(/works[1]/employee[12])</entry>
<entry key="following-3">exactly-one(/works/employee[12]/following::employee) is exactly-one(/works/employee[13])</entry>
<entry key="following-2">fn:count(/works/employee[1]/following::noSuchNode)</entry>
<entry key="instanceof110">12678967543233 instance of xs:int</entry>
<entry key="K-SeqExprCast-1428">not(xs:QName("ncname") castable as xs:float)</entry>
<entry key="K-SeqExprCast-1426">xs:QName("ncname") castable as xs:string</entry>
<entry key="K-SeqExprCast-1425">xs:QName("ncname") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="K-SeqExprCast-1424">xs:QName("ncname") castable as xs:untypedAtomic</entry>
<entry key="greaterthanonanyuri-1">(xs:anyURI("http://www.example/com")) &gt; (xs:anyURI("http://www.example/com"))</entry>
<entry key="K-SeqExprCast-1423">xs:QName("ncname") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="K-SeqExprCast-1420">xs:QName(" ncname ") eq xs:QName(" ncname ")</entry>
<entry key="Axes006-4">fn:count(//center/node())</entry>
<entry key="Axes006-3">fn:count(//center/node())</entry>
<entry key="Axes006-2">fn:count(//center/node())</entry>
<entry key="Axes006-1">fn:count(//center/node())</entry>
<entry key="instanceof109">12678967543233 instance of xs:integer</entry>
<entry key="instanceof108">12678967543233 instance of xs:decimal</entry>
<entry key="instanceof107">12678967543233 instance of xs:string</entry>
<entry key="instanceof106">12678967543233 instance of xs:anyURI</entry>
<entry key="instanceof105">12678967543233 instance of xs:double</entry>
<entry key="instanceof104">12678967543233 instance of xs:float</entry>
<entry key="instanceof103">12678967543233 instance of xs:boolean</entry>
<entry key="instanceof102">12678967543233 instance of xs:date</entry>
<entry key="instanceof101">12678967543233 instance of xs:time</entry>
<entry key="instanceof100">12678967543233 instance of xs:dateTime</entry>
<entry key="K-SeqExprCast-1419">subsequence(("dummy", 1.1, xs:QName("ncname")), 3, 1) instance of xs:QName</entry>
<entry key="Parenexpr-19">(.)</entry>
<entry key="K-SeqExprCast-1415">not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:QName)</entry>
<entry key="K-SeqExprCast-1413">xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:anyURI</entry>
<entry key="K-SeqExprCast-1412">xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:anyURI eq xs:anyURI("http://www.example.com/an/arbitrary/URI.ext")</entry>
<entry key="Parenexpr-14">(1, (2, (3, 4)), (5))</entry>
<entry key="K-SeqExprCast-1411">not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:hexBinary)</entry>
<entry key="Parenexpr-13">(1)</entry>
<entry key="Parenexpr-12">for $x in (1,2) return (if (($x eq 1)) then ($x) else ($x + 1))</entry>
<entry key="Parenexpr-10">fn:true() or (fn:true() and fn:false())</entry>
<entry key="cast-within-9">let $value := xs:integer(10.0) return $value cast as xs:unsignedInt</entry>
<entry key="cast-within-8">let $value := xs:integer(10.0) return $value cast as xs:short</entry>
<entry key="cast-within-7">let $value := xs:integer(10.0) return $value cast as xs:positiveInteger</entry>
<entry key="cast-within-6">let $value := xs:integer(10.0) return $value cast as xs:unsignedLong</entry>
<entry key="cast-within-5">let $value := xs:integer(10.0) return $value cast as xs:int</entry>
<entry key="cast-within-4">let $value := xs:integer(-10.0) return $value cast as xs:negativeInteger</entry>
<entry key="cast-within-3">let $value := xs:integer(10.0) return $value cast as xs:nonNegativeInteger</entry>
<entry key="cast-within-2">let $value := xs:integer(10.0) return $value cast as xs:long</entry>
<entry key="cast-within-1">let $value := xs:integer(-10.0) return $value cast as xs:nonPositiveInteger</entry>
<entry key="K-SeqExprCast-1409">not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:base64Binary)</entry>
<entry key="K-SeqExprCast-1407">not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:boolean)</entry>
<entry key="K-SeqExprCast-1405">not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:gMonth)</entry>
<entry key="K-SeqExprCast-1403">not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:gDay)</entry>
<entry key="K-SeqExprCast-1401">not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:gMonthDay)</entry>
<entry key="CastAs097">xs:string("-10000000") cast as xs:double</entry>
<entry key="CastAs096">xs:string("1e-5") cast as xs:double</entry>
<entry key="CastAs095">xs:string("NaN") cast as xs:double</entry>
<entry key="CastAs094">xs:string("-0.0E0") cast as xs:double</entry>
<entry key="CastAs092">xs:string("-10000000") cast as xs:float</entry>
<entry key="CastAs091">xs:string("1e-5") cast as xs:float</entry>
<entry key="CastAs090">xs:string("NaN") cast as xs:float</entry>
<entry key="CastAs089">xs:string("-0.0E0") cast as xs:float</entry>
<entry key="CastAs088">xs:string("true") cast as xs:string</entry>
<entry key="CastAs087">xs:string("0.0E0") cast as xs:string</entry>
<entry key="CastAs086">xs:string("INF") cast as xs:string</entry>
<entry key="CastAs085">xs:string("true") cast as xs:untypedAtomic</entry>
<entry key="CastAs084">xs:string("0.0E0") cast as xs:untypedAtomic</entry>
<entry key="CastAs083">xs:string("INF") cast as xs:untypedAtomic</entry>
<entry key="CastAs082">xs:untypedAtomic("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:anyURI</entry>
<entry key="CastAs081">xs:untypedAtomic("true") cast as xs:anyURI</entry>
<entry key="CastAs080">xs:untypedAtomic("http://www.example.com/~b%C3%A9b%C3%A9") cast as xs:anyURI</entry>
<entry key="predicates-9">(/root/integer[xs:integer(.) = 12678967543233])</entry>
<entry key="predicates-8">(/root/string[xs:string(.) = "A String Function"])</entry>
<entry key="predicates-5">(//integer[fn:true() or fn:true()])</entry>
<entry key="predicates-4">(//integer[fn:true() and fn:true()])</entry>
<entry key="predicates-3">(//integer[fn:not(fn:false())])</entry>
<entry key="predicates-1">(//integer[fn:true()])</entry>
<entry key="CastAs079">xs:untypedAtomic("D74D35D35D35") cast as xs:hexBinary</entry>
<entry key="CastAs078">xs:untypedAtomic("0fb7") cast as xs:hexBinary</entry>
<entry key="CastAs075">xs:untypedAtomic("D74D35D35D35") cast as xs:base64Binary</entry>
<entry key="CastAs074">xs:untypedAtomic("00000000") cast as xs:base64Binary</entry>
<entry key="CastAs073">xs:untypedAtomic("true") cast as xs:base64Binary</entry>
<entry key="CastAs072">xs:untypedAtomic("true") cast as xs:boolean</entry>
<entry key="CastAs071">xs:untypedAtomic("0") cast as xs:boolean</entry>
<entry key="CastAs068">xs:untypedAtomic("--05Z") cast as xs:gMonth</entry>
<entry key="CastAs067">xs:untypedAtomic("--12-05:00") cast as xs:gMonth</entry>
<entry key="CastAs066">xs:untypedAtomic("--05") cast as xs:gMonth</entry>
<entry key="CastAs064">xs:untypedAtomic("---31Z") cast as xs:gDay</entry>
<entry key="CastAs063">xs:untypedAtomic("---03-05:00") cast as xs:gDay</entry>
<entry key="CastAs062">xs:untypedAtomic("---31") cast as xs:gDay</entry>
<entry key="CastAs060">xs:untypedAtomic("--05-31Z") cast as xs:gMonthDay</entry>
<entry key="CastAs059">xs:untypedAtomic("--05-31+14:00") cast as xs:gMonthDay</entry>
<entry key="CastAs058">xs:untypedAtomic("--05-31") cast as xs:gMonthDay</entry>
<entry key="CastAs056">xs:untypedAtomic("1999Z") cast as xs:gYear</entry>
<entry key="CastAs055">xs:untypedAtomic("-0012-05:00") cast as xs:gYear</entry>
<entry key="CastAs054">xs:untypedAtomic("1999") cast as xs:gYear</entry>
<entry key="CastAs052">xs:untypedAtomic("1999-05Z") cast as xs:gYearMonth</entry>
<entry key="CastAs051">xs:untypedAtomic("-0012-12-05:00") cast as xs:gYearMonth</entry>
<entry key="CastAs050">xs:untypedAtomic("1999-05") cast as xs:gYearMonth</entry>
<entry key="cast-within-21">let $value := xs:long(10) return $value cast as xs:byte</entry>
<entry key="cast-within-20">let $value := xs:long(10) return $value cast as xs:unsignedInt</entry>
<entry key="CastAs048">xs:untypedAtomic("1999-05-31Z") cast as xs:date</entry>
<entry key="CastAs047">xs:untypedAtomic("-0012-12-03-05:00") cast as xs:date</entry>
<entry key="CastAs046">xs:untypedAtomic("1999-05-31") cast as xs:date</entry>
<entry key="CastAs044">xs:untypedAtomic("13:20:00Z") cast as xs:time</entry>
<entry key="CastAs043">xs:untypedAtomic("13:20:02.123") cast as xs:time</entry>
<entry key="CastAs042">xs:untypedAtomic("13:20:00-05:00") cast as xs:time</entry>
<entry key="CastAs040">xs:untypedAtomic("2000-01-16T00:00:00Z") cast as xs:dateTime</entry>
<entry key="K-SeqExprCast-399">xs:dateTime(xs:date("2002-11-23-00:00")) eq xs:dateTime("2002-11-23T00:00:00.000Z")</entry>
<entry key="K-SeqExprCast-398">xs:gDay(xs:date("2002-11-23-13:37")) eq xs:gDay("---23-13:37")</entry>
<entry key="cast-within-19">let $value := xs:long(10) return $value cast as xs:short</entry>
<entry key="K-SeqExprCast-397">xs:gDay(xs:date("2002-11-23-00:00")) eq xs:gDay("---23Z")</entry>
<entry key="cast-within-18">let $value := xs:long(10) return $value cast as xs:positiveInteger</entry>
<entry key="K-SeqExprCast-396">xs:gMonthDay(xs:date("2002-11-23-13:37")) eq xs:gMonthDay("--11-23-13:37")</entry>
<entry key="cast-within-17">let $value := xs:long(10) return $value cast as xs:unsignedLong</entry>
<entry key="K-SeqExprCast-395">xs:gMonthDay(xs:date("2002-11-23-00:00")) eq xs:gMonthDay("--11-23Z")</entry>
<entry key="cast-within-16">let $value := xs:long(10) return $value cast as xs:int</entry>
<entry key="K-SeqExprCast-394">xs:gMonth(xs:date("2002-11-23-13:37")) eq xs:gMonth("--11-13:37")</entry>
<entry key="cast-within-15">let $value := xs:long(-10) return $value cast as xs:negativeInteger</entry>
<entry key="K-SeqExprCast-393">xs:gMonth(xs:date("2002-11-23-00:00")) eq xs:gMonth("--11Z")</entry>
<entry key="cast-within-14">let $value := xs:long(10.0) return $value cast as xs:nonNegativeInteger</entry>
<entry key="K-SeqExprCast-392">xs:gYearMonth(xs:date("2002-11-23-13:37")) eq xs:gYearMonth("2002-11-13:37")</entry>
<entry key="surrogates08">codepoints-to-string((97, 98, 99, 119126, 100, 101, 102))</entry>
<entry key="cast-within-13">let $value := xs:long(10.0) return $value cast as xs:integer</entry>
<entry key="K-SeqExprCast-391">xs:gYearMonth(xs:date("2002-11-23Z")) eq xs:gYearMonth("2002-11Z")</entry>
<entry key="cast-within-12">let $value := xs:integer(10.0) return $value cast as xs:unsignedByte</entry>
<entry key="K-SeqExprCast-390">xs:gYear(xs:date("2002-11-23-13:37")) eq xs:gYear("2002-13:37")</entry>
<entry key="cast-within-11">let $value := xs:integer(10.0) return $value cast as xs:unsignedShort</entry>
<entry key="cast-within-10">let $value := xs:integer(10.0) return $value cast as xs:byte</entry>
<entry key="CastAs039">xs:untypedAtomic("-1999-05-31T13:20:00+14:00") cast as xs:dateTime</entry>
<entry key="CastAs038">xs:untypedAtomic("1999-05-31T13:20:00") cast as xs:dateTime</entry>
<entry key="CastAs036">xs:untypedAtomic("-PT100M") cast as xs:dayTimeDuration</entry>
<entry key="CastAs035">xs:untypedAtomic("P3DT10H30M") cast as xs:dayTimeDuration</entry>
<entry key="CastAs032">xs:untypedAtomic("-P21M") cast as xs:yearMonthDuration</entry>
<entry key="CastAs031">xs:untypedAtomic("P24M") cast as xs:yearMonthDuration</entry>
<entry key="K-SeqExprCast-389">xs:gYear(xs:date("2002-11-23Z")) eq xs:gYear("2002Z")</entry>
<entry key="CastAs028">xs:untypedAtomic("-P1Y1M1DT1H1M1.123S") cast as xs:duration</entry>
<entry key="CastAs027">xs:untypedAtomic("P1Y2M3DT10H30M23S") cast as xs:duration</entry>
<entry key="cbcl-castable-date-002">"25252734927766555-07-29" castable as xs:date</entry>
<entry key="cbcl-castable-date-001">"-25252734927766555-06-06" castable as xs:date</entry>
<entry key="CastAs020">xs:untypedAtomic("5.5432") cast as xs:decimal</entry>
<entry key="K-GenCompGT-9">3 &gt; (1, 2, 3)</entry>
<entry key="K-GenCompGT-8">2 &gt; (1, 2, 3)</entry>
<entry key="K-SeqExprCast-374">string(xs:time("24:00:00")) eq "00:00:00"</entry>
<entry key="K-GenCompGT-7">4 &gt; (1, 2, 3)</entry>
<entry key="K-SeqExprCast-373">xs:string(xs:time("21:01:23.110")) eq "21:01:23.11"</entry>
<entry key="K-GenCompGT-6">(1, 2, 3) &gt; 0</entry>
<entry key="K-SeqExprCast-372">xs:string(xs:time("21:01:23.11")) eq "21:01:23.11"</entry>
<entry key="K-GenCompGT-5">(1, 2, 3) &gt; 2</entry>
<entry key="K-SeqExprCast-371">xs:string(xs:time("21:01:23.435")) eq "21:01:23.435"</entry>
<entry key="K-GenCompGT-4">(1, 2, 3) &gt; 1</entry>
<entry key="K-SeqExprCast-370">xs:string(xs:time("21:01:23.010")) eq "21:01:23.01"</entry>
<entry key="K-GenCompGT-3">not(() &gt; 1 )</entry>
<entry key="K-GenCompGT-2">not(1 &gt; () )</entry>
<entry key="K-GenCompGT-1">not(() &gt; () )</entry>
<entry key="CastAs015">xs:untypedAtomic("-10000000") cast as xs:double</entry>
<entry key="CastAs014">xs:untypedAtomic("1e-5") cast as xs:double</entry>
<entry key="CastAs013">xs:untypedAtomic("NaN") cast as xs:double</entry>
<entry key="CastAs012">xs:untypedAtomic("-0.0E0") cast as xs:double</entry>
<entry key="Axes076-4">fn:count(//center//child::node())</entry>
<entry key="CastAs010">xs:untypedAtomic("-10000000") cast as xs:float</entry>
<entry key="Axes076-3">fn:count(//center//child::node())</entry>
<entry key="Axes076-2">fn:count(//center//child::node())</entry>
<entry key="Axes076-1">fn:count(//center//child::node())</entry>
<entry key="K-SeqExprCast-369">xs:string(xs:time("21:01:23.001")) eq "21:01:23.001"</entry>
<entry key="K-SeqExprCast-368">xs:string(xs:time("21:01:23.100")) eq "21:01:23.1"</entry>
<entry key="K-SeqExprCast-367">xs:string(xs:time("21:01:23.000")) eq "21:01:23"</entry>
<entry key="K-SeqExprCast-366">xs:string(xs:time("23:59:12.432+00:00")) eq "23:59:12.432Z"</entry>
<entry key="K-SeqExprCast-365">xs:string(xs:time("23:59:12.999-00:00")) eq "23:59:12.999Z"</entry>
<entry key="K-SeqExprCast-364">string(xs:time("12:44:05")) eq "12:44:05"</entry>
<entry key="CastAs009">xs:untypedAtomic("1e-5") cast as xs:float</entry>
<entry key="CastAs008">xs:untypedAtomic("NaN") cast as xs:float</entry>
<entry key="CastAs007">xs:untypedAtomic("-0.0E0") cast as xs:float</entry>
<entry key="CastAs006">xs:untypedAtomic("true") cast as xs:string</entry>
<entry key="CastAs005">xs:untypedAtomic("0.0E0") cast as xs:string</entry>
<entry key="CastAs004">xs:untypedAtomic("INF") cast as xs:string</entry>
<entry key="CastAs003">xs:untypedAtomic("true") cast as xs:untypedAtomic</entry>
<entry key="CastAs002">xs:untypedAtomic("0.0E0") cast as xs:untypedAtomic</entry>
<entry key="CastAs001">xs:untypedAtomic("INF") cast as xs:untypedAtomic</entry>
<entry key="Literals065">'He said, "I don''t like it."'</entry>
<entry key="Literals064">"He said, ""I don't like it."""</entry>
<entry key="Literals063">''''</entry>
<entry key="Literals062">""""</entry>
<entry key="Axes065-2">fn:count(//*)</entry>
<entry key="Axes065-1">fn:count(//*)</entry>
<entry key="K-SeqExprCast-350">string(xs:dateTime("2004-03-31T24:00:00")) eq "2004-04-01T00:00:00"</entry>
<entry key="K-SeqExprCast-349">string(xs:dateTime("2000-08-01T12:44:05")) eq "2000-08-01T12:44:05"</entry>
<entry key="K-SeqExprCast-348">xs:string(xs:dateTime("2002-02-15T21:01:23.110")) eq "2002-02-15T21:01:23.11"</entry>
<entry key="K-SeqExprCast-347">xs:string(xs:dateTime("2002-02-15T21:01:23.11")) eq "2002-02-15T21:01:23.11"</entry>
<entry key="K-SeqExprCast-346">xs:string(xs:dateTime("2002-02-15T21:01:23.435")) eq "2002-02-15T21:01:23.435"</entry>
<entry key="K-SeqExprCast-345">xs:string(xs:dateTime("2002-02-15T21:01:23.010")) eq "2002-02-15T21:01:23.01"</entry>
<entry key="K-SeqExprCast-344">xs:string(xs:dateTime("2002-02-15T21:01:23.001")) eq "2002-02-15T21:01:23.001"</entry>
<entry key="K-SeqExprCast-343">xs:string(xs:dateTime("2002-02-15T21:01:23.100")) eq "2002-02-15T21:01:23.1"</entry>
<entry key="K-SeqExprCast-342">xs:string(xs:dateTime("2002-02-15T21:01:23.000")) eq "2002-02-15T21:01:23"</entry>
<entry key="K2-SeqExprCast-9">xs:nonNegativeInteger("0")</entry>
<entry key="K-SeqExprCast-341">xs:string(xs:dateTime("1999-12-01T23:59:12.432+00:00")) eq "1999-12-01T23:59:12.432Z"</entry>
<entry key="K2-SeqExprCast-8">xs:byte("-128")</entry>
<entry key="K-SeqExprCast-340">xs:string(xs:dateTime("1999-12-01T23:59:12.999-00:00")) eq "1999-12-01T23:59:12.999Z"</entry>
<entry key="K2-SeqExprCast-7">xs:short("-32768")</entry>
<entry key="K2-SeqExprCast-6">xs:int("2147483647")</entry>
<entry key="K2-SeqExprCast-5">xs:long("9223372036854775807")</entry>
<entry key="K2-SeqExprCast-4">xs:negativeInteger("-1")</entry>
<entry key="K2-SeqExprCast-3">xs:nonPositiveInteger("0")</entry>
<entry key="K2-SeqExprCast-1">"myPrefix:ncname" cast as xs:QName eq QName("http://example.com/", "anotherPrefix:ncname")</entry>
<entry key="K-SeqExprCast-339">xs:time(xs:dateTime("2002-11-23T22:12:23.867-13:37")) eq xs:time("22:12:23.867-13:37")</entry>
<entry key="K-SeqExprCast-338">xs:time(xs:dateTime("2002-11-23T22:12:23.867-00:00")) eq xs:time("22:12:23.867Z")</entry>
<entry key="K-SeqExprCast-337">xs:date(xs:dateTime("2002-11-23T22:12:23.867-13:37")) eq xs:date("2002-11-23-13:37")</entry>
<entry key="K-SeqExprCast-336">xs:date(xs:dateTime("2002-11-23T22:12:23.867-00:00")) eq xs:date("2002-11-23Z")</entry>
<entry key="K-SeqExprCast-335">xs:gDay(xs:dateTime("2002-11-23T22:12:23.867-13:37")) eq xs:gDay("---23-13:37")</entry>
<entry key="K-SeqExprCast-334">xs:gDay(xs:dateTime("2002-11-23T22:12:23.867-00:00")) eq xs:gDay("---23Z")</entry>
<entry key="K-SeqExprCast-333">xs:gMonthDay(xs:dateTime("2002-11-23T22:12:23.867-13:37")) eq xs:gMonthDay("--11-23-13:37")</entry>
<entry key="K-SeqExprCast-332">xs:gMonthDay(xs:dateTime("2002-11-23T22:12:23.867-00:00")) eq xs:gMonthDay("--11-23Z")</entry>
<entry key="K-SeqExprCast-331">xs:gMonth(xs:dateTime("2002-11-23T22:12:23.867-13:37")) eq xs:gMonth("--11-13:37")</entry>
<entry key="K-SeqExprCast-330">xs:gMonth(xs:dateTime("2002-11-23T22:12:23.867-00:00")) eq xs:gMonth("--11Z")</entry>
<entry key="Axes043-2">fn:count(//center/text()/descendant-or-self::node())</entry>
<entry key="Axes043-1">fn:count(//center/text()/descendant-or-self::node())</entry>
<entry key="Literals035">+.65535032E-2</entry>
<entry key="Literals034">-.65535032E-2</entry>
<entry key="Literals033">.65535032E-2</entry>
<entry key="Literals032">65535.032E-2</entry>
<entry key="Literals031">+.65535032E2</entry>
<entry key="Literals030">-.65535032E2</entry>
<entry key="K-SeqExprCast-329">xs:gYearMonth(xs:dateTime("2002-11-23T23:12:23.867-13:37")) eq xs:gYearMonth("2002-11-13:37")</entry>
<entry key="K-SeqExprCast-328">xs:gYearMonth(xs:dateTime("2002-11-23T23:12:23.867-00:00")) eq xs:gYearMonth("2002-11Z")</entry>
<entry key="K-SeqExprCast-327">xs:gYear(xs:dateTime("2002-11-23T23:12:23.867-13:37")) eq xs:gYear("2002-13:37")</entry>
<entry key="K-SeqExprCast-326">xs:gYear(xs:dateTime("2002-11-23T23:12:23.867-00:00")) eq xs:gYear("2002Z")</entry>
<entry key="CastableAs099">xs:string("-0.0E0") castable as xs:decimal</entry>
<entry key="CastableAs098">xs:string("true") castable as xs:double</entry>
<entry key="CastableAs097">xs:string("-10000000") castable as xs:double</entry>
<entry key="CastableAs096">xs:string("1e-5") castable as xs:double</entry>
<entry key="CastableAs095">xs:string("NaN") castable as xs:double</entry>
<entry key="CastableAs094">xs:string("-0.0E0") castable as xs:double</entry>
<entry key="CastableAs093">xs:string("true") castable as xs:float</entry>
<entry key="CastableAs092">xs:string("-10000000") castable as xs:float</entry>
<entry key="CastableAs091">xs:string("1e-5") castable as xs:float</entry>
<entry key="CastableAs090">xs:string("NaN") castable as xs:float</entry>
<entry key="Axes032-4">fn:count(//center/descendant::south)</entry>
<entry key="Axes032-3">fn:count(//center/descendant::south)</entry>
<entry key="Axes032-2">fn:count(//center/descendant::south)</entry>
<entry key="Literals029">.65535032E2</entry>
<entry key="Axes032-1">fn:count(//center/descendant::south)</entry>
<entry key="Literals028">65535.032E2</entry>
<entry key="Literals027">65535032E2</entry>
<entry key="Literals026">-65535.032e-2</entry>
<entry key="Literals025">-65535.032e2</entry>
<entry key="Literals024">+.65535032e-2</entry>
<entry key="Literals023">-.65535032e-2</entry>
<entry key="Literals022">.65535032e-2</entry>
<entry key="Literals021">65535.032e-2</entry>
<entry key="Literals020">+.65535032e2</entry>
<entry key="CastableAs089">xs:string("-0.0E0") castable as xs:float</entry>
<entry key="CastableAs088">xs:string("true") castable as xs:string</entry>
<entry key="CastableAs087">xs:string("0.0E0") castable as xs:string</entry>
<entry key="following-20">fn:deep-equal(/works[1]/employee[12]/following::employee,/works[1]/employee[12]/following::employee)</entry>
<entry key="CastableAs086">xs:string("INF") castable as xs:string</entry>
<entry key="CastableAs085">xs:string("true") castable as xs:untypedAtomic</entry>
<entry key="CastableAs084">xs:string("0.0E0") castable as xs:untypedAtomic</entry>
<entry key="CastableAs083">xs:string("INF") castable as xs:untypedAtomic</entry>
<entry key="CastableAs082">xs:untypedAtomic("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:anyURI</entry>
<entry key="CastableAs081">xs:untypedAtomic("true") castable as xs:anyURI</entry>
<entry key="CastableAs080">xs:untypedAtomic("http://www.example.com/~b%C3%A9b%C3%A9") castable as xs:anyURI</entry>
<entry key="cbcl-castable-decimal-010">xs:float('-3.402823e38') castable as xs:decimal</entry>
<entry key="Literals019">-.65535032e2</entry>
<entry key="Literals018">.65535032e2</entry>
<entry key="Literals017">65535.032e2</entry>
<entry key="Literals016">65535032e2</entry>
<entry key="Literals015">+.65535032</entry>
<entry key="Literals014">-.65535032</entry>
<entry key="Literals013">.65535032</entry>
<entry key="Axes021-1">fn:count(//center/self::center)</entry>
<entry key="Literals012">65535032.0023</entry>
<entry key="Literals011">-65535032</entry>
<entry key="CastAs671">let $var := "abc" cast as xs:ENTITY return $var instance of xs:ENTITY</entry>
<entry key="Literals010">65535032</entry>
<entry key="following-19">(/works[1]/employee[12]/following::employee) or fn:false()</entry>
<entry key="cbcl-cast-unsignedLong-005">xs:unsignedLong("-00")</entry>
<entry key="following-18">(/works[1]/employee[12]/following::employee) or fn:true()</entry>
<entry key="following-17">(/works[1]/employee[12]/following::employee) and fn:false()</entry>
<entry key="following-16">(/works[1]/employee[12]/following::employee) and fn:true()</entry>
<entry key="K-SeqExprCast-307">xs:gMonthDay("--02-29+00:00") eq xs:gMonthDay("--02-29+00:00")</entry>
<entry key="following-15">(/works[1]/employee[12]/overtime/day) except (/works[1]/employee[12]/overtime/day[1]/following::day)</entry>
<entry key="K-SeqExprCast-306">xs:string(xs:gMonthDay("--01-01Z")) eq "--01-01Z"</entry>
<entry key="following-14">fn:count((/works[1]/employee[12]/following::employee) except (/works[1]/employee[12]/following::employee))</entry>
<entry key="K-SeqExprCast-305">xs:string(xs:gMonthDay("--01-01+00:00")) eq "--01-01Z"</entry>
<entry key="following-13">(/works[1]/employee[12]/overtime[1]/day[1]/following::day) intersect (/works[1]/employee[12]/overtime[1]/day[1]/following::day)</entry>
<entry key="CastableAs079">xs:untypedAtomic("D74D35D35D35") castable as xs:hexBinary</entry>
<entry key="K-SeqExprCast-304">xs:string(xs:gMonthDay("--01-01-00:00")) eq "--01-01Z"</entry>
<entry key="following-12">(/works/employee[12]/*/day[1]/following::day) | (/works/employee[12]/*/day[1])</entry>
<entry key="CastableAs078">xs:untypedAtomic("0fb7") castable as xs:hexBinary</entry>
<entry key="following-11">(/works/employee[12]/*/day[1]/following::day) | (/works/employee[12]/*/day[1]/following::day)</entry>
<entry key="CastableAs077">xs:untypedAtomic("010010101") castable as xs:hexBinary</entry>
<entry key="following-10">exactly-one(/works[1]/employee[12]) &gt;&gt; exactly-one(/works[1]/employee[12]/following::employee)</entry>
<entry key="CastableAs076">xs:untypedAtomic("true") castable as xs:hexBinary</entry>
<entry key="cbcl-castable-decimal-009">xs:float('3.402823e38') castable as xs:decimal</entry>
<entry key="CastableAs075">xs:untypedAtomic("D74D35D35D35") castable as xs:base64Binary</entry>
<entry key="cbcl-castable-decimal-008">-1.7976931348623157E+308 castable as xs:decimal</entry>
<entry key="CastableAs074">xs:untypedAtomic("00000000") castable as xs:base64Binary</entry>
<entry key="cbcl-castable-decimal-007">1.7976931348623157E+308 castable as xs:decimal</entry>
<entry key="CastableAs073">xs:untypedAtomic("true") castable as xs:base64Binary</entry>
<entry key="cbcl-castable-decimal-006">xs:double('INF') castable as xs:decimal</entry>
<entry key="CastableAs072">xs:untypedAtomic("true") castable as xs:boolean</entry>
<entry key="cbcl-castable-decimal-005">xs:double('-INF') castable as xs:decimal</entry>
<entry key="CastableAs071">xs:untypedAtomic("0") castable as xs:boolean</entry>
<entry key="cbcl-castable-decimal-004">xs:double('NaN') castable as xs:decimal</entry>
<entry key="generalexpression199">() &lt; ()</entry>
<entry key="CastableAs070">xs:untypedAtomic("0.0") castable as xs:boolean</entry>
<entry key="cbcl-castable-decimal-003">xs:float('INF') castable as xs:decimal</entry>
<entry key="generalexpression198">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="cbcl-castable-decimal-002">xs:float('-INF') castable as xs:decimal</entry>
<entry key="generalexpression197">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != ($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1])</entry>
<entry key="cbcl-castable-decimal-001">xs:float('NaN') castable as xs:decimal</entry>
<entry key="generalexpression196">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != ($works/works/employee[1]/hours[1])</entry>
<entry key="CastAs669">let $var := xs:byte(120) cast as xs:unsignedByte return $var instance of xs:unsignedByte</entry>
<entry key="CastAs668">let $var := xs:unsignedInt(120) cast as xs:unsignedShort return $var instance of xs:unsignedShort</entry>
<entry key="CastAs667">let $var := xs:unsignedShort(120) cast as xs:unsignedInt return $var instance of xs:unsignedInt</entry>
<entry key="generalexpression192">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != (10000,50000)</entry>
<entry key="CastAs666">let $var := xs:long(120) cast as xs:int return $var instance of xs:int</entry>
<entry key="generalexpression191">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != (50000)</entry>
<entry key="CastAs665">let $var := xs:int(120) cast as xs:long return $var instance of xs:long</entry>
<entry key="Literals004">'line1
line2'</entry>
<entry key="generalexpression190">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != 10000</entry>
<entry key="CastAs664">let $var := xs:short(120) cast as xs:unsignedShort return $var instance of xs:unsignedShort</entry>
<entry key="Literals003">"line1
line2"</entry>
<entry key="CastAs663">let $var := xs:nonNegativeInteger(120) cast as xs:positiveInteger return $var instance of xs:positiveInteger</entry>
<entry key="Literals002">'test'</entry>
<entry key="CastAs662">let $var := xs:nonPositiveInteger(-120) cast as xs:negativeInteger return $var instance of xs:negativeInteger</entry>
<entry key="Literals001">"test"</entry>
<entry key="CastAs661">let $var := xs:short(120) cast as xs:long return $var instance of xs:long</entry>
<entry key="CastAs660">let $var := xs:long(120) cast as xs:short return $var instance of xs:short</entry>
<entry key="Axes010-3">fn:count(//west/@*)</entry>
<entry key="Axes010-2">fn:count(//west/@*)</entry>
<entry key="function-literal-299">exists(Q{http://www.w3.org/2005/xpath-functions}head#1)</entry>
<entry key="Axes010-1">fn:count(//west/@*)</entry>
<entry key="function-literal-298">Q{http://www.w3.org/2005/xpath-functions}exists#1((1, true()))</entry>
<entry key="function-literal-297">exists(Q{http://www.w3.org/2005/xpath-functions}exists#1)</entry>
<entry key="function-literal-296">Q{http://www.w3.org/2005/xpath-functions}empty#1((1, true()))</entry>
<entry key="function-literal-295">exists(Q{http://www.w3.org/2005/xpath-functions}empty#1)</entry>
<entry key="function-literal-294">Q{http://www.w3.org/2005/xpath-functions}outermost#1(())</entry>
<entry key="function-literal-293">exists(Q{http://www.w3.org/2005/xpath-functions}outermost#1)</entry>
<entry key="CastableAs069">xs:untypedAtomic("true") castable as xs:gMonth</entry>
<entry key="function-literal-292">Q{http://www.w3.org/2005/xpath-functions}innermost#1(())</entry>
<entry key="CastableAs068">xs:untypedAtomic("--05Z") castable as xs:gMonth</entry>
<entry key="function-literal-291">exists(Q{http://www.w3.org/2005/xpath-functions}innermost#1)</entry>
<entry key="CastableAs067">xs:untypedAtomic("--12-05:00") castable as xs:gMonth</entry>
<entry key="function-literal-290">Q{http://www.w3.org/2005/xpath-functions}has-children#1(/)</entry>
<entry key="CastableAs066">xs:untypedAtomic("--05") castable as xs:gMonth</entry>
<entry key="CastableAs065">xs:untypedAtomic("true") castable as xs:gDay</entry>
<entry key="CastableAs064">xs:untypedAtomic("---31Z") castable as xs:gDay</entry>
<entry key="CastableAs063">xs:untypedAtomic("---03-05:00") castable as xs:gDay</entry>
<entry key="CastableAs062">xs:untypedAtomic("---31") castable as xs:gDay</entry>
<entry key="CastableAs061">xs:untypedAtomic("true") castable as xs:gMonthDay</entry>
<entry key="generalexpression189">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != ()</entry>
<entry key="CastableAs060">xs:untypedAtomic("--05-31Z") castable as xs:gMonthDay</entry>
<entry key="generalexpression188">($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1]) != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression187">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression186">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != (/works/employee[1]/hours[1])</entry>
<entry key="CastAs659">xs:string(12) cast as xs:unsignedByte</entry>
<entry key="CastAs658">xs:string(12) cast as xs:unsignedShort</entry>
<entry key="CastAs657">xs:string(120) cast as xs:byte</entry>
<entry key="generalexpression182">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != (10000,50000)</entry>
<entry key="CastAs656">xs:string(300) cast as xs:unsignedInt</entry>
<entry key="generalexpression181">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != (50000)</entry>
<entry key="CastAs655">xs:string(30) cast as xs:short</entry>
<entry key="generalexpression180">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != 10000</entry>
<entry key="CastAs654">xs:string(300) cast as xs:positiveInteger</entry>
<entry key="CastAs653">xs:string(20) cast as xs:unsignedLong</entry>
<entry key="CastAs652">xs:string(20) cast as xs:int</entry>
<entry key="CastAs651">xs:string(-201) cast as xs:negativeInteger</entry>
<entry key="CastAs650">xs:string(200) cast as xs:nonNegativeInteger</entry>
<entry key="function-literal-289">exists(Q{http://www.w3.org/2005/xpath-functions}has-children#1)</entry>
<entry key="function-literal-288">/Q{http://www.w3.org/2005/xpath-functions}has-children#0()</entry>
<entry key="function-literal-287">exists(Q{http://www.w3.org/2005/xpath-functions}has-children#0)</entry>
<entry key="function-literal-286">Q{http://www.w3.org/2005/xpath-functions}path#1(/)</entry>
<entry key="function-literal-285">exists(Q{http://www.w3.org/2005/xpath-functions}path#1)</entry>
<entry key="function-literal-284">/Q{http://www.w3.org/2005/xpath-functions}path#0()</entry>
<entry key="function-literal-283">exists(Q{http://www.w3.org/2005/xpath-functions}path#0)</entry>
<entry key="CastableAs059">xs:untypedAtomic("--05-31+14:00") castable as xs:gMonthDay</entry>
<entry key="function-literal-282">Q{http://www.w3.org/2005/xpath-functions}root#1(())</entry>
<entry key="CastableAs058">xs:untypedAtomic("--05-31") castable as xs:gMonthDay</entry>
<entry key="function-literal-281">exists(Q{http://www.w3.org/2005/xpath-functions}root#1)</entry>
<entry key="CastableAs057">xs:untypedAtomic("true") castable as xs:gYear</entry>
<entry key="function-literal-280">/root/Q{http://www.w3.org/2005/xpath-functions}root#0()</entry>
<entry key="CastableAs056">xs:untypedAtomic("1999Z") castable as xs:gYear</entry>
<entry key="CastableAs055">xs:untypedAtomic("-0012-05:00") castable as xs:gYear</entry>
<entry key="CastableAs054">xs:untypedAtomic("1999") castable as xs:gYear</entry>
<entry key="CastableAs053">xs:untypedAtomic("true") castable as xs:gYearMonth</entry>
<entry key="CastableAs052">xs:untypedAtomic("1999-05Z") castable as xs:gYearMonth</entry>
<entry key="CastableAs051">xs:untypedAtomic("-0012-12-05:00") castable as xs:gYearMonth</entry>
<entry key="generalexpression179">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != ()</entry>
<entry key="CastableAs050">xs:untypedAtomic("1999-05") castable as xs:gYearMonth</entry>
<entry key="generalexpression178">($works/works/employee[1]/hours[1]) != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression177">(/works/employee[1]/hours[1]) != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression176">(/works/employee[1]/hours[1]) != (/works/employee[1]/hours[1])</entry>
<entry key="CastAs649">xs:string(20) cast as xs:long</entry>
<entry key="CastAs648">xs:string(-20) cast as xs:nonPositiveInteger</entry>
<entry key="generalexpression172">(/works/employee[1]/hours[1]) != (10000,50000)</entry>
<entry key="CastAs646">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:anyURI</entry>
<entry key="generalexpression171">(/works/employee[1]/hours[1]) != (50000)</entry>
<entry key="generalexpression170">(/works/employee[1]/hours[1]) != 10000</entry>
<entry key="function-literal-279">exists(Q{http://www.w3.org/2005/xpath-functions}root#0)</entry>
<entry key="function-literal-278">Q{http://www.w3.org/2005/xpath-functions}lang#2('en', /root)</entry>
<entry key="function-literal-277">exists(Q{http://www.w3.org/2005/xpath-functions}lang#2)</entry>
<entry key="function-literal-276">/root/Q{http://www.w3.org/2005/xpath-functions}lang#1('en')</entry>
<entry key="function-literal-275">exists(Q{http://www.w3.org/2005/xpath-functions}lang#1)</entry>
<entry key="function-literal-274">Q{http://www.w3.org/2005/xpath-functions}namespace-uri#1(/root/*[2])</entry>
<entry key="function-literal-273">exists(Q{http://www.w3.org/2005/xpath-functions}namespace-uri#1)</entry>
<entry key="CastableAs049">xs:untypedAtomic("true") castable as xs:date</entry>
<entry key="K-SeqExprCast-999">not(xs:gYearMonth("1999-11") castable as xs:QName)</entry>
<entry key="function-literal-272">/root/*[2]/Q{http://www.w3.org/2005/xpath-functions}namespace-uri#0()</entry>
<entry key="CastableAs048">xs:untypedAtomic("1999-05-31Z") castable as xs:date</entry>
<entry key="function-literal-271">exists(Q{http://www.w3.org/2005/xpath-functions}namespace-uri#0)</entry>
<entry key="CastableAs047">xs:untypedAtomic("-0012-12-03-05:00") castable as xs:date</entry>
<entry key="K-SeqExprCast-997">not(xs:gYearMonth("1999-11") castable as xs:anyURI)</entry>
<entry key="function-literal-270">Q{http://www.w3.org/2005/xpath-functions}local-name#1(/root)</entry>
<entry key="CastableAs046">xs:untypedAtomic("1999-05-31") castable as xs:date</entry>
<entry key="CastableAs045">xs:untypedAtomic("true") castable as xs:time</entry>
<entry key="K-SeqExprCast-995">not(xs:gYearMonth("1999-11") castable as xs:hexBinary)</entry>
<entry key="CastableAs044">xs:untypedAtomic("13:20:00Z") castable as xs:time</entry>
<entry key="CastableAs043">xs:untypedAtomic("13:20:02.123") castable as xs:time</entry>
<entry key="K-SeqExprCast-993">not(xs:gYearMonth("1999-11") castable as xs:base64Binary)</entry>
<entry key="CastableAs042">xs:untypedAtomic("13:20:00-05:00") castable as xs:time</entry>
<entry key="CastableAs041">xs:untypedAtomic("true") castable as xs:dateTime</entry>
<entry key="K-SeqExprCast-991">not(xs:gYearMonth("1999-11") castable as xs:boolean)</entry>
<entry key="generalexpression169">(/works/employee[1]/hours[1]) != ()</entry>
<entry key="preceding-sibling-9">exactly-one(/works[1]/employee[2]/preceding-sibling::employee) &gt;&gt; exactly-one(/works[1]/employee[2]/preceding-sibling::employee)</entry>
<entry key="CastableAs040">xs:untypedAtomic("2000-01-16T00:00:00Z") castable as xs:dateTime</entry>
<entry key="preceding-sibling-8">exactly-one(/works[1]/employee[13]) &gt;&gt; exactly-one(/works[1]/employee[12]/preceding-sibling::employee[1])</entry>
<entry key="preceding-sibling-4">exactly-one(/works[1]/employee[2]/preceding-sibling::employee) is exactly-one(/works[1]/employee[2])</entry>
<entry key="preceding-sibling-3">exactly-one(/works/employee[2]/preceding-sibling::employee) is exactly-one(/works/employee[1])</entry>
<entry key="preceding-sibling-2">fn:count(/works/employee[1]/preceding-sibling::noSuchNode)</entry>
<entry key="function-literal-269">exists(Q{http://www.w3.org/2005/xpath-functions}local-name#1)</entry>
<entry key="function-literal-268">/root/Q{http://www.w3.org/2005/xpath-functions}local-name#0()</entry>
<entry key="function-literal-267">exists(Q{http://www.w3.org/2005/xpath-functions}local-name#0)</entry>
<entry key="function-literal-266">Q{http://www.w3.org/2005/xpath-functions}name#1(/root)</entry>
<entry key="function-literal-265">exists(Q{http://www.w3.org/2005/xpath-functions}name#1)</entry>
<entry key="function-literal-264">/root/Q{http://www.w3.org/2005/xpath-functions}name#0()</entry>
<entry key="function-literal-263">exists(Q{http://www.w3.org/2005/xpath-functions}name#0)</entry>
<entry key="CastableAs039">xs:untypedAtomic("-1999-05-31T13:20:00+14:00") castable as xs:dateTime</entry>
<entry key="K-SeqExprCast-989">not(xs:gYearMonth("1999-11") castable as xs:gMonth)</entry>
<entry key="function-literal-262">Q{http://www.w3.org/2005/xpath-functions}in-scope-prefixes#1(/root)</entry>
<entry key="CastableAs038">xs:untypedAtomic("1999-05-31T13:20:00") castable as xs:dateTime</entry>
<entry key="function-literal-261">exists(Q{http://www.w3.org/2005/xpath-functions}in-scope-prefixes#1)</entry>
<entry key="CastableAs037">xs:untypedAtomic("true") castable as xs:dayTimeDuration</entry>
<entry key="K-SeqExprCast-987">not(xs:gYearMonth("1999-11") castable as xs:gDay)</entry>
<entry key="function-literal-260">Q{http://www.w3.org/2005/xpath-functions}namespace-uri-for-prefix#2('ns', /root/*[2])</entry>
<entry key="CastableAs036">xs:untypedAtomic("-PT100M") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs035">xs:untypedAtomic("P3DT10H30M") castable as xs:dayTimeDuration</entry>
<entry key="K-SeqExprCast-985">not(xs:gYearMonth("1999-11") castable as xs:gMonthDay)</entry>
<entry key="CastableAs034">xs:untypedAtomic("-P1Y1M1DT1H1M1.123S") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs033">xs:untypedAtomic("true") castable as xs:yearMonthDuration</entry>
<entry key="K-SeqExprCast-983">not(xs:gYearMonth("1999-11") castable as xs:gYear)</entry>
<entry key="CastableAs032">xs:untypedAtomic("-P21M") castable as xs:yearMonthDuration</entry>
<entry key="CastableAs031">xs:untypedAtomic("P24M") castable as xs:yearMonthDuration</entry>
<entry key="K-SeqExprCast-981">xs:gYearMonth("1999-11") castable as xs:gYearMonth</entry>
<entry key="CastableAs030">xs:untypedAtomic("-P1Y1M1DT1H1M1.123S") castable as xs:yearMonthDuration</entry>
<entry key="K-SeqExprCast-980">xs:gYearMonth("1999-11") cast as xs:gYearMonth eq xs:gYearMonth("1999-11")</entry>
<entry key="cast-to-parent-9">let $value := xs:positiveInteger(10.0) return $value cast as xs:float</entry>
<entry key="cast-to-parent-8">let $value := xs:unsignedLong(10.0) return $value cast as xs:float</entry>
<entry key="cast-to-parent-7">let $value := xs:int(10.0) return $value cast as xs:float</entry>
<entry key="cast-to-parent-6">let $value := xs:negativeInteger(-10.0) return $value cast as xs:float</entry>
<entry key="CastAs627">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:string</entry>
<entry key="cast-to-parent-5">let $value := xs:nonNegativeInteger(10.0) return $value cast as xs:float</entry>
<entry key="CastAs626">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:untypedAtomic</entry>
<entry key="cast-to-parent-4">let $value := xs:long(10.0) return $value cast as xs:float</entry>
<entry key="cast-to-parent-3">let $value := xs:nonPositiveInteger(-10.0) return $value cast as xs:float</entry>
<entry key="CastAs624">xs:hexBinary("d74d35d35d35") cast as xs:hexBinary</entry>
<entry key="cast-to-parent-2">let $value := xs:integer(10.0) return $value cast as xs:float</entry>
<entry key="CastAs623">xs:hexBinary("D74D35D35D35") cast as xs:hexBinary</entry>
<entry key="cast-to-parent-1">let $value := xs:decimal(10.0) return $value cast as xs:float</entry>
<entry key="CastAs622">xs:hexBinary("0fb7") cast as xs:base64Binary</entry>
<entry key="CastAs621">xs:hexBinary("D74D35D35D35") cast as xs:base64Binary</entry>
<entry key="function-literal-259">exists(Q{http://www.w3.org/2005/xpath-functions}namespace-uri-for-prefix#2)</entry>
<entry key="function-literal-258">Q{http://www.w3.org/2005/xpath-functions}namespace-uri-from-QName#1(fn:QName('http://www.example.org', 'foo:bar'))</entry>
<entry key="function-literal-257">exists(Q{http://www.w3.org/2005/xpath-functions}namespace-uri-from-QName#1)</entry>
<entry key="function-literal-256">Q{http://www.w3.org/2005/xpath-functions}local-name-from-QName#1(fn:QName('http://www.example.org', 'foo:bar'))</entry>
<entry key="function-literal-255">exists(Q{http://www.w3.org/2005/xpath-functions}local-name-from-QName#1)</entry>
<entry key="function-literal-254">Q{http://www.w3.org/2005/xpath-functions}prefix-from-QName#1(fn:QName('http://www.example.org', 'foo:bar'))</entry>
<entry key="function-literal-253">exists(Q{http://www.w3.org/2005/xpath-functions}prefix-from-QName#1)</entry>
<entry key="CastableAs029">xs:untypedAtomic("true") castable as xs:duration</entry>
<entry key="K-SeqExprCast-979">not(xs:gYearMonth("1999-11") castable as xs:date)</entry>
<entry key="K-ValCompTypeChecking-42">count((1, 2)) eq 2</entry>
<entry key="function-literal-252">Q{http://www.w3.org/2005/xpath-functions}QName#2('http://www.example.org/', 'ns:local')</entry>
<entry key="CastableAs028">xs:untypedAtomic("-P1Y1M1DT1H1M1.123S") castable as xs:duration</entry>
<entry key="function-literal-251">exists(Q{http://www.w3.org/2005/xpath-functions}QName#2)</entry>
<entry key="CastableAs027">xs:untypedAtomic("P1Y2M3DT10H30M23S") castable as xs:duration</entry>
<entry key="K-SeqExprCast-977">not(xs:gYearMonth("1999-11") castable as xs:time)</entry>
<entry key="function-literal-250">Q{http://www.w3.org/2005/xpath-functions}resolve-QName#2('ns:local', /root/*[2])</entry>
<entry key="CastableAs026">xs:untypedAtomic("true") castable as xs:integer</entry>
<entry key="CastableAs025">xs:untypedAtomic("-1.1234") castable as xs:integer</entry>
<entry key="K-SeqExprCast-975">not(xs:gYearMonth("1999-11") castable as xs:dateTime)</entry>
<entry key="CastableAs024">xs:untypedAtomic("1e-5") castable as xs:integer</entry>
<entry key="CastableAs023">xs:untypedAtomic("NaN") castable as xs:integer</entry>
<entry key="K-SeqExprCast-973">not(xs:gYearMonth("1999-11") castable as xs:dayTimeDuration)</entry>
<entry key="CastableAs022">xs:untypedAtomic("-0.0E0") castable as xs:integer</entry>
<entry key="CastableAs021">xs:untypedAtomic("true") castable as xs:decimal</entry>
<entry key="K-SeqExprCast-971">not(xs:gYearMonth("1999-11") castable as xs:yearMonthDuration)</entry>
<entry key="CastableAs020">xs:untypedAtomic("5.5432") castable as xs:decimal</entry>
<entry key="nametest-17">let $var := /works return fn:count($var/child::*:employee)</entry>
<entry key="nametest-16">let $var := /works return fn:count($var/child::employee)</entry>
<entry key="nametest-15">let $var := /works return fn:count($var/child::*)</entry>
<entry key="nametest-14">let $var := /works[1]/child::employee[12]/overtime return fn:count($var/child::* except $var/child::day)</entry>
<entry key="nametest-13">let $var := /works[1]/child::employee[12]/overtime return $var/child::* intersect $var/child::day</entry>
<entry key="nametest-12">let $var := /works/employee[12]/overtime return $var/child::*:day[1] | $var/child::*:day[2]</entry>
<entry key="function-literal-249">exists(Q{http://www.w3.org/2005/xpath-functions}resolve-QName#2)</entry>
<entry key="function-literal-248">Q{http://www.w3.org/2005/xpath-functions}format-time#5(xs:time('00:00:00Z'), '[H01]', 'en', (), ())</entry>
<entry key="function-literal-247">exists(Q{http://www.w3.org/2005/xpath-functions}format-time#5)</entry>
<entry key="function-literal-246">Q{http://www.w3.org/2005/xpath-functions}format-time#2(xs:time('00:00:00Z'), '[H01]')</entry>
<entry key="function-literal-245">exists(Q{http://www.w3.org/2005/xpath-functions}format-time#2)</entry>
<entry key="K-ValCompTypeChecking-34">not(count((1, 2, current-time())) eq 0)</entry>
<entry key="function-literal-244">Q{http://www.w3.org/2005/xpath-functions}format-date#5(xs:date('2012-01-01Z'), '[Y]', 'en', (), ())</entry>
<entry key="K-ValCompTypeChecking-33">count((0, current-time())) ne 0</entry>
<entry key="function-literal-243">exists(Q{http://www.w3.org/2005/xpath-functions}format-date#5)</entry>
<entry key="CastableAs019">xs:untypedAtomic("1e-5") castable as xs:decimal</entry>
<entry key="K-SeqExprCast-969">not(xs:gYearMonth("1999-11") castable as xs:duration)</entry>
<entry key="K-ValCompTypeChecking-32">count((0, current-time())) ge 1</entry>
<entry key="function-literal-242">Q{http://www.w3.org/2005/xpath-functions}format-date#2(xs:date('2012-01-01Z'), '[Y]')</entry>
<entry key="CastableAs018">xs:untypedAtomic("NaN") castable as xs:decimal</entry>
<entry key="K-ValCompTypeChecking-31">"a string" eq xs:untypedAtomic("a string")</entry>
<entry key="function-literal-241">exists(Q{http://www.w3.org/2005/xpath-functions}format-date#2)</entry>
<entry key="CastableAs017">xs:untypedAtomic("-0.0E0") castable as xs:decimal</entry>
<entry key="K-SeqExprCast-967">not(xs:gYearMonth("1999-11") castable as xs:integer)</entry>
<entry key="K-ValCompTypeChecking-30">xs:untypedAtomic("a string") eq "a string"</entry>
<entry key="function-literal-240">Q{http://www.w3.org/2005/xpath-functions}format-dateTime#5(xs:dateTime('2012-01-01T00:00:00Z'), '[Y]', 'en', (), ())</entry>
<entry key="CastableAs016">xs:untypedAtomic("true") castable as xs:double</entry>
<entry key="CastableAs015">xs:untypedAtomic("-10000000") castable as xs:double</entry>
<entry key="K-SeqExprCast-965">not(xs:gYearMonth("1999-11") castable as xs:decimal)</entry>
<entry key="CastableAs014">xs:untypedAtomic("1e-5") castable as xs:double</entry>
<entry key="CastableAs013">xs:untypedAtomic("NaN") castable as xs:double</entry>
<entry key="K-SeqExprCast-963">not(xs:gYearMonth("1999-11") castable as xs:double)</entry>
<entry key="CastableAs012">xs:untypedAtomic("-0.0E0") castable as xs:double</entry>
<entry key="CastableAs011">xs:untypedAtomic("true") castable as xs:float</entry>
<entry key="K-SeqExprCast-961">not(xs:gYearMonth("1999-11") castable as xs:float)</entry>
<entry key="CastableAs010">xs:untypedAtomic("-10000000") castable as xs:float</entry>
<entry key="generalexpression138">(10000,50000) != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression137">(10000,50000) != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression136">(10000,50000) != (/works/employee[1]/hours[1])</entry>
<entry key="generalexpression132">(10000,50000) != (10000,50000)</entry>
<entry key="generalexpression131">(10000,50000) != (50000)</entry>
<entry key="generalexpression130">(10000,50000) != 10000</entry>
<entry key="CastAs604">xs:hexBinary("D74D35D35D35") cast as xs:string</entry>
<entry key="CastAs603">xs:hexBinary("D74D35D35D35") cast as xs:untypedAtomic</entry>
<entry key="CastAs601">xs:base64Binary("0FB7") cast as xs:hexBinary</entry>
<entry key="CastAs600">xs:base64Binary("aA+zZ/09") cast as xs:hexBinary</entry>
<entry key="K-SeqExprCast-1399">not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:gYear)</entry>
<entry key="K-SeqExprCast-1397">not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:gYearMonth)</entry>
<entry key="function-literal-239">exists(Q{http://www.w3.org/2005/xpath-functions}format-dateTime#5)</entry>
<entry key="function-literal-238">Q{http://www.w3.org/2005/xpath-functions}format-dateTime#2(xs:dateTime('2012-01-01T00:00:00Z'), '[Y]')</entry>
<entry key="K-SeqExprCast-1395">not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:date)</entry>
<entry key="function-literal-237">exists(Q{http://www.w3.org/2005/xpath-functions}format-dateTime#2)</entry>
<entry key="function-literal-236">Q{http://www.w3.org/2005/xpath-functions}adjust-time-to-timezone#2(xs:time("00:00:00Z"),xs:dayTimeDuration("-PT10H"))</entry>
<entry key="K-SeqExprCast-1393">not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:time)</entry>
<entry key="function-literal-235">exists(Q{http://www.w3.org/2005/xpath-functions}adjust-time-to-timezone#2)</entry>
<entry key="function-literal-234">Q{http://www.w3.org/2005/xpath-functions}adjust-time-to-timezone#1(xs:time('00:00:00Z'))</entry>
<entry key="K-SeqExprCast-1391">not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:dateTime)</entry>
<entry key="function-literal-233">exists(Q{http://www.w3.org/2005/xpath-functions}adjust-time-to-timezone#1)</entry>
<entry key="CastableAs009">xs:untypedAtomic("1e-5") castable as xs:float</entry>
<entry key="K-SeqExprCast-959">xs:gYearMonth("1999-11") castable as xs:string</entry>
<entry key="function-literal-232">Q{http://www.w3.org/2005/xpath-functions}adjust-date-to-timezone#2(xs:date("1970-01-01Z"),xs:dayTimeDuration("-PT10H"))</entry>
<entry key="CastableAs008">xs:untypedAtomic("NaN") castable as xs:float</entry>
<entry key="K-SeqExprCast-958">xs:gYearMonth("1999-11") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="function-literal-231">exists(Q{http://www.w3.org/2005/xpath-functions}adjust-date-to-timezone#2)</entry>
<entry key="CastableAs007">xs:untypedAtomic("-0.0E0") castable as xs:float</entry>
<entry key="K-SeqExprCast-957">xs:gYearMonth("1999-11") castable as xs:untypedAtomic</entry>
<entry key="function-literal-230">Q{http://www.w3.org/2005/xpath-functions}adjust-date-to-timezone#1(xs:date('2012-01-01Z'))</entry>
<entry key="CastableAs006">xs:untypedAtomic("true") castable as xs:string</entry>
<entry key="K-SeqExprCast-956">xs:gYearMonth("1999-11") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="CastableAs005">xs:untypedAtomic("0.0E0") castable as xs:string</entry>
<entry key="CastableAs004">xs:untypedAtomic("INF") castable as xs:string</entry>
<entry key="K-SeqExprCast-954">xs:gYearMonth(xs:untypedAtomic( "1999-11" )) eq xs:gYearMonth("1999-11")</entry>
<entry key="CastableAs003">xs:untypedAtomic("true") castable as xs:untypedAtomic</entry>
<entry key="CastableAs002">xs:untypedAtomic("0.0E0") castable as xs:untypedAtomic</entry>
<entry key="K-SeqExprCast-952">xs:gYearMonth(" 1999-11 ") eq xs:gYearMonth(" 1999-11 ")</entry>
<entry key="CastableAs001">xs:untypedAtomic("INF") castable as xs:untypedAtomic</entry>
<entry key="K-SeqExprCast-951">subsequence(("dummy", 1.1, xs:gYearMonth("1999-11")), 3, 1) instance of xs:gYearMonth</entry>
<entry key="generalexpression129">(10000,50000) != ()</entry>
<entry key="generalexpression128">(50000) != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression127">(50000) != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression126">(50000) != (/works/employee[1]/hours[1])</entry>
<entry key="generalexpression122">(50000) != (10000,50000)</entry>
<entry key="generalexpression121">(50000) != (50000)</entry>
<entry key="generalexpression120">(50000) != 10000</entry>
<entry key="Parenexpr-9">(fn:true() or fn:true()) and fn:false()</entry>
<entry key="K-SeqExprCast-1389">not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:dayTimeDuration)</entry>
<entry key="Parenexpr-8">(2 * 5) mod 3</entry>
<entry key="Parenexpr-7">2 * (5 mod 3)</entry>
<entry key="K-SeqExprCast-1387">not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:yearMonthDuration)</entry>
<entry key="Parenexpr-6">(2 + 4) idiv 2</entry>
<entry key="function-literal-229">exists(Q{http://www.w3.org/2005/xpath-functions}adjust-date-to-timezone#1)</entry>
<entry key="Parenexpr-5">2 + (4 idiv 2)</entry>
<entry key="function-literal-228">Q{http://www.w3.org/2005/xpath-functions}adjust-dateTime-to-timezone#2(xs:dateTime("1970-01-01T00:00:00Z"),xs:dayTimeDuration("-PT10H"))</entry>
<entry key="K-SeqExprCast-1385">not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:duration)</entry>
<entry key="Parenexpr-4">(-2) + 5</entry>
<entry key="function-literal-227">exists(Q{http://www.w3.org/2005/xpath-functions}adjust-dateTime-to-timezone#2)</entry>
<entry key="Parenexpr-3">-(2 + 5)</entry>
<entry key="function-literal-226">Q{http://www.w3.org/2005/xpath-functions}adjust-dateTime-to-timezone#1(xs:dateTime('2012-01-01T00:00:00Z'))</entry>
<entry key="K-SeqExprCast-1383">not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:integer)</entry>
<entry key="Parenexpr-2">1 + (2 * 3)</entry>
<entry key="function-literal-225">exists(Q{http://www.w3.org/2005/xpath-functions}adjust-dateTime-to-timezone#1)</entry>
<entry key="Parenexpr-1">(1 + 2) * 3</entry>
<entry key="function-literal-224">Q{http://www.w3.org/2005/xpath-functions}timezone-from-time#1(xs:time('02:01:00Z'))</entry>
<entry key="K-SeqExprCast-1381">not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:decimal)</entry>
<entry key="function-literal-223">exists(Q{http://www.w3.org/2005/xpath-functions}timezone-from-time#1)</entry>
<entry key="function-literal-222">Q{http://www.w3.org/2005/xpath-functions}seconds-from-time#1(xs:time('02:01:00Z'))</entry>
<entry key="function-literal-221">exists(Q{http://www.w3.org/2005/xpath-functions}seconds-from-time#1)</entry>
<entry key="K-SeqExprCast-947">not(xs:date("2004-10-13") castable as xs:QName)</entry>
<entry key="function-literal-220">Q{http://www.w3.org/2005/xpath-functions}minutes-from-time#1(xs:time('02:01:00Z'))</entry>
<entry key="K-SeqExprCast-945">not(xs:date("2004-10-13") castable as xs:anyURI)</entry>
<entry key="K-SeqExprCast-943">not(xs:date("2004-10-13") castable as xs:hexBinary)</entry>
<entry key="K-SeqExprCast-941">not(xs:date("2004-10-13") castable as xs:base64Binary)</entry>
<entry key="generalexpression119">(50000) != ()</entry>
<entry key="generalexpression118">10000 != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="generalexpression117">10000 != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression116">10000 != (/works/employee[1]/hours[1])</entry>
<entry key="generalexpression112">10000 != (10000,50000)</entry>
<entry key="cbcl-cast-token-001b">
        for $string in ("&#13; foo 	 bar 
" cast as xs:token) 
        return not(contains($string, '	') or 
                   contains($string, '
') or 
                   contains($string, '&#13;') or 
                   string-length($string) ne 7)</entry>
<entry key="generalexpression111">10000 != (50000)</entry>
<entry key="generalexpression110">10000 != ()</entry>
<entry key="K-SeqExprCast-1379">not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:double)</entry>
<entry key="K-SeqExprCast-1377">not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:float)</entry>
<entry key="function-literal-219">exists(Q{http://www.w3.org/2005/xpath-functions}minutes-from-time#1)</entry>
<entry key="function-literal-218">Q{http://www.w3.org/2005/xpath-functions}hours-from-time#1(xs:time('02:01:00Z'))</entry>
<entry key="K-SeqExprCast-1375">xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:string</entry>
<entry key="function-literal-217">exists(Q{http://www.w3.org/2005/xpath-functions}hours-from-time#1)</entry>
<entry key="K-SeqExprCast-1374">xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="function-literal-216">Q{http://www.w3.org/2005/xpath-functions}timezone-from-date#1(xs:date('2012-01-01Z'))</entry>
<entry key="K-SeqExprCast-1373">xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:untypedAtomic</entry>
<entry key="function-literal-215">exists(Q{http://www.w3.org/2005/xpath-functions}timezone-from-date#1)</entry>
<entry key="K-SeqExprCast-1372">xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:untypedAtomic
      ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="function-literal-214">Q{http://www.w3.org/2005/xpath-functions}day-from-date#1(xs:date('2012-02-01Z'))</entry>
<entry key="K-SeqExprCast-1371">boolean(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext"))</entry>
<entry key="function-literal-213">exists(Q{http://www.w3.org/2005/xpath-functions}day-from-date#1)</entry>
<entry key="K-SeqExprCast-1370">xs:anyURI(xs:untypedAtomic( "http://www.example.com/an/arbitrary/URI.ext" )) 
      eq xs:anyURI("http://www.example.com/an/arbitrary/URI.ext")</entry>
<entry key="K-SeqExprCast-939">not(xs:date("2004-10-13") castable as xs:boolean)</entry>
<entry key="function-literal-212">Q{http://www.w3.org/2005/xpath-functions}month-from-date#1(xs:date('2012-02-01Z'))</entry>
<entry key="function-literal-211">exists(Q{http://www.w3.org/2005/xpath-functions}month-from-date#1)</entry>
<entry key="K-SeqExprCast-937">xs:date("2004-10-13") castable as xs:gMonth</entry>
<entry key="function-literal-210">Q{http://www.w3.org/2005/xpath-functions}year-from-date#1(xs:date('2012-02-01Z'))</entry>
<entry key="K-SeqExprCast-936">xs:date("2004-10-13") cast as xs:gMonth ne xs:gMonth("--11")</entry>
<entry key="K-SeqExprCast-935">xs:date("2004-10-13") castable as xs:gDay</entry>
<entry key="K-SeqExprCast-934">xs:date("2004-10-13") cast as xs:gDay ne xs:gDay("---03")</entry>
<entry key="K-SeqExprCast-933">xs:date("2004-10-13") castable as xs:gMonthDay</entry>
<entry key="K-SeqExprCast-932">xs:date("2004-10-13") cast as xs:gMonthDay ne xs:gMonthDay("--11-13")</entry>
<entry key="K-SeqExprCast-931">xs:date("2004-10-13") castable as xs:gYear</entry>
<entry key="generalexpression109">() != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</entry>
<entry key="K-SeqExprCast-930">xs:date("2004-10-13") cast as xs:gYear ne xs:gYear("1999")</entry>
<entry key="generalexpression108">() != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</entry>
<entry key="generalexpression107">() != (/works/employee[1]/hours[1])</entry>
<entry key="Axes049-2">fn:count(/node())</entry>
<entry key="Axes049-1">fn:count(/node())</entry>
<entry key="generalexpression103">() != (10000,50000)</entry>
<entry key="generalexpression102">() != (50000)</entry>
<entry key="generalexpression101">() != 10000</entry>
<entry key="generalexpression100">() != ()</entry>
<entry key="preceding-20">fn:deep-equal(/works[1]/employee[12]/preceding::employee,/works[1]/employee[12]/preceding::employee)</entry>
<entry key="K-SeqExprCast-1369">xs:anyURI("") eq xs:anyURI("")</entry>
<entry key="K-SeqExprCast-1368">xs:anyURI(" http://www.example.com/an/arbitrary/URI.ext ") eq xs:anyURI(" http://www.example.com/an/arbitrary/URI.ext ")</entry>
<entry key="cbcl-castable-negativeInteger-002">"0" castable as xs:negativeInteger</entry>
<entry key="cbcl-castable-ncname-004">'NC:Name' castable as xs:NCName</entry>
<entry key="K-SeqExprCast-1367">subsequence(("dummy", 1.1, xs:anyURI("http://www.example.com/an/arbitrary/URI.ext")), 3, 1) instance of xs:anyURI</entry>
<entry key="function-literal-209">exists(Q{http://www.w3.org/2005/xpath-functions}year-from-date#1)</entry>
<entry key="cbcl-castable-negativeInteger-001">0 castable as xs:negativeInteger</entry>
<entry key="cbcl-castable-ncname-003">'NCName' castable as xs:NCName</entry>
<entry key="function-literal-208">Q{http://www.w3.org/2005/xpath-functions}timezone-from-dateTime#1(xs:dateTime('2012-01-01T00:00:00Z'))</entry>
<entry key="cbcl-castable-ncname-002">fn:current-time() castable as xs:NCName</entry>
<entry key="function-literal-207">exists(Q{http://www.w3.org/2005/xpath-functions}timezone-from-dateTime#1)</entry>
<entry key="cbcl-castable-ncname-001">xs:ID('id') castable as xs:NCName</entry>
<entry key="function-literal-206">Q{http://www.w3.org/2005/xpath-functions}seconds-from-dateTime#1(xs:dateTime('2012-04-03T02:01:00Z'))</entry>
<entry key="K-SeqExprCast-1363">not(xs:hexBinary("0FB7") castable as xs:QName)</entry>
<entry key="function-literal-205">exists(Q{http://www.w3.org/2005/xpath-functions}seconds-from-dateTime#1)</entry>
<entry key="function-literal-204">Q{http://www.w3.org/2005/xpath-functions}minutes-from-dateTime#1(xs:dateTime('2012-04-03T02:01:00Z'))</entry>
<entry key="K-SeqExprCast-1361">not(xs:hexBinary("0FB7") castable as xs:anyURI)</entry>
<entry key="function-literal-203">exists(Q{http://www.w3.org/2005/xpath-functions}minutes-from-dateTime#1)</entry>
<entry key="K-SeqExprCast-929">xs:date("2004-10-13") castable as xs:gYearMonth</entry>
<entry key="function-literal-202">Q{http://www.w3.org/2005/xpath-functions}hours-from-dateTime#1(xs:dateTime('2012-04-03T02:01:00Z'))</entry>
<entry key="K-SeqExprCast-928">xs:date("2004-10-13") cast as xs:gYearMonth ne xs:gYearMonth("1999-11")</entry>
<entry key="function-literal-201">exists(Q{http://www.w3.org/2005/xpath-functions}hours-from-dateTime#1)</entry>
<entry key="K-SeqExprCast-927">xs:date("2004-10-13") castable as xs:date</entry>
<entry key="function-literal-200">Q{http://www.w3.org/2005/xpath-functions}day-from-dateTime#1(xs:dateTime('2012-04-03T02:01:00Z'))</entry>
<entry key="K-SeqExprCast-926">xs:date("2004-10-13") cast as xs:date eq xs:date("2004-10-13")</entry>
<entry key="K-SeqExprCast-925">not(xs:date("2004-10-13") castable as xs:time)</entry>
<entry key="K-SeqExprCast-923">xs:date("2004-10-13") castable as xs:dateTime</entry>
<entry key="K-SeqExprCast-922">xs:date("2004-10-13") cast as xs:dateTime ne xs:dateTime("2002-10-10T12:00:00-05:00")</entry>
<entry key="K-SeqExprCast-921">not(xs:date("2004-10-13") castable as xs:dayTimeDuration)</entry>
<entry key="preceding-19">(/works[1]/employee[12]/preceding::employee) or fn:false()</entry>
<entry key="preceding-18">(/works[1]/employee[12]/preceding::employee) or fn:true()</entry>
<entry key="preceding-17">(/works[1]/employee[12]/preceding::employee) and fn:false()</entry>
<entry key="preceding-16">(/works[1]/employee[12]/preceding::employee) and fn:true()</entry>
<entry key="preceding-15">(/works[1]/employee[12]/overtime/day) except (/works[1]/employee[12]/overtime/day[2]/preceding::day)</entry>
<entry key="preceding-14">fn:count((/works[1]/employee[12]/preceding::employee) except (/works[1]/employee[12]/preceding::employee))</entry>
<entry key="preceding-13">(/works[1]/employee[12]/overtime[1]/day[2]/preceding::day) intersect (/works[1]/employee[12]/overtime[1]/day[2]/preceding::day)</entry>
<entry key="preceding-12">(/works/employee[12]/*/day[2]/preceding::day) | (/works/employee[12]/*/day[2])</entry>
<entry key="preceding-11">(/works/employee[12]/*/day[2]/preceding::day) | (/works/employee[12]/*/day[2]/preceding::day)</entry>
<entry key="preceding-10">exactly-one(/works[1]/employee[13]) &gt;&gt; exactly-one(/works[1]/employee[2]/preceding::employee)</entry>
<entry key="K-SeqExprCast-1359">xs:hexBinary("0FB7") castable as xs:hexBinary</entry>
<entry key="K-SeqExprCast-1358">xs:hexBinary("0FB7") cast as xs:hexBinary eq xs:hexBinary("0FB7")</entry>
<entry key="K-SeqExprCast-1357">xs:hexBinary("0FB7") castable as xs:base64Binary</entry>
<entry key="K-SeqExprCast-1356">xs:hexBinary("0FB7") cast as xs:base64Binary ne xs:base64Binary("aaaa")</entry>
<entry key="K-SeqExprCast-1355">not(xs:hexBinary("0FB7") castable as xs:boolean)</entry>
<entry key="K-SeqExprCast-1353">not(xs:hexBinary("0FB7") castable as xs:gMonth)</entry>
<entry key="K-SeqExprCast-1351">not(xs:hexBinary("0FB7") castable as xs:gDay)</entry>
<entry key="K-SeqExprCast-919">not(xs:date("2004-10-13") castable as xs:yearMonthDuration)</entry>
<entry key="K-SeqExprCast-917">not(xs:date("2004-10-13") castable as xs:duration)</entry>
<entry key="K-SeqExprCast-915">not(xs:date("2004-10-13") castable as xs:integer)</entry>
<entry key="K-SeqExprCast-913">not(xs:date("2004-10-13") castable as xs:decimal)</entry>
<entry key="Axes080-3">fn:count(//west//attribute::*)</entry>
<entry key="Axes080-2">fn:count(//west//attribute::*)</entry>
<entry key="K-SeqExprCast-911">not(xs:date("2004-10-13") castable as xs:double)</entry>
<entry key="Axes080-1">fn:count(//west//attribute::*)</entry>
<entry key="K-SeqExprCast-1349">not(xs:hexBinary("0FB7") castable as xs:gMonthDay)</entry>
<entry key="Axes027-1">fn:count(//center/@center-attr-3/self::node())</entry>
<entry key="K-SeqExprCast-1347">not(xs:hexBinary("0FB7") castable as xs:gYear)</entry>
<entry key="K-SeqExprCast-1345">not(xs:hexBinary("0FB7") castable as xs:gYearMonth)</entry>
<entry key="K-SeqExprCast-1343">not(xs:hexBinary("0FB7") castable as xs:date)</entry>
<entry key="K-SeqExprCast-1341">not(xs:hexBinary("0FB7") castable as xs:time)</entry>
<entry key="K-SeqExprCast-909">not(xs:date("2004-10-13") castable as xs:float)</entry>
<entry key="K-SeqExprCast-907">xs:date("2004-10-13") castable as xs:string</entry>
<entry key="K-SeqExprCast-906">xs:date("2004-10-13") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="K-SeqExprCast-905">xs:date("2004-10-13") castable as xs:untypedAtomic</entry>
<entry key="K-SeqExprCast-904">xs:date("2004-10-13") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="K-SeqExprCast-902">xs:date(xs:untypedAtomic( "2004-10-13" )) eq xs:date("2004-10-13")</entry>
<entry key="K-SeqExprCast-900">xs:date(" 2004-10-13 ") eq xs:date(" 2004-10-13 ")</entry>
<entry key="K-SeqExprCast-1339">not(xs:hexBinary("0FB7") castable as xs:dateTime)</entry>
<entry key="K-SeqExprCast-1337">not(xs:hexBinary("0FB7") castable as xs:dayTimeDuration)</entry>
<entry key="externalcontextitem-24">works/employee[1]</entry>
<entry key="K-SeqExprCast-1335">not(xs:hexBinary("0FB7") castable as xs:yearMonthDuration)</entry>
<entry key="externalcontextitem-22">./works/employee[1]</entry>
<entry key="K-XQueryComment-9">(:*******************************************************:)
(: Test: K-XQueryComment-9                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: An empty comment inbetween the 'eq' operator and a number literal. :)
(:*******************************************************:)
1 eq (::)1</entry>
<entry key="K-SeqExprCast-1333">not(xs:hexBinary("0FB7") castable as xs:duration)</entry>
<entry key="externalcontextitem-21">for $var in (/works/employee[1]) return $var/fn:max((hours,exactly-one(hours) + 1,22))</entry>
<entry key="externalcontextitem-20">for $var in (/works/employee[1]) return $var/fn:min((hours,hours,22))</entry>
<entry key="K-XQueryComment-7">(:*******************************************************:)
(: Test: K-XQueryComment-7                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test whose essence is: `1 (: comment (: inside :) NEW LINE comment :) eq 1`. :)
(:*******************************************************:)
1 (: comment (: inside :)
				NEW LINE comment :) eq 1</entry>
<entry key="Axes016-1">fn:count(//center/parent::nowhere)</entry>
<entry key="K-SeqExprCast-1331">not(xs:hexBinary("0FB7") castable as xs:integer)</entry>
<entry key="K-XQueryComment-6">(:*******************************************************:)
(: Test: K-XQueryComment-6                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test whose essence is: `1 (: simple comment :) eq 1`. :)
(:*******************************************************:)
1 (: simple comment :) eq 1</entry>
<entry key="K-XQueryComment-5">(:*******************************************************:)
(: Test: K-XQueryComment-5                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test whose essence is: `5 instance (: strange place for a comment :) of item()`. :)
(:*******************************************************:)
5 instance (: strange place for a comment :) of item()</entry>
<entry key="K-XQueryComment-4">(:*******************************************************:)
(: Test: K-XQueryComment-4                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: Comparison of two string literals, whose content reminds of comments. :)
(:*******************************************************:)
"reminds of a comment :)" eq
		    "reminds of a comment :)"</entry>
<entry key="K-XQueryComment-3">(:*******************************************************:)
(: Test: K-XQueryComment-3                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test whose essence is: `1 (: comment (: inside :) comment :) eq 1`. :)
(:*******************************************************:)
1 (: comment (: inside :) comment :) eq 1</entry>
<entry key="K-XQueryComment-2">(:*******************************************************:)
(: Test: K-XQueryComment-2                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test whose essence is: `1 (: a (: nested :) comment :) eq 1`. :)
(:*******************************************************:)
1 (: a (: nested :) comment :) eq 1</entry>
<entry key="K-XQueryComment-1">(:*******************************************************:)
(: Test: K-XQueryComment-1                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test whose essence is: `(3(: comment inbetween :)- 1) eq 2`. :)
(:*******************************************************:)
(3(: comment inbetween :)- 1) eq 2</entry>
<entry key="externalcontextitem-19">for $var in (/works/employee[1]) return $var/fn:avg((hours,hours,hours))</entry>
<entry key="K2-NodeTest-43">(4, 5)[position() = 2][last() = 1][last() = 1][last()]</entry>
<entry key="externalcontextitem-18">for $var in (/works/employee[1]) return $var/fn:string-length(exactly-one(hours))</entry>
<entry key="K-SeqExprCast-1329">not(xs:hexBinary("0FB7") castable as xs:decimal)</entry>
<entry key="K2-NodeTest-42">(4, 5)[position() = 2][last() = 1]</entry>
<entry key="externalcontextitem-17">for $var in (/works/employee[1]) return $var/(xs:boolean(exactly-one(hours) - 39) or xs:boolean(exactly-one(hours) - 39))</entry>
<entry key="externalcontextitem-16">for $var in (/works/employee[1]) return $var/(xs:boolean(exactly-one(hours) - 39) and xs:boolean(exactly-one(hours) - 39))</entry>
<entry key="K-SeqExprCast-1327">not(xs:hexBinary("0FB7") castable as xs:double)</entry>
<entry key="externalcontextitem-15">for $var in (/works/employee[1]) return $var/(exactly-one(hours) idiv exactly-one(hours))</entry>
<entry key="externalcontextitem-14">for $var in (/works/employee[1]) return $var/(exactly-one(hours) div exactly-one(hours))</entry>
<entry key="K-SeqExprCast-1325">not(xs:hexBinary("0FB7") castable as xs:float)</entry>
<entry key="externalcontextitem-13">for $var in (/works/employee[1]) return $var/(exactly-one(hours) mod exactly-one(hours))</entry>
<entry key="externalcontextitem-12">for $var in (/works/employee[1]) return $var/(exactly-one(hours) * exactly-one(hours))</entry>
<entry key="K-SeqExprCast-1323">xs:hexBinary("0FB7") castable as xs:string</entry>
<entry key="externalcontextitem-11">for $var in (/works/employee[1]) return $var/(exactly-one(hours) - exactly-one(hours))</entry>
<entry key="K-SeqExprCast-1322">xs:hexBinary("0FB7") cast as xs:string ne xs:string("an arbitrary string")</entry>
<entry key="externalcontextitem-10">for $var in (/works/employee[1]) return $var/(exactly-one(hours) + exactly-one(hours))</entry>
<entry key="K-SeqExprCast-1321">xs:hexBinary("0FB7") castable as xs:untypedAtomic</entry>
<entry key="K-SeqExprCast-1320">xs:hexBinary("0FB7") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</entry>
<entry key="K2-Predicates-1">"c"[. treat as xs:string]</entry>
<entry key="Axes005-4">fn:count(//center/south-east)</entry>
<entry key="Axes005-3">fn:count(//center/south-east)</entry>
<entry key="Axes005-2">fn:count(//center/south-east)</entry>
<entry key="Axes005-1">fn:count(//center/south-east)</entry>
<entry key="CastableAs650">count(//employee[if (salary castable as xs:integer) then xs:integer(salary) gt 65000 else false()])</entry>
<entry key="K-SeqExprCast-1318">xs:hexBinary(xs:untypedAtomic( "0FB7" )) eq xs:hexBinary("0FB7")</entry>
<entry key="K-SeqExprCast-1317">xs:hexBinary("") eq xs:hexBinary("")</entry>
<entry key="K-SeqExprCast-1316">xs:hexBinary(" 0FB7 ") eq xs:hexBinary(" 0FB7 ")</entry>
<entry key="K-SeqExprCast-1315">subsequence(("dummy", 1.1, xs:hexBinary("0FB7")), 3, 1) instance of xs:hexBinary</entry>
<entry key="cbcl-castable-gYearMonth-004">"-0000-05" castable as xs:gYearMonth</entry>
<entry key="cbcl-castable-gYearMonth-003">"0000-05" castable as xs:gYearMonth</entry>
<entry key="cbcl-castable-gYearMonth-002">"99999999999999999999999999999-XX" castable as xs:gYearMonth</entry>
<entry key="K-SeqExprCast-1311">not(xs:base64Binary("aaaa") castable as xs:QName)</entry>
<entry key="cbcl-castable-gYearMonth-001">"99999999999999999999999999999-01" castable as xs:gYearMonth</entry>
<entry key="CastableAs649">count(//employee[salary castable as xs:integer][xs:integer(salary) gt 65000])</entry>
<entry key="CastableAs647">"ABC" castable as xs:QName</entry>
<entry key="CastableAs646">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:anyURI</entry>
<entry key="CastableAs645">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:hexBinary</entry>
<entry key="CastableAs644">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:base64Binary</entry>
<entry key="CastableAs643">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:boolean</entry>
<entry key="CastableAs642">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:gMonth</entry>
<entry key="CastableAs641">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:gDay</entry>
<entry key="CastableAs640">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:gMonthDay</entry>
<entry key="K-SeqExprCast-1309">not(xs:base64Binary("aaaa") castable as xs:anyURI)</entry>
<entry key="K-SeqExprCast-1307">xs:base64Binary("aaaa") castable as xs:hexBinary</entry>
<entry key="K-SeqExprCast-1306">xs:base64Binary("aaaa") cast as xs:hexBinary ne xs:hexBinary("0FB7")</entry>
<entry key="K-SeqExprCast-1305">xs:base64Binary("aaaa") castable as xs:base64Binary</entry>
<entry key="K-SeqExprCast-1304">xs:base64Binary("aaaa") cast as xs:base64Binary eq xs:base64Binary("aaaa")</entry>
<entry key="preceding-9">exactly-one(/works[1]/employee[2]/preceding::employee) &gt;&gt; exactly-one(/works[1]/employee[2]/preceding::employee)</entry>
<entry key="K-SeqExprCast-1303">not(xs:base64Binary("aaaa") castable as xs:boolean)</entry>
<entry key="preceding-8">exactly-one(/works[1]/employee[13]) &gt;&gt; exactly-one(/works[1]/employee[12]/overtime[1]/day[2]/preceding::day)</entry>
<entry key="K-SeqExprCast-1301">not(xs:base64Binary("aaaa") castable as xs:gMonth)</entry>
<entry key="preceding-4">exactly-one(/works[1]/employee[2]/preceding::employee) is exactly-one(/works[1]/employee[2])</entry>
<entry key="preceding-3">exactly-one(/works/employee[2]/preceding::employee) is exactly-one(/works/employee[1])</entry>
<entry key="preceding-2">fn:count(/works/employee[1]/preceding::noSuchNode)</entry>
<entry key="CastableAs639">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:gYear</entry>
<entry key="CastableAs638">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:gYearMonth</entry>
<entry key="CastableAs637">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:date</entry>
<entry key="K2-SeqExprCast-70">xs:nonPositiveInteger("+0")</entry>
<entry key="CastableAs636">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:time</entry>
<entry key="CastableAs635">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:dateTime</entry>
<entry key="CastableAs634">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs633">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:yearMonthDuration</entry>
<entry key="CastableAs632">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:duration</entry>
<entry key="CastableAs631">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:integer</entry>
<entry key="CastableAs630">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:decimal</entry>
<entry key="followingsibling-9">exactly-one(/works[1]/employee[12]/following-sibling::employee) &gt;&gt; exactly-one(/works[1]/employee[12]/following-sibling::employee)</entry>
<entry key="followingsibling-8">exactly-one(/works[1]/employee[13]) &gt;&gt; exactly-one(/works[1]/employee[12]/overtime[1]/day[1]/following-sibling::day)</entry>
<entry key="followingsibling-7">exactly-one(/works[1]/employee[12]/following-sibling::employee) &lt;&lt; exactly-one(/works[1]/employee[12]/overtime[1])</entry>
<entry key="followingsibling-6">exactly-one(/works[1]/employee[12]/following-sibling::employee) &lt;&lt; exactly-one(/works[1]/employee[12]/following-sibling::employee)</entry>
<entry key="followingsibling-5">exactly-one(/works[1]/employee[12]/overtime/day[1]/following-sibling::day) &lt;&lt; exactly-one(/works[1]/employee[13])</entry>
<entry key="followingsibling-4">exactly-one(/works[1]/employee[12]/following-sibling::employee) is exactly-one(/works[1]/employee[12])</entry>
<entry key="followingsibling-3">exactly-one(/works/employee[12]/following-sibling::employee) is exactly-one(/works/employee[13])</entry>
<entry key="followingsibling-2">fn:count(/works/employee[1]/following-sibling::noSuchNode)</entry>
<entry key="K2-FilterExpr-3">empty((1,2,3,4,5)[3.4])</entry>
<entry key="K2-SeqExprCast-69">xs:nonNegativeInteger("+1")</entry>
<entry key="K2-SeqExprCast-68">xs:positiveInteger("+1")</entry>
<entry key="K2-SeqExprCast-67">xs:nonPositiveInteger("-1")</entry>
<entry key="K2-SeqExprCast-66">xs:nonPositiveInteger("-0")</entry>
<entry key="K2-SeqExprCast-65">xs:negativeInteger("-1")</entry>
<entry key="K2-SeqExprCast-64">xs:nonNegativeInteger("-0")</entry>
<entry key="CastableAs629">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:double</entry>
<entry key="CastableAs628">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:float</entry>
<entry key="K2-SeqExprCast-61">xs:unsignedByte("+0")</entry>
<entry key="CastableAs627">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:string</entry>
<entry key="K2-SeqExprCast-60">xs:unsignedShort("+0")</entry>
<entry key="CastableAs626">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:untypedAtomic</entry>
<entry key="CastableAs625">xs:hexBinary("D74D35D35D35") castable as xs:anyURI</entry>
<entry key="CastableAs624">xs:hexBinary("d74d35d35d35") castable as xs:hexBinary</entry>
<entry key="CastableAs623">xs:hexBinary("D74D35D35D35") castable as xs:hexBinary</entry>
<entry key="CastableAs622">xs:hexBinary("0fb7") castable as xs:base64Binary</entry>
<entry key="CastableAs621">xs:hexBinary("D74D35D35D35") castable as xs:base64Binary</entry>
<entry key="CastableAs620">xs:hexBinary("D74D35D35D35") castable as xs:boolean</entry>
<entry key="K2-SeqExprCast-59">xs:unsignedInt("+0")</entry>
<entry key="K2-SeqExprCast-58">xs:unsignedLong("+0")</entry>
<entry key="internalcontextitem-21">(1,2,3)[fn:min((.,3)) eq 3]</entry>
<entry key="internalcontextitem-20">(1,2,3)[fn:min((.,2)) eq 2]</entry>
<entry key="K2-SeqExprCast-55">xs:unsignedByte("-0")</entry>
<entry key="K2-SeqExprCast-54">xs:unsignedShort("-0")</entry>
<entry key="K2-SeqExprCast-53">xs:unsignedInt("-0")</entry>
<entry key="CastableAs619">xs:hexBinary("D74D35D35D35") castable as xs:gMonth</entry>
<entry key="K2-SeqExprCast-52">xs:unsignedLong("-0")</entry>
<entry key="CastableAs618">xs:hexBinary("D74D35D35D35") castable as xs:gDay</entry>
<entry key="CastableAs617">xs:hexBinary("D74D35D35D35") castable as xs:gMonthDay</entry>
<entry key="K2-SeqExprCast-50">xs:positiveInteger(true())</entry>
<entry key="CastableAs616">xs:hexBinary("D74D35D35D35") castable as xs:gYear</entry>
<entry key="CastableAs615">xs:hexBinary("D74D35D35D35") castable as xs:gYearMonth</entry>
<entry key="CastableAs614">xs:hexBinary("D74D35D35D35") castable as xs:date</entry>
<entry key="CastableAs613">xs:hexBinary("D74D35D35D35") castable as xs:time</entry>
<entry key="CastableAs612">xs:hexBinary("D74D35D35D35") castable as xs:dateTime</entry>
<entry key="CastableAs611">xs:hexBinary("D74D35D35D35") castable as xs:dayTimeDuration</entry>
<entry key="CastableAs610">xs:hexBinary("D74D35D35D35") castable as xs:yearMonthDuration</entry>
<entry key="internalcontextitem-19">(1,2,3)[fn:avg((.,2,3)) gt 2]</entry>
<entry key="internalcontextitem-18">("ABC", "DEF","A")[fn:string-length(.) gt 2]</entry>
<entry key="internalcontextitem-17">(fn:true(),fn:false(),fn:true())[xs:boolean(.) or xs:boolean(.)]</entry>
<entry key="internalcontextitem-16">(fn:true(),fn:false(),fn:true())[xs:boolean(.) and xs:boolean(.)]</entry>
<entry key="internalcontextitem-15">(6,10,14)[(xs:integer(.) idiv xs:integer(3)) gt 2]</entry>
<entry key="internalcontextitem-14">(6,10,14)[(xs:integer(.) div xs:integer(3)) gt 2]</entry>
<entry key="internalcontextitem-13">(6,10,14)[(xs:integer(.) mod xs:integer(3)) gt 1]</entry>
<entry key="internalcontextitem-12">(3,4,5)[(xs:integer(.) * xs:integer(.)) gt 2]</entry>
<entry key="K2-SeqExprCast-48">xs:unsignedByte(true())</entry>
<entry key="internalcontextitem-11">(3,4,5)[(xs:integer(5) - xs:integer(.)) gt 1]</entry>
<entry key="K2-SeqExprCast-47">xs:unsignedByte(false())</entry>
<entry key="internalcontextitem-10">(1,2,3)[(. + .) gt 1]</entry>
<entry key="K2-SeqExprCast-46">xs:unsignedShort(true())</entry>
<entry key="K2-SeqExprCast-45">xs:unsignedShort(false())</entry>
<entry key="K2-SeqExprCast-44">xs:unsignedInt(true())</entry>
<entry key="K2-SeqExprCast-43">xs:unsignedInt(false())</entry>
<entry key="CastableAs609">xs:hexBinary("D74D35D35D35") castable as xs:duration</entry>
<entry key="K2-SeqExprCast-42">xs:unsignedLong(true())</entry>
<entry key="CastableAs608">xs:hexBinary("D74D35D35D35") castable as xs:integer</entry>
<entry key="K2-SeqExprCast-41">xs:unsignedLong(false())</entry>
<entry key="CastableAs607">xs:hexBinary("D74D35D35D35") castable as xs:decimal</entry>
<entry key="K2-SeqExprCast-40">xs:nonNegativeInteger(true())</entry>
<entry key="CastableAs606">xs:hexBinary("D74D35D35D35") castable as xs:double</entry>
<entry key="CastableAs605">xs:hexBinary("D74D35D35D35") castable as xs:float</entry>
<entry key="CastableAs604">xs:hexBinary("D74D35D35D35") castable as xs:string</entry>
<entry key="cbcl-cast-id-001">xs:NCName('id') cast as xs:ID</entry>
<entry key="CastableAs603">xs:hexBinary("D74D35D35D35") castable as xs:untypedAtomic</entry>
<entry key="CastableAs602">xs:base64Binary("10010101") castable as xs:anyURI</entry>
<entry key="CastableAs601">xs:base64Binary("0FB7") castable as xs:hexBinary</entry>
<entry key="CastableAs600">xs:base64Binary("aA+zZ/09") castable as xs:hexBinary</entry>
<entry key="cast-derived-9">let $value := xs:float(10.0) return $value cast as xs:positiveInteger</entry>
<entry key="cast-derived-8">let $value := xs:float(10.0) return $value cast as xs:unsignedLong</entry>
<entry key="cast-derived-7">let $value := xs:float(10.0) return $value cast as xs:int</entry>
<entry key="cast-derived-6">let $value := xs:float(-10.0) return $value cast as xs:negativeInteger</entry>
<entry key="cast-derived-5">let $value := xs:float(10.0) return $value cast as xs:nonNegativeInteger</entry>
<entry key="cast-derived-4">let $value := xs:float(10.0) return $value cast as xs:long</entry>
<entry key="cast-derived-3">let $value := xs:float(-10.0) return $value cast as xs:nonPositiveInteger</entry>
<entry key="cast-derived-2">let $value := xs:float(10.0) return $value cast as xs:decimal</entry>
<entry key="cast-derived-1">let $value := xs:float(10.0) return $value cast as xs:decimal</entry>
<entry key="K2-SeqExprCast-39">xs:nonNegativeInteger(false())</entry>
<entry key="K2-SeqExprCast-38">xs:byte(true())</entry>
<entry key="cbcl-castable-unsignedLong-005">"-00" castable as xs:unsignedLong</entry>
<entry key="K2-SeqExprCast-37">xs:byte(false())</entry>
<entry key="cbcl-castable-unsignedLong-004">"-1" castable as xs:unsignedLong</entry>
<entry key="K2-SeqExprCast-36">xs:short(true())</entry>
<entry key="cbcl-castable-unsignedLong-003">"18446744073709551616" castable as xs:unsignedLong</entry>
<entry key="K2-SeqExprCast-35">xs:short(false())</entry>
<entry key="cbcl-castable-unsignedLong-002">-1 castable as xs:unsignedLong</entry>
<entry key="K-ForExprWithout-56">count(for $i in (1, 2, timezone-from-time(current-time())) return ($i, $i)) eq 6 or count(for $i in (1, 2, timezone-from-time(current-time())) return ($i, $i)) eq 4</entry>
<entry key="K2-SeqExprCast-34">xs:int(true())</entry>
<entry key="cbcl-castable-unsignedLong-001">18446744073709551616 castable as xs:unsignedLong</entry>
<entry key="K-ForExprWithout-55">count(for $i in (1, 2, current-time()) return ($i, $i)) eq 6</entry>
<entry key="K2-SeqExprCast-33">xs:int(false())</entry>
<entry key="K2-SeqExprCast-32">xs:long(true())</entry>
<entry key="K2-SeqExprCast-31">xs:long(false())</entry>
<entry key="K-ForExprWithout-51">1 eq (for $xs:a in 1 return $xs:a)</entry>
<entry key="K-ForExprWithout-50">1 eq (for $a in 1 return $a)</entry>
<entry key="PathExpr-6">fn:count(.[5&lt;/])</entry>
<entry key="externalcontextitem-9">for $var in (/works/employee[1]) return $var/fn:sum((hours,hours))</entry>
<entry key="PathExpr-4">fn:count(.[(/) &lt; 5])</entry>
<entry key="externalcontextitem-8">for $var in (/works/employee[1]) return $var/fn:not(xs:boolean(exactly-one(hours) - 39))</entry>
<entry key="externalcontextitem-7">for $var in (/works/employee[1]) return $var/xs:boolean(exactly-one(hours) - 39)</entry>
<entry key="PathExpr-2">fn:count(.[(/) * 5])</entry>
<entry key="externalcontextitem-6">for $var in (/works/employee[1]) return $var/xs:double(exactly-one(hours))</entry>
<entry key="PathExpr-1">fn:count(.[5 * /])</entry>
<entry key="externalcontextitem-5">for $var in /works/employee[1] return $var/xs:float(exactly-one(hours))</entry>
<entry key="externalcontextitem-4">for $var in (/works/employee[1]) return $var/xs:decimal(exactly-one(hours))</entry>
<entry key="externalcontextitem-3">for $var in (/works/employee[1]) return $var/xs:integer(exactly-one(hours))</entry>
<entry key="externalcontextitem-2">for $var in /works/employee[1] return $var/xs:string(exactly-one(empnum))</entry>
<entry key="K-ForExprWithout-49">deep-equal((for $fo in trace((1, 2, 3), "msg") return $fo), (1, 2, 3))</entry>
<entry key="K2-SeqExprCast-27">xs:nonPositiveInteger(false())</entry>
<entry key="K-ForExprWithout-48">1 eq (for $a in 1 return $a)</entry>
<entry key="K2-SeqExprCast-26">xs:positiveInteger("999999999999999999")</entry>
<entry key="K2-SeqExprCast-25">xs:unsignedByte("255")</entry>
<entry key="K2-SeqExprCast-24">xs:unsignedShort("65535")</entry>
<entry key="K2-SeqExprCast-23">xs:unsignedInt("4294967295")</entry>
<entry key="K2-SeqExprCast-21">xs:nonNegativeInteger("999999999999999999")</entry>
<entry key="K2-SeqExprCast-20">xs:byte("127")</entry>
<entry key="cbcl-cast-normalizedString-001b">
        for $string in ("&#13; foo 	 bar 
" cast as xs:normalizedString)
        return not(contains($string, '	') or 
                   contains($string, '
') or 
                   contains($string, '&#13;') or 
                   string-length($string) ne 13)</entry>
<entry key="cbcl-castable-nonPositiveInteger-003">"+00" castable as xs:nonPositiveInteger</entry>
<entry key="cbcl-castable-nonPositiveInteger-002">"1" castable as xs:nonPositiveInteger</entry>
<entry key="cbcl-castable-nonPositiveInteger-001">1 castable as xs:nonPositiveInteger</entry>
<entry key="K-GenCompGTEQ-9">xs:untypedAtomic("false") &gt;= false()</entry>
<entry key="K-GenCompGTEQ-8">false() &gt;= xs:untypedAtomic("false")</entry>
<entry key="K-GenCompGTEQ-7">true() &gt;= xs:untypedAtomic("false")</entry>
<entry key="K-GenCompGTEQ-6">xs:untypedAtomic("false") &gt;= false()</entry>
<entry key="K-GenCompGTEQ-5">count((0, timezone-from-time(current-time()))) &gt;= 1</entry>
<entry key="K-GenCompGTEQ-3">not(() &gt;= 1 )</entry>
<entry key="K-GenCompGTEQ-2">not(1 &gt;= () )</entry>
<entry key="K-GenCompGTEQ-1">not(() &gt;= () )</entry>
<entry key="K2-SeqExprCast-19">xs:short("32767")</entry>
<entry key="K2-SeqExprCast-18">xs:int("-2147483648")</entry>
<entry key="K2-SeqExprCast-16">xs:negativeInteger("-999999999999999999")</entry>
<entry key="K2-SeqExprCast-15">xs:nonPositiveInteger("-999999999999999999")</entry>
<entry key="K2-SeqExprCast-14">xs:positiveInteger("1")</entry>
<entry key="K2-SeqExprCast-13">xs:unsignedShort("0")</entry>
<entry key="K2-SeqExprCast-12">xs:unsignedByte("0")</entry>
<entry key="K2-SeqExprCast-11">xs:unsignedInt("0")</entry>
<entry key="K2-SeqExprCast-10">xs:unsignedLong("0")</entry>
<entry key="K-SeqExprCast-285">xs:string(xs:gYearMonth("1999-01Z")) eq "1999-01Z"</entry>
<entry key="K-SeqExprCast-284">xs:string(xs:gYearMonth("1999-01+00:00")) eq "1999-01Z"</entry>
<entry key="K-SeqExprCast-283">xs:string(xs:gYearMonth("1999-01-00:00")) eq "1999-01Z"</entry>
<entry key="K-ForExprWithout-25">(for $xs:name in (1, 1) return $xs:name) instance of xs:integer+</entry>
<entry key="K-ForExprWithout-24">(for $fn:name in (1, 1) return $fn:name) instance of xs:integer+</entry>
<entry key="K-ForExprWithout-23">deep-equal(remove(for $var in (current-time(), 2, 3, 4) return $var, 1), (2, 3, 4))</entry>
<entry key="unabbreviatedSyntax-9">for $h in (/works/employee) return $h/descendant::empnum</entry>
<entry key="K-ForExprWithout-22">empty(for $var in subsequence((current-time(), 1), 4) return 1)</entry>
<entry key="unabbreviatedSyntax-8">for $h in (/works/employee[1]/hours) return $h/parent::node()</entry>
<entry key="unabbreviatedSyntax-5">for $h in (/works/employee[2]) return $h/child::node()</entry>
<entry key="K-SeqExprTreat-7">xs:integer("3") treat as xs:decimal instance of xs:decimal</entry>
<entry key="unabbreviatedSyntax-4">for $h in (/works/employee[1]) return $h/child::node()</entry>
<entry key="K-SeqExprTreat-6">"3" treat as xs:string eq '3'</entry>
<entry key="unabbreviatedSyntax-3">for $h in (/works[1]/employee[2]) return $h/child::text()</entry>
<entry key="K-SeqExprTreat-5">xs:integer(3) treat as xs:decimal instance of xs:integer</entry>
<entry key="unabbreviatedSyntax-2">for $h in (/works/employee[1]) return $h/child::*</entry>
</properties>
